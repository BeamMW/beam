// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-tron.proto

#include "messages-tron.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronFreezeBalanceContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronProposalApproveContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronProposalDeleteContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronUnfreezeAssetContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronUnfreezeBalanceContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronWithdrawBalanceContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<16> scc_info_TronSignTx_TronContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto;
class TronGetAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronGetAddress> _instance;
} _TronGetAddress_default_instance_;
class TronAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronAddress> _instance;
} _TronAddress_default_instance_;
class TronSignTx_TronContract_TronAccountUpdateContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronAccountUpdateContract> _instance;
} _TronSignTx_TronContract_TronAccountUpdateContract_default_instance_;
class TronSignTx_TronContract_TronTransferContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronTransferContract> _instance;
} _TronSignTx_TronContract_TronTransferContract_default_instance_;
class TronSignTx_TronContract_TronTransferAssetContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronTransferAssetContract> _instance;
} _TronSignTx_TronContract_TronTransferAssetContract_default_instance_;
class TronSignTx_TronContract_TronVoteWitnessContract_TronVoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronVoteWitnessContract_TronVote> _instance;
} _TronSignTx_TronContract_TronVoteWitnessContract_TronVote_default_instance_;
class TronSignTx_TronContract_TronVoteWitnessContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronVoteWitnessContract> _instance;
} _TronSignTx_TronContract_TronVoteWitnessContract_default_instance_;
class TronSignTx_TronContract_TronWitnessCreateContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronWitnessCreateContract> _instance;
} _TronSignTx_TronContract_TronWitnessCreateContract_default_instance_;
class TronSignTx_TronContract_TronWitnessUpdateContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronWitnessUpdateContract> _instance;
} _TronSignTx_TronContract_TronWitnessUpdateContract_default_instance_;
class TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply> _instance;
} _TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_default_instance_;
class TronSignTx_TronContract_TronAssetIssueContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronAssetIssueContract> _instance;
} _TronSignTx_TronContract_TronAssetIssueContract_default_instance_;
class TronSignTx_TronContract_TronParticipateAssetIssueContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronParticipateAssetIssueContract> _instance;
} _TronSignTx_TronContract_TronParticipateAssetIssueContract_default_instance_;
class TronSignTx_TronContract_TronFreezeBalanceContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronFreezeBalanceContract> _instance;
} _TronSignTx_TronContract_TronFreezeBalanceContract_default_instance_;
class TronSignTx_TronContract_TronUnfreezeBalanceContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronUnfreezeBalanceContract> _instance;
} _TronSignTx_TronContract_TronUnfreezeBalanceContract_default_instance_;
class TronSignTx_TronContract_TronUnfreezeAssetContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronUnfreezeAssetContract> _instance;
} _TronSignTx_TronContract_TronUnfreezeAssetContract_default_instance_;
class TronSignTx_TronContract_TronWithdrawBalanceContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronWithdrawBalanceContract> _instance;
} _TronSignTx_TronContract_TronWithdrawBalanceContract_default_instance_;
class TronSignTx_TronContract_TronUpdateAssetContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronUpdateAssetContract> _instance;
} _TronSignTx_TronContract_TronUpdateAssetContract_default_instance_;
class TronSignTx_TronContract_TronProposalCreateContract_TronProposalParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters> _instance;
} _TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_default_instance_;
class TronSignTx_TronContract_TronProposalCreateContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronProposalCreateContract> _instance;
} _TronSignTx_TronContract_TronProposalCreateContract_default_instance_;
class TronSignTx_TronContract_TronProposalApproveContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronProposalApproveContract> _instance;
} _TronSignTx_TronContract_TronProposalApproveContract_default_instance_;
class TronSignTx_TronContract_TronProposalDeleteContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract_TronProposalDeleteContract> _instance;
} _TronSignTx_TronContract_TronProposalDeleteContract_default_instance_;
class TronSignTx_TronContractDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx_TronContract> _instance;
} _TronSignTx_TronContract_default_instance_;
class TronSignTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignTx> _instance;
} _TronSignTx_default_instance_;
class TronSignedTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TronSignedTx> _instance;
} _TronSignedTx_default_instance_;
static void InitDefaultsTronGetAddress_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronGetAddress_default_instance_;
    new (ptr) ::TronGetAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronGetAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronGetAddress_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronGetAddress_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronAddress_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronAddress_default_instance_;
    new (ptr) ::TronAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronAddress_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronAddress_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronAccountUpdateContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronAccountUpdateContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronAccountUpdateContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronTransferContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronTransferContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronTransferContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronTransferAssetContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronTransferAssetContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronTransferAssetContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronVoteWitnessContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronVoteWitnessContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronVoteWitnessContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto}, {
      &scc_info_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto.base,}};

static void InitDefaultsTronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronWitnessCreateContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronWitnessCreateContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronWitnessCreateContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronWitnessUpdateContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronWitnessUpdateContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronWitnessUpdateContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronAssetIssueContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronAssetIssueContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronAssetIssueContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto}, {
      &scc_info_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_messages_2dtron_2eproto.base,}};

static void InitDefaultsTronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronParticipateAssetIssueContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronParticipateAssetIssueContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronParticipateAssetIssueContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronFreezeBalanceContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronFreezeBalanceContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronFreezeBalanceContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronFreezeBalanceContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronFreezeBalanceContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronFreezeBalanceContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronUnfreezeBalanceContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronUnfreezeBalanceContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronUnfreezeBalanceContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronUnfreezeBalanceContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronUnfreezeBalanceContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronUnfreezeBalanceContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronUnfreezeAssetContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronUnfreezeAssetContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronUnfreezeAssetContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronUnfreezeAssetContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronUnfreezeAssetContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronUnfreezeAssetContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronWithdrawBalanceContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronWithdrawBalanceContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronWithdrawBalanceContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronWithdrawBalanceContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronWithdrawBalanceContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronWithdrawBalanceContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronUpdateAssetContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronUpdateAssetContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronUpdateAssetContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronProposalCreateContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronProposalCreateContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronProposalCreateContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto}, {
      &scc_info_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_messages_2dtron_2eproto.base,}};

static void InitDefaultsTronSignTx_TronContract_TronProposalApproveContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronProposalApproveContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronProposalApproveContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronProposalApproveContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronProposalApproveContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronProposalApproveContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_TronProposalDeleteContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_TronProposalDeleteContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract_TronProposalDeleteContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract_TronProposalDeleteContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignTx_TronContract_TronProposalDeleteContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignTx_TronContract_TronProposalDeleteContract_messages_2dtron_2eproto}, {}};

static void InitDefaultsTronSignTx_TronContract_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_TronContract_default_instance_;
    new (ptr) ::TronSignTx_TronContract();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx_TronContract::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<16> scc_info_TronSignTx_TronContract_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 16, InitDefaultsTronSignTx_TronContract_messages_2dtron_2eproto}, {
      &scc_info_TronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronFreezeBalanceContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronUnfreezeBalanceContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronWithdrawBalanceContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronUnfreezeAssetContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronProposalApproveContract_messages_2dtron_2eproto.base,
      &scc_info_TronSignTx_TronContract_TronProposalDeleteContract_messages_2dtron_2eproto.base,}};

static void InitDefaultsTronSignTx_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignTx_default_instance_;
    new (ptr) ::TronSignTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TronSignTx_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTronSignTx_messages_2dtron_2eproto}, {
      &scc_info_TronSignTx_TronContract_messages_2dtron_2eproto.base,}};

static void InitDefaultsTronSignedTx_messages_2dtron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TronSignedTx_default_instance_;
    new (ptr) ::TronSignedTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TronSignedTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TronSignedTx_messages_2dtron_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTronSignedTx_messages_2dtron_2eproto}, {}};

void InitDefaults_messages_2dtron_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TronGetAddress_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronAddress_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronFreezeBalanceContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronUnfreezeBalanceContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronUnfreezeAssetContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronWithdrawBalanceContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronProposalApproveContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_TronProposalDeleteContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_TronContract_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignTx_messages_2dtron_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TronSignedTx_messages_2dtron_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2dtron_2eproto[24];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2dtron_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2dtron_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2dtron_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TronGetAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronGetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronGetAddress, address_n_),
  PROTOBUF_FIELD_OFFSET(::TronGetAddress, show_display_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TronAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronAddress, address_),
  0,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAccountUpdateContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAccountUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAccountUpdateContract, account_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferContract, amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferAssetContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferAssetContract, asset_name_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferAssetContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronTransferAssetContract, amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronVoteWitnessContract_TronVote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronVoteWitnessContract_TronVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronVoteWitnessContract_TronVote, vote_address_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronVoteWitnessContract_TronVote, vote_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronVoteWitnessContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronVoteWitnessContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronVoteWitnessContract, votes_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWitnessCreateContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWitnessCreateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWitnessCreateContract, url_),
  0,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWitnessUpdateContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWitnessUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWitnessUpdateContract, update_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply, frozen_amount_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply, frozen_days_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, name_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, abbr_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, total_supply_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, frozen_supply_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, trx_num_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, num_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, start_time_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, end_time_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, description_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronAssetIssueContract, url_),
  0,
  1,
  4,
  ~0u,
  5,
  6,
  7,
  8,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronParticipateAssetIssueContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronParticipateAssetIssueContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronParticipateAssetIssueContract, to_address_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronParticipateAssetIssueContract, asset_name_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronParticipateAssetIssueContract, amount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronFreezeBalanceContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronFreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronFreezeBalanceContract, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronFreezeBalanceContract, frozen_duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUnfreezeBalanceContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUnfreezeBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUnfreezeAssetContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUnfreezeAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWithdrawBalanceContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronWithdrawBalanceContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUpdateAssetContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUpdateAssetContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUpdateAssetContract, description_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronUpdateAssetContract, url_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters, key_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalCreateContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalCreateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalCreateContract, parameters_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalApproveContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalApproveContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalApproveContract, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalApproveContract, is_add_approval_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalDeleteContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalDeleteContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract_TronProposalDeleteContract, proposal_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, transfer_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, transfer_asset_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, vote_witness_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, witness_create_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, asset_issue_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, witness_update_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, participate_asset_issue_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, account_update_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, freeze_balance_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, unfreeze_balance_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, withdraw_balance_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, unfreeze_asset_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, update_asset_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, proposal_create_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, proposal_approve_contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx_TronContract, proposal_delete_contract_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::TronSignTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignTx, address_n_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx, ref_block_bytes_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx, ref_block_hash_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx, expiration_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx, data_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx, contract_),
  PROTOBUF_FIELD_OFFSET(::TronSignTx, timestamp_),
  ~0u,
  0,
  1,
  4,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::TronSignedTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TronSignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TronSignedTx, signature_),
  PROTOBUF_FIELD_OFFSET(::TronSignedTx, serialized_tx_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TronGetAddress)},
  { 9, 15, sizeof(::TronAddress)},
  { 16, 22, sizeof(::TronSignTx_TronContract_TronAccountUpdateContract)},
  { 23, 30, sizeof(::TronSignTx_TronContract_TronTransferContract)},
  { 32, 40, sizeof(::TronSignTx_TronContract_TronTransferAssetContract)},
  { 43, 50, sizeof(::TronSignTx_TronContract_TronVoteWitnessContract_TronVote)},
  { 52, 58, sizeof(::TronSignTx_TronContract_TronVoteWitnessContract)},
  { 59, 65, sizeof(::TronSignTx_TronContract_TronWitnessCreateContract)},
  { 66, 72, sizeof(::TronSignTx_TronContract_TronWitnessUpdateContract)},
  { 73, 80, sizeof(::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply)},
  { 82, 97, sizeof(::TronSignTx_TronContract_TronAssetIssueContract)},
  { 107, 115, sizeof(::TronSignTx_TronContract_TronParticipateAssetIssueContract)},
  { 118, 125, sizeof(::TronSignTx_TronContract_TronFreezeBalanceContract)},
  { 127, 132, sizeof(::TronSignTx_TronContract_TronUnfreezeBalanceContract)},
  { 132, 137, sizeof(::TronSignTx_TronContract_TronUnfreezeAssetContract)},
  { 137, 142, sizeof(::TronSignTx_TronContract_TronWithdrawBalanceContract)},
  { 142, 149, sizeof(::TronSignTx_TronContract_TronUpdateAssetContract)},
  { 151, 158, sizeof(::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters)},
  { 160, 166, sizeof(::TronSignTx_TronContract_TronProposalCreateContract)},
  { 167, 174, sizeof(::TronSignTx_TronContract_TronProposalApproveContract)},
  { 176, 182, sizeof(::TronSignTx_TronContract_TronProposalDeleteContract)},
  { 183, 204, sizeof(::TronSignTx_TronContract)},
  { 220, 232, sizeof(::TronSignTx)},
  { 239, 246, sizeof(::TronSignedTx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronGetAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronAccountUpdateContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronTransferContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronTransferAssetContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronVoteWitnessContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronWitnessCreateContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronWitnessUpdateContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronAssetIssueContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronParticipateAssetIssueContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronFreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronUnfreezeBalanceContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronUnfreezeAssetContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronWithdrawBalanceContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronUpdateAssetContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronProposalCreateContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronProposalApproveContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_TronProposalDeleteContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_TronContract_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TronSignedTx_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2dtron_2eproto = {
  {}, AddDescriptors_messages_2dtron_2eproto, "messages-tron.proto", schemas,
  file_default_instances, TableStruct_messages_2dtron_2eproto::offsets,
  file_level_metadata_messages_2dtron_2eproto, 24, file_level_enum_descriptors_messages_2dtron_2eproto, file_level_service_descriptors_messages_2dtron_2eproto,
};

const char descriptor_table_protodef_messages_2dtron_2eproto[] =
  "\n\023messages-tron.proto\"9\n\016TronGetAddress\022"
  "\021\n\taddress_n\030\001 \003(\r\022\024\n\014show_display\030\002 \001(\010"
  "\"\036\n\013TronAddress\022\017\n\007address\030\001 \001(\t\"\231\027\n\nTro"
  "nSignTx\022\021\n\taddress_n\030\001 \003(\r\022\027\n\017ref_block_"
  "bytes\030\002 \001(\014\022\026\n\016ref_block_hash\030\003 \001(\014\022\022\n\ne"
  "xpiration\030\004 \001(\004\022\014\n\004data\030\005 \001(\t\022*\n\010contrac"
  "t\030\006 \001(\0132\030.TronSignTx.TronContract\022\021\n\ttim"
  "estamp\030\007 \001(\004\032\345\025\n\014TronContract\022H\n\021transfe"
  "r_contract\030\001 \001(\0132-.TronSignTx.TronContra"
  "ct.TronTransferContract\022S\n\027transfer_asse"
  "t_contract\030\002 \001(\01322.TronSignTx.TronContra"
  "ct.TronTransferAssetContract\022O\n\025vote_wit"
  "ness_contract\030\004 \001(\01320.TronSignTx.TronCon"
  "tract.TronVoteWitnessContract\022S\n\027witness"
  "_create_contract\030\005 \001(\01322.TronSignTx.Tron"
  "Contract.TronWitnessCreateContract\022M\n\024as"
  "set_issue_contract\030\006 \001(\0132/.TronSignTx.Tr"
  "onContract.TronAssetIssueContract\022S\n\027wit"
  "ness_update_contract\030\010 \001(\01322.TronSignTx."
  "TronContract.TronWitnessUpdateContract\022d"
  "\n participate_asset_issue_contract\030\t \001(\013"
  "2:.TronSignTx.TronContract.TronParticipa"
  "teAssetIssueContract\022S\n\027account_update_c"
  "ontract\030\n \001(\01322.TronSignTx.TronContract."
  "TronAccountUpdateContract\022S\n\027freeze_bala"
  "nce_contract\030\013 \001(\01322.TronSignTx.TronCont"
  "ract.TronFreezeBalanceContract\022W\n\031unfree"
  "ze_balance_contract\030\014 \001(\01324.TronSignTx.T"
  "ronContract.TronUnfreezeBalanceContract\022"
  "W\n\031withdraw_balance_contract\030\r \001(\01324.Tro"
  "nSignTx.TronContract.TronWithdrawBalance"
  "Contract\022S\n\027unfreeze_asset_contract\030\016 \001("
  "\01322.TronSignTx.TronContract.TronUnfreeze"
  "AssetContract\022O\n\025update_asset_contract\030\017"
  " \001(\01320.TronSignTx.TronContract.TronUpdat"
  "eAssetContract\022U\n\030proposal_create_contra"
  "ct\030\020 \001(\01323.TronSignTx.TronContract.TronP"
  "roposalCreateContract\022W\n\031proposal_approv"
  "e_contract\030\021 \001(\01324.TronSignTx.TronContra"
  "ct.TronProposalApproveContract\022U\n\030propos"
  "al_delete_contract\030\022 \001(\01323.TronSignTx.Tr"
  "onContract.TronProposalDeleteContract\0321\n"
  "\031TronAccountUpdateContract\022\024\n\014account_na"
  "me\030\001 \001(\t\032:\n\024TronTransferContract\022\022\n\nto_a"
  "ddress\030\001 \001(\014\022\016\n\006amount\030\002 \001(\004\032S\n\031TronTran"
  "sferAssetContract\022\022\n\nasset_name\030\001 \001(\t\022\022\n"
  "\nto_address\030\002 \001(\014\022\016\n\006amount\030\003 \001(\004\032\231\001\n\027Tr"
  "onVoteWitnessContract\022H\n\005votes\030\001 \003(\01329.T"
  "ronSignTx.TronContract.TronVoteWitnessCo"
  "ntract.TronVote\0324\n\010TronVote\022\024\n\014vote_addr"
  "ess\030\001 \001(\014\022\022\n\nvote_count\030\002 \001(\004\032(\n\031TronWit"
  "nessCreateContract\022\013\n\003url\030\001 \001(\t\032/\n\031TronW"
  "itnessUpdateContract\022\022\n\nupdate_url\030\002 \001(\t"
  "\032\311\002\n\026TronAssetIssueContract\022\014\n\004name\030\002 \001("
  "\t\022\014\n\004abbr\030\003 \001(\t\022\024\n\014total_supply\030\004 \001(\004\022W\n"
  "\rfrozen_supply\030\005 \003(\0132@.TronSignTx.TronCo"
  "ntract.TronAssetIssueContract.TronFrozen"
  "Supply\022\017\n\007trx_num\030\006 \001(\r\022\013\n\003num\030\007 \001(\r\022\022\n\n"
  "start_time\030\010 \001(\004\022\020\n\010end_time\030\t \001(\004\022\023\n\013de"
  "scription\030\n \001(\t\022\013\n\003url\030\013 \001(\t\032>\n\020TronFroz"
  "enSupply\022\025\n\rfrozen_amount\030\001 \001(\004\022\023\n\013froze"
  "n_days\030\002 \001(\004\032[\n!TronParticipateAssetIssu"
  "eContract\022\022\n\nto_address\030\001 \001(\014\022\022\n\nasset_n"
  "ame\030\002 \001(\t\022\016\n\006amount\030\003 \001(\004\032L\n\031TronFreezeB"
  "alanceContract\022\026\n\016frozen_balance\030\001 \001(\004\022\027"
  "\n\017frozen_duration\030\002 \001(\004\032\035\n\033TronUnfreezeB"
  "alanceContract\032\033\n\031TronUnfreezeAssetContr"
  "act\032\035\n\033TronWithdrawBalanceContract\032;\n\027Tr"
  "onUpdateAssetContract\022\023\n\013description\030\001 \001"
  "(\t\022\013\n\003url\030\002 \001(\t\032\262\001\n\032TronProposalCreateCo"
  "ntract\022^\n\nparameters\030\001 \003(\0132J.TronSignTx."
  "TronContract.TronProposalCreateContract."
  "TronProposalParameters\0324\n\026TronProposalPa"
  "rameters\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\004\032K\n\033"
  "TronProposalApproveContract\022\023\n\013proposal_"
  "id\030\001 \001(\004\022\027\n\017is_add_approval\030\002 \001(\010\0321\n\032Tro"
  "nProposalDeleteContract\022\023\n\013proposal_id\030\001"
  " \001(\004\"8\n\014TronSignedTx\022\021\n\tsignature\030\001 \001(\014\022"
  "\025\n\rserialized_tx\030\002 \001(\014B8\n#com.satoshilab"
  "s.trezor.lib.protobufB\021TrezorMessageTron"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2dtron_2eproto = {
  false, InitDefaults_messages_2dtron_2eproto, 
  descriptor_table_protodef_messages_2dtron_2eproto,
  "messages-tron.proto", &assign_descriptors_table_messages_2dtron_2eproto, 3200,
};

void AddDescriptors_messages_2dtron_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2dtron_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dtron_2eproto = []() { AddDescriptors_messages_2dtron_2eproto(); return true; }();

// ===================================================================

void TronGetAddress::InitAsDefaultInstance() {
}
class TronGetAddress::HasBitSetters {
 public:
  static void set_has_show_display(TronGetAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronGetAddress::kAddressNFieldNumber;
const int TronGetAddress::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronGetAddress::TronGetAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronGetAddress)
}
TronGetAddress::TronGetAddress(const TronGetAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:TronGetAddress)
}

void TronGetAddress::SharedCtor() {
  show_display_ = false;
}

TronGetAddress::~TronGetAddress() {
  // @@protoc_insertion_point(destructor:TronGetAddress)
  SharedDtor();
}

void TronGetAddress::SharedDtor() {
}

void TronGetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronGetAddress& TronGetAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronGetAddress_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronGetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TronGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronGetAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronGetAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronGetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronGetAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronGetAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronGetAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronGetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronGetAddress)
}

::google::protobuf::uint8* TronGetAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronGetAddress)
  return target;
}

size_t TronGetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronGetAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronGetAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const TronGetAddress* source =
      ::google::protobuf::DynamicCastToGenerated<TronGetAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronGetAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronGetAddress)
    MergeFrom(*source);
  }
}

void TronGetAddress::MergeFrom(const TronGetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void TronGetAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronGetAddress::CopyFrom(const TronGetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronGetAddress::IsInitialized() const {
  return true;
}

void TronGetAddress::Swap(TronGetAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronGetAddress::InternalSwap(TronGetAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata TronGetAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronAddress::InitAsDefaultInstance() {
}
class TronAddress::HasBitSetters {
 public:
  static void set_has_address(TronAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronAddress::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronAddress::TronAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronAddress)
}
TronAddress::TronAddress(const TronAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:TronAddress)
}

void TronAddress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronAddress_messages_2dtron_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TronAddress::~TronAddress() {
  // @@protoc_insertion_point(destructor:TronAddress)
  SharedDtor();
}

void TronAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronAddress& TronAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronAddress_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:TronAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronAddress.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronAddress.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronAddress)
}

::google::protobuf::uint8* TronAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronAddress)
  return target;
}

size_t TronAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string address = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const TronAddress* source =
      ::google::protobuf::DynamicCastToGenerated<TronAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronAddress)
    MergeFrom(*source);
  }
}

void TronAddress::MergeFrom(const TronAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _has_bits_[0] |= 0x00000001u;
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void TronAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronAddress::CopyFrom(const TronAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronAddress::IsInitialized() const {
  return true;
}

void TronAddress::Swap(TronAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronAddress::InternalSwap(TronAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TronAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronAccountUpdateContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronAccountUpdateContract::HasBitSetters {
 public:
  static void set_has_account_name(TronSignTx_TronContract_TronAccountUpdateContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronAccountUpdateContract::kAccountNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronAccountUpdateContract::TronSignTx_TronContract_TronAccountUpdateContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronAccountUpdateContract)
}
TronSignTx_TronContract_TronAccountUpdateContract::TronSignTx_TronContract_TronAccountUpdateContract(const TronSignTx_TronContract_TronAccountUpdateContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronAccountUpdateContract)
}

void TronSignTx_TronContract_TronAccountUpdateContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto.base);
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TronSignTx_TronContract_TronAccountUpdateContract::~TronSignTx_TronContract_TronAccountUpdateContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronAccountUpdateContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronAccountUpdateContract::SharedDtor() {
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronAccountUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronAccountUpdateContract& TronSignTx_TronContract_TronAccountUpdateContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronAccountUpdateContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronAccountUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronAccountUpdateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    account_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronAccountUpdateContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronAccountUpdateContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string account_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronAccountUpdateContract.account_name");
        object = msg->mutable_account_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronAccountUpdateContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronAccountUpdateContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronAccountUpdateContract.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronAccountUpdateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronAccountUpdateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronAccountUpdateContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronAccountUpdateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAccountUpdateContract.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronAccountUpdateContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronAccountUpdateContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronAccountUpdateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAccountUpdateContract.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronAccountUpdateContract)
  return target;
}

size_t TronSignTx_TronContract_TronAccountUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronAccountUpdateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string account_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronAccountUpdateContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronAccountUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronAccountUpdateContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronAccountUpdateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronAccountUpdateContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronAccountUpdateContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronAccountUpdateContract::MergeFrom(const TronSignTx_TronContract_TronAccountUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronAccountUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_name()) {
    _has_bits_[0] |= 0x00000001u;
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
}

void TronSignTx_TronContract_TronAccountUpdateContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronAccountUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronAccountUpdateContract::CopyFrom(const TronSignTx_TronContract_TronAccountUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronAccountUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronAccountUpdateContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronAccountUpdateContract::Swap(TronSignTx_TronContract_TronAccountUpdateContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronAccountUpdateContract::InternalSwap(TronSignTx_TronContract_TronAccountUpdateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TronSignTx_TronContract_TronAccountUpdateContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronTransferContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronTransferContract::HasBitSetters {
 public:
  static void set_has_to_address(TronSignTx_TronContract_TronTransferContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_amount(TronSignTx_TronContract_TronTransferContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronTransferContract::kToAddressFieldNumber;
const int TronSignTx_TronContract_TronTransferContract::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronTransferContract::TronSignTx_TronContract_TronTransferContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronTransferContract)
}
TronSignTx_TronContract_TronTransferContract::TronSignTx_TronContract_TronTransferContract(const TronSignTx_TronContract_TronTransferContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_address()) {
    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronTransferContract)
}

void TronSignTx_TronContract_TronTransferContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto.base);
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

TronSignTx_TronContract_TronTransferContract::~TronSignTx_TronContract_TronTransferContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronTransferContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronTransferContract::SharedDtor() {
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronTransferContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronTransferContract& TronSignTx_TronContract_TronTransferContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronTransferContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronTransferContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronTransferContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    to_address_.ClearNonDefaultToEmptyNoArena();
  }
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronTransferContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronTransferContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes to_address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_to_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronTransferContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronTransferContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes to_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronTransferContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronTransferContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronTransferContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronTransferContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes to_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->to_address(), output);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronTransferContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronTransferContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronTransferContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes to_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->to_address(), target);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronTransferContract)
  return target;
}

size_t TronSignTx_TronContract_TronTransferContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronTransferContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes to_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_address());
    }

    // optional uint64 amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronTransferContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronTransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronTransferContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronTransferContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronTransferContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronTransferContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronTransferContract::MergeFrom(const TronSignTx_TronContract_TronTransferContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronTransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronTransferContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronTransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronTransferContract::CopyFrom(const TronSignTx_TronContract_TronTransferContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronTransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronTransferContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronTransferContract::Swap(TronSignTx_TronContract_TronTransferContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronTransferContract::InternalSwap(TronSignTx_TronContract_TronTransferContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_address_.Swap(&other->to_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronTransferContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronTransferAssetContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronTransferAssetContract::HasBitSetters {
 public:
  static void set_has_asset_name(TronSignTx_TronContract_TronTransferAssetContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_to_address(TronSignTx_TronContract_TronTransferAssetContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_amount(TronSignTx_TronContract_TronTransferAssetContract* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronTransferAssetContract::kAssetNameFieldNumber;
const int TronSignTx_TronContract_TronTransferAssetContract::kToAddressFieldNumber;
const int TronSignTx_TronContract_TronTransferAssetContract::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronTransferAssetContract::TronSignTx_TronContract_TronTransferAssetContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronTransferAssetContract)
}
TronSignTx_TronContract_TronTransferAssetContract::TronSignTx_TronContract_TronTransferAssetContract(const TronSignTx_TronContract_TronTransferAssetContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_name()) {
    asset_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_name_);
  }
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_address()) {
    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronTransferAssetContract)
}

void TronSignTx_TronContract_TronTransferAssetContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto.base);
  asset_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

TronSignTx_TronContract_TronTransferAssetContract::~TronSignTx_TronContract_TronTransferAssetContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronTransferAssetContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronTransferAssetContract::SharedDtor() {
  asset_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronTransferAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronTransferAssetContract& TronSignTx_TronContract_TronTransferAssetContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronTransferAssetContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronTransferAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronTransferAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      asset_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronTransferAssetContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronTransferAssetContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string asset_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronTransferAssetContract.asset_name");
        object = msg->mutable_asset_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes to_address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_to_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronTransferAssetContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronTransferAssetContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string asset_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asset_name().data(), static_cast<int>(this->asset_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronTransferAssetContract.asset_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes to_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronTransferAssetContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronTransferAssetContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronTransferAssetContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronTransferAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string asset_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_name().data(), static_cast<int>(this->asset_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronTransferAssetContract.asset_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->asset_name(), output);
  }

  // optional bytes to_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->to_address(), output);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronTransferAssetContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronTransferAssetContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronTransferAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string asset_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_name().data(), static_cast<int>(this->asset_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronTransferAssetContract.asset_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->asset_name(), target);
  }

  // optional bytes to_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->to_address(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronTransferAssetContract)
  return target;
}

size_t TronSignTx_TronContract_TronTransferAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronTransferAssetContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string asset_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_name());
    }

    // optional bytes to_address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_address());
    }

    // optional uint64 amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronTransferAssetContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronTransferAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronTransferAssetContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronTransferAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronTransferAssetContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronTransferAssetContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronTransferAssetContract::MergeFrom(const TronSignTx_TronContract_TronTransferAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronTransferAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      asset_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronTransferAssetContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronTransferAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronTransferAssetContract::CopyFrom(const TronSignTx_TronContract_TronTransferAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronTransferAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronTransferAssetContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronTransferAssetContract::Swap(TronSignTx_TronContract_TronTransferAssetContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronTransferAssetContract::InternalSwap(TronSignTx_TronContract_TronTransferAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  asset_name_.Swap(&other->asset_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_address_.Swap(&other->to_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronTransferAssetContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronVoteWitnessContract_TronVote::HasBitSetters {
 public:
  static void set_has_vote_address(TronSignTx_TronContract_TronVoteWitnessContract_TronVote* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_vote_count(TronSignTx_TronContract_TronVoteWitnessContract_TronVote* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronVoteWitnessContract_TronVote::kVoteAddressFieldNumber;
const int TronSignTx_TronContract_TronVoteWitnessContract_TronVote::kVoteCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronVoteWitnessContract_TronVote::TronSignTx_TronContract_TronVoteWitnessContract_TronVote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
}
TronSignTx_TronContract_TronVoteWitnessContract_TronVote::TronSignTx_TronContract_TronVoteWitnessContract_TronVote(const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vote_address()) {
    vote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vote_address_);
  }
  vote_count_ = from.vote_count_;
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto.base);
  vote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_count_ = PROTOBUF_ULONGLONG(0);
}

TronSignTx_TronContract_TronVoteWitnessContract_TronVote::~TronSignTx_TronContract_TronVoteWitnessContract_TronVote() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  SharedDtor();
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::SharedDtor() {
  vote_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& TronSignTx_TronContract_TronVoteWitnessContract_TronVote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vote_address_.ClearNonDefaultToEmptyNoArena();
  }
  vote_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronVoteWitnessContract_TronVote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronVoteWitnessContract_TronVote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes vote_address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_vote_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 vote_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_vote_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronVoteWitnessContract_TronVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes vote_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vote_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 vote_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_vote_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vote_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes vote_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->vote_address(), output);
  }

  // optional uint64 vote_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->vote_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronVoteWitnessContract_TronVote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes vote_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->vote_address(), target);
  }

  // optional uint64 vote_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->vote_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  return target;
}

size_t TronSignTx_TronContract_TronVoteWitnessContract_TronVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes vote_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vote_address());
    }

    // optional uint64 vote_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vote_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronVoteWitnessContract_TronVote* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronVoteWitnessContract_TronVote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::MergeFrom(const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vote_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      vote_count_ = from.vote_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::CopyFrom(const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronVoteWitnessContract_TronVote::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::Swap(TronSignTx_TronContract_TronVoteWitnessContract_TronVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::InternalSwap(TronSignTx_TronContract_TronVoteWitnessContract_TronVote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vote_address_.Swap(&other->vote_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vote_count_, other->vote_count_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronVoteWitnessContract_TronVote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronVoteWitnessContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronVoteWitnessContract::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronVoteWitnessContract::kVotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronVoteWitnessContract::TronSignTx_TronContract_TronVoteWitnessContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronVoteWitnessContract)
}
TronSignTx_TronContract_TronVoteWitnessContract::TronSignTx_TronContract_TronVoteWitnessContract(const TronSignTx_TronContract_TronVoteWitnessContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronVoteWitnessContract)
}

void TronSignTx_TronContract_TronVoteWitnessContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto.base);
}

TronSignTx_TronContract_TronVoteWitnessContract::~TronSignTx_TronContract_TronVoteWitnessContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronVoteWitnessContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronVoteWitnessContract::SharedDtor() {
}

void TronSignTx_TronContract_TronVoteWitnessContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronVoteWitnessContract& TronSignTx_TronContract_TronVoteWitnessContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronVoteWitnessContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronVoteWitnessContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronVoteWitnessContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronVoteWitnessContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronVoteWitnessContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .TronSignTx.TronContract.TronVoteWitnessContract.TronVote votes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote::_InternalParse;
          object = msg->add_votes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronVoteWitnessContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronVoteWitnessContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TronSignTx.TronContract.TronVoteWitnessContract.TronVote votes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronVoteWitnessContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronVoteWitnessContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronVoteWitnessContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronVoteWitnessContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TronSignTx.TronContract.TronVoteWitnessContract.TronVote votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->votes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronVoteWitnessContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronVoteWitnessContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronVoteWitnessContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TronSignTx.TronContract.TronVoteWitnessContract.TronVote votes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->votes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronVoteWitnessContract)
  return target;
}

size_t TronSignTx_TronContract_TronVoteWitnessContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronVoteWitnessContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TronSignTx.TronContract.TronVoteWitnessContract.TronVote votes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->votes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronVoteWitnessContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronVoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronVoteWitnessContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronVoteWitnessContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronVoteWitnessContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronVoteWitnessContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronVoteWitnessContract::MergeFrom(const TronSignTx_TronContract_TronVoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronVoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
}

void TronSignTx_TronContract_TronVoteWitnessContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronVoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronVoteWitnessContract::CopyFrom(const TronSignTx_TronContract_TronVoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronVoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronVoteWitnessContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronVoteWitnessContract::Swap(TronSignTx_TronContract_TronVoteWitnessContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronVoteWitnessContract::InternalSwap(TronSignTx_TronContract_TronVoteWitnessContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&votes_)->InternalSwap(CastToBase(&other->votes_));
}

::google::protobuf::Metadata TronSignTx_TronContract_TronVoteWitnessContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronWitnessCreateContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronWitnessCreateContract::HasBitSetters {
 public:
  static void set_has_url(TronSignTx_TronContract_TronWitnessCreateContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronWitnessCreateContract::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronWitnessCreateContract::TronSignTx_TronContract_TronWitnessCreateContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronWitnessCreateContract)
}
TronSignTx_TronContract_TronWitnessCreateContract::TronSignTx_TronContract_TronWitnessCreateContract(const TronSignTx_TronContract_TronWitnessCreateContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronWitnessCreateContract)
}

void TronSignTx_TronContract_TronWitnessCreateContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TronSignTx_TronContract_TronWitnessCreateContract::~TronSignTx_TronContract_TronWitnessCreateContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronWitnessCreateContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronWitnessCreateContract::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronWitnessCreateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronWitnessCreateContract& TronSignTx_TronContract_TronWitnessCreateContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronWitnessCreateContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronWitnessCreateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronWitnessCreateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronWitnessCreateContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronWitnessCreateContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronWitnessCreateContract.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronWitnessCreateContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronWitnessCreateContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronWitnessCreateContract.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronWitnessCreateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronWitnessCreateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronWitnessCreateContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronWitnessCreateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronWitnessCreateContract.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronWitnessCreateContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronWitnessCreateContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronWitnessCreateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronWitnessCreateContract.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronWitnessCreateContract)
  return target;
}

size_t TronSignTx_TronContract_TronWitnessCreateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronWitnessCreateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronWitnessCreateContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronWitnessCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronWitnessCreateContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronWitnessCreateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronWitnessCreateContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronWitnessCreateContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronWitnessCreateContract::MergeFrom(const TronSignTx_TronContract_TronWitnessCreateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronWitnessCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    _has_bits_[0] |= 0x00000001u;
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void TronSignTx_TronContract_TronWitnessCreateContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronWitnessCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronWitnessCreateContract::CopyFrom(const TronSignTx_TronContract_TronWitnessCreateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronWitnessCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronWitnessCreateContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronWitnessCreateContract::Swap(TronSignTx_TronContract_TronWitnessCreateContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronWitnessCreateContract::InternalSwap(TronSignTx_TronContract_TronWitnessCreateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TronSignTx_TronContract_TronWitnessCreateContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronWitnessUpdateContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronWitnessUpdateContract::HasBitSetters {
 public:
  static void set_has_update_url(TronSignTx_TronContract_TronWitnessUpdateContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronWitnessUpdateContract::kUpdateUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronWitnessUpdateContract::TronSignTx_TronContract_TronWitnessUpdateContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronWitnessUpdateContract)
}
TronSignTx_TronContract_TronWitnessUpdateContract::TronSignTx_TronContract_TronWitnessUpdateContract(const TronSignTx_TronContract_TronWitnessUpdateContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_url()) {
    update_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_url_);
  }
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronWitnessUpdateContract)
}

void TronSignTx_TronContract_TronWitnessUpdateContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto.base);
  update_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TronSignTx_TronContract_TronWitnessUpdateContract::~TronSignTx_TronContract_TronWitnessUpdateContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronWitnessUpdateContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronWitnessUpdateContract::SharedDtor() {
  update_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronWitnessUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronWitnessUpdateContract& TronSignTx_TronContract_TronWitnessUpdateContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronWitnessUpdateContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronWitnessUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    update_url_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronWitnessUpdateContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronWitnessUpdateContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string update_url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronWitnessUpdateContract.update_url");
        object = msg->mutable_update_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronWitnessUpdateContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string update_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->update_url().data(), static_cast<int>(this->update_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronWitnessUpdateContract.update_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronWitnessUpdateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronWitnessUpdateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronWitnessUpdateContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string update_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_url().data(), static_cast<int>(this->update_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronWitnessUpdateContract.update_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->update_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronWitnessUpdateContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronWitnessUpdateContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string update_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_url().data(), static_cast<int>(this->update_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronWitnessUpdateContract.update_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->update_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronWitnessUpdateContract)
  return target;
}

size_t TronSignTx_TronContract_TronWitnessUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string update_url = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronWitnessUpdateContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronWitnessUpdateContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronWitnessUpdateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronWitnessUpdateContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronWitnessUpdateContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronWitnessUpdateContract::MergeFrom(const TronSignTx_TronContract_TronWitnessUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_update_url()) {
    _has_bits_[0] |= 0x00000001u;
    update_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_url_);
  }
}

void TronSignTx_TronContract_TronWitnessUpdateContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronWitnessUpdateContract::CopyFrom(const TronSignTx_TronContract_TronWitnessUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronWitnessUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronWitnessUpdateContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronWitnessUpdateContract::Swap(TronSignTx_TronContract_TronWitnessUpdateContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronWitnessUpdateContract::InternalSwap(TronSignTx_TronContract_TronWitnessUpdateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  update_url_.Swap(&other->update_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TronSignTx_TronContract_TronWitnessUpdateContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::HasBitSetters {
 public:
  static void set_has_frozen_amount(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_frozen_days(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::kFrozenAmountFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::kFrozenDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
}
TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply(const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frozen_amount_, &from.frozen_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_days_) -
    reinterpret_cast<char*>(&frozen_amount_)) + sizeof(frozen_days_));
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::SharedCtor() {
  ::memset(&frozen_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_days_) -
      reinterpret_cast<char*>(&frozen_amount_)) + sizeof(frozen_days_));
}

TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::~TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  SharedDtor();
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::SharedDtor() {
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&frozen_amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frozen_days_) -
        reinterpret_cast<char*>(&frozen_amount_)) + sizeof(frozen_days_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 frozen_amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_frozen_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 frozen_days = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_frozen_days(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 frozen_amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_frozen_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frozen_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 frozen_days = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_frozen_days(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frozen_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frozen_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->frozen_amount(), output);
  }

  // optional uint64 frozen_days = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->frozen_days(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frozen_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->frozen_amount(), target);
  }

  // optional uint64 frozen_days = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->frozen_days(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  return target;
}

size_t TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 frozen_amount = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frozen_amount());
    }

    // optional uint64 frozen_days = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frozen_days());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::MergeFrom(const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      frozen_amount_ = from.frozen_amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      frozen_days_ = from.frozen_days_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::CopyFrom(const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::Swap(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::InternalSwap(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(frozen_amount_, other->frozen_amount_);
  swap(frozen_days_, other->frozen_days_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronAssetIssueContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronAssetIssueContract::HasBitSetters {
 public:
  static void set_has_name(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_abbr(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_total_supply(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_trx_num(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_num(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_start_time(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_end_time(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_description(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_url(TronSignTx_TronContract_TronAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronAssetIssueContract::kNameFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kAbbrFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kTotalSupplyFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kFrozenSupplyFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kTrxNumFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kNumFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kStartTimeFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kEndTimeFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kDescriptionFieldNumber;
const int TronSignTx_TronContract_TronAssetIssueContract::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronAssetIssueContract::TronSignTx_TronContract_TronAssetIssueContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronAssetIssueContract)
}
TronSignTx_TronContract_TronAssetIssueContract::TronSignTx_TronContract_TronAssetIssueContract(const TronSignTx_TronContract_TronAssetIssueContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      frozen_supply_(from.frozen_supply_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  abbr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_abbr()) {
    abbr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.abbr_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&total_supply_, &from.total_supply_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&total_supply_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronAssetIssueContract)
}

void TronSignTx_TronContract_TronAssetIssueContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abbr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_supply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&total_supply_)) + sizeof(end_time_));
}

TronSignTx_TronContract_TronAssetIssueContract::~TronSignTx_TronContract_TronAssetIssueContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronAssetIssueContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronAssetIssueContract::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abbr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronAssetIssueContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronAssetIssueContract& TronSignTx_TronContract_TronAssetIssueContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronAssetIssueContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronAssetIssueContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronAssetIssueContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frozen_supply_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      abbr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&total_supply_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&total_supply_)) + sizeof(start_time_));
  }
  end_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronAssetIssueContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronAssetIssueContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronAssetIssueContract.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string abbr = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronAssetIssueContract.abbr");
        object = msg->mutable_abbr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 total_supply = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_total_supply(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply frozen_supply = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::_InternalParse;
          object = msg->add_frozen_supply();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional uint32 trx_num = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_trx_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 start_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 end_time = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string description = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronAssetIssueContract.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronAssetIssueContract.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronAssetIssueContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronAssetIssueContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronAssetIssueContract.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string abbr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abbr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abbr().data(), static_cast<int>(this->abbr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronAssetIssueContract.abbr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_supply = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_total_supply(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_supply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply frozen_supply = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_frozen_supply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trx_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_trx_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trx_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 start_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 end_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronAssetIssueContract.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronAssetIssueContract.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronAssetIssueContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronAssetIssueContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronAssetIssueContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronAssetIssueContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string abbr = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abbr().data(), static_cast<int>(this->abbr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.abbr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abbr(), output);
  }

  // optional uint64 total_supply = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_supply(), output);
  }

  // repeated .TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply frozen_supply = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frozen_supply_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->frozen_supply(static_cast<int>(i)),
      output);
  }

  // optional uint32 trx_num = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->trx_num(), output);
  }

  // optional uint32 num = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num(), output);
  }

  // optional uint64 start_time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->start_time(), output);
  }

  // optional uint64 end_time = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->end_time(), output);
  }

  // optional string description = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->description(), output);
  }

  // optional string url = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronAssetIssueContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronAssetIssueContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronAssetIssueContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string abbr = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abbr().data(), static_cast<int>(this->abbr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.abbr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abbr(), target);
  }

  // optional uint64 total_supply = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_supply(), target);
  }

  // repeated .TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply frozen_supply = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frozen_supply_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->frozen_supply(static_cast<int>(i)), target);
  }

  // optional uint32 trx_num = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->trx_num(), target);
  }

  // optional uint32 num = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num(), target);
  }

  // optional uint64 start_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->start_time(), target);
  }

  // optional uint64 end_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->end_time(), target);
  }

  // optional string description = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->description(), target);
  }

  // optional string url = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronAssetIssueContract.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronAssetIssueContract)
  return target;
}

size_t TronSignTx_TronContract_TronAssetIssueContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronAssetIssueContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply frozen_supply = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->frozen_supply_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frozen_supply(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string abbr = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abbr());
    }

    // optional string description = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string url = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 total_supply = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_supply());
    }

    // optional uint32 trx_num = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trx_num());
    }

    // optional uint32 num = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 start_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

  }
  // optional uint64 end_time = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronAssetIssueContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronAssetIssueContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronAssetIssueContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronAssetIssueContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronAssetIssueContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronAssetIssueContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronAssetIssueContract::MergeFrom(const TronSignTx_TronContract_TronAssetIssueContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronAssetIssueContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frozen_supply_.MergeFrom(from.frozen_supply_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      abbr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.abbr_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000010u) {
      total_supply_ = from.total_supply_;
    }
    if (cached_has_bits & 0x00000020u) {
      trx_num_ = from.trx_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_end_time(from.end_time());
  }
}

void TronSignTx_TronContract_TronAssetIssueContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronAssetIssueContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronAssetIssueContract::CopyFrom(const TronSignTx_TronContract_TronAssetIssueContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronAssetIssueContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronAssetIssueContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronAssetIssueContract::Swap(TronSignTx_TronContract_TronAssetIssueContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronAssetIssueContract::InternalSwap(TronSignTx_TronContract_TronAssetIssueContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&frozen_supply_)->InternalSwap(CastToBase(&other->frozen_supply_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  abbr_.Swap(&other->abbr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_supply_, other->total_supply_);
  swap(trx_num_, other->trx_num_);
  swap(num_, other->num_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronAssetIssueContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronParticipateAssetIssueContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronParticipateAssetIssueContract::HasBitSetters {
 public:
  static void set_has_to_address(TronSignTx_TronContract_TronParticipateAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_asset_name(TronSignTx_TronContract_TronParticipateAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_amount(TronSignTx_TronContract_TronParticipateAssetIssueContract* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronParticipateAssetIssueContract::kToAddressFieldNumber;
const int TronSignTx_TronContract_TronParticipateAssetIssueContract::kAssetNameFieldNumber;
const int TronSignTx_TronContract_TronParticipateAssetIssueContract::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronParticipateAssetIssueContract::TronSignTx_TronContract_TronParticipateAssetIssueContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronParticipateAssetIssueContract)
}
TronSignTx_TronContract_TronParticipateAssetIssueContract::TronSignTx_TronContract_TronParticipateAssetIssueContract(const TronSignTx_TronContract_TronParticipateAssetIssueContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_address()) {
    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  asset_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_asset_name()) {
    asset_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_name_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronParticipateAssetIssueContract)
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto.base);
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_ULONGLONG(0);
}

TronSignTx_TronContract_TronParticipateAssetIssueContract::~TronSignTx_TronContract_TronParticipateAssetIssueContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::SharedDtor() {
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  asset_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronParticipateAssetIssueContract& TronSignTx_TronContract_TronParticipateAssetIssueContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronParticipateAssetIssueContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronParticipateAssetIssueContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      to_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      asset_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronParticipateAssetIssueContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronParticipateAssetIssueContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes to_address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_to_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string asset_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name");
        object = msg->mutable_asset_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 amount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronParticipateAssetIssueContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes to_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string asset_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_asset_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->asset_name().data(), static_cast<int>(this->asset_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronParticipateAssetIssueContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes to_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->to_address(), output);
  }

  // optional string asset_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_name().data(), static_cast<int>(this->asset_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->asset_name(), output);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronParticipateAssetIssueContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronParticipateAssetIssueContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes to_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->to_address(), target);
  }

  // optional string asset_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->asset_name().data(), static_cast<int>(this->asset_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->asset_name(), target);
  }

  // optional uint64 amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  return target;
}

size_t TronSignTx_TronContract_TronParticipateAssetIssueContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes to_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_address());
    }

    // optional string asset_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->asset_name());
    }

    // optional uint64 amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronParticipateAssetIssueContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronParticipateAssetIssueContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronParticipateAssetIssueContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronParticipateAssetIssueContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::MergeFrom(const TronSignTx_TronContract_TronParticipateAssetIssueContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      asset_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.asset_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::CopyFrom(const TronSignTx_TronContract_TronParticipateAssetIssueContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronParticipateAssetIssueContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronParticipateAssetIssueContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronParticipateAssetIssueContract::Swap(TronSignTx_TronContract_TronParticipateAssetIssueContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronParticipateAssetIssueContract::InternalSwap(TronSignTx_TronContract_TronParticipateAssetIssueContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_address_.Swap(&other->to_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_name_.Swap(&other->asset_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronParticipateAssetIssueContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronFreezeBalanceContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronFreezeBalanceContract::HasBitSetters {
 public:
  static void set_has_frozen_balance(TronSignTx_TronContract_TronFreezeBalanceContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_frozen_duration(TronSignTx_TronContract_TronFreezeBalanceContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronFreezeBalanceContract::kFrozenBalanceFieldNumber;
const int TronSignTx_TronContract_TronFreezeBalanceContract::kFrozenDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronFreezeBalanceContract::TronSignTx_TronContract_TronFreezeBalanceContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronFreezeBalanceContract)
}
TronSignTx_TronContract_TronFreezeBalanceContract::TronSignTx_TronContract_TronFreezeBalanceContract(const TronSignTx_TronContract_TronFreezeBalanceContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_duration_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(frozen_duration_));
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronFreezeBalanceContract)
}

void TronSignTx_TronContract_TronFreezeBalanceContract::SharedCtor() {
  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_duration_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(frozen_duration_));
}

TronSignTx_TronContract_TronFreezeBalanceContract::~TronSignTx_TronContract_TronFreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronFreezeBalanceContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronFreezeBalanceContract::SharedDtor() {
}

void TronSignTx_TronContract_TronFreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronFreezeBalanceContract& TronSignTx_TronContract_TronFreezeBalanceContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronFreezeBalanceContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronFreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&frozen_balance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frozen_duration_) -
        reinterpret_cast<char*>(&frozen_balance_)) + sizeof(frozen_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronFreezeBalanceContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronFreezeBalanceContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 frozen_balance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_frozen_balance(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 frozen_duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_frozen_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronFreezeBalanceContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 frozen_balance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_frozen_balance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frozen_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 frozen_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_frozen_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frozen_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronFreezeBalanceContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronFreezeBalanceContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronFreezeBalanceContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frozen_balance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->frozen_balance(), output);
  }

  // optional uint64 frozen_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->frozen_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronFreezeBalanceContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronFreezeBalanceContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frozen_balance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->frozen_balance(), target);
  }

  // optional uint64 frozen_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->frozen_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronFreezeBalanceContract)
  return target;
}

size_t TronSignTx_TronContract_TronFreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 frozen_balance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frozen_balance());
    }

    // optional uint64 frozen_duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frozen_duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronFreezeBalanceContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronFreezeBalanceContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronFreezeBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronFreezeBalanceContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronFreezeBalanceContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronFreezeBalanceContract::MergeFrom(const TronSignTx_TronContract_TronFreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      frozen_balance_ = from.frozen_balance_;
    }
    if (cached_has_bits & 0x00000002u) {
      frozen_duration_ = from.frozen_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronFreezeBalanceContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronFreezeBalanceContract::CopyFrom(const TronSignTx_TronContract_TronFreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronFreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronFreezeBalanceContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronFreezeBalanceContract::Swap(TronSignTx_TronContract_TronFreezeBalanceContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronFreezeBalanceContract::InternalSwap(TronSignTx_TronContract_TronFreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(frozen_balance_, other->frozen_balance_);
  swap(frozen_duration_, other->frozen_duration_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronFreezeBalanceContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronUnfreezeBalanceContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronUnfreezeBalanceContract::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronUnfreezeBalanceContract::TronSignTx_TronContract_TronUnfreezeBalanceContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronUnfreezeBalanceContract)
}
TronSignTx_TronContract_TronUnfreezeBalanceContract::TronSignTx_TronContract_TronUnfreezeBalanceContract(const TronSignTx_TronContract_TronUnfreezeBalanceContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronUnfreezeBalanceContract)
}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::SharedCtor() {
}

TronSignTx_TronContract_TronUnfreezeBalanceContract::~TronSignTx_TronContract_TronUnfreezeBalanceContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::SharedDtor() {
}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronUnfreezeBalanceContract& TronSignTx_TronContract_TronUnfreezeBalanceContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronUnfreezeBalanceContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronUnfreezeBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronUnfreezeBalanceContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronUnfreezeBalanceContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronUnfreezeBalanceContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronUnfreezeBalanceContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronUnfreezeBalanceContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronUnfreezeBalanceContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  return target;
}

size_t TronSignTx_TronContract_TronUnfreezeBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronUnfreezeBalanceContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronUnfreezeBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronUnfreezeBalanceContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronUnfreezeBalanceContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::MergeFrom(const TronSignTx_TronContract_TronUnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::CopyFrom(const TronSignTx_TronContract_TronUnfreezeBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronUnfreezeBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronUnfreezeBalanceContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronUnfreezeBalanceContract::Swap(TronSignTx_TronContract_TronUnfreezeBalanceContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronUnfreezeBalanceContract::InternalSwap(TronSignTx_TronContract_TronUnfreezeBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronUnfreezeBalanceContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronUnfreezeAssetContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronUnfreezeAssetContract::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronUnfreezeAssetContract::TronSignTx_TronContract_TronUnfreezeAssetContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronUnfreezeAssetContract)
}
TronSignTx_TronContract_TronUnfreezeAssetContract::TronSignTx_TronContract_TronUnfreezeAssetContract(const TronSignTx_TronContract_TronUnfreezeAssetContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronUnfreezeAssetContract)
}

void TronSignTx_TronContract_TronUnfreezeAssetContract::SharedCtor() {
}

TronSignTx_TronContract_TronUnfreezeAssetContract::~TronSignTx_TronContract_TronUnfreezeAssetContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronUnfreezeAssetContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronUnfreezeAssetContract::SharedDtor() {
}

void TronSignTx_TronContract_TronUnfreezeAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronUnfreezeAssetContract& TronSignTx_TronContract_TronUnfreezeAssetContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronUnfreezeAssetContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronUnfreezeAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronUnfreezeAssetContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronUnfreezeAssetContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronUnfreezeAssetContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronUnfreezeAssetContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronUnfreezeAssetContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronUnfreezeAssetContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronUnfreezeAssetContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronUnfreezeAssetContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronUnfreezeAssetContract)
  return target;
}

size_t TronSignTx_TronContract_TronUnfreezeAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronUnfreezeAssetContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronUnfreezeAssetContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronUnfreezeAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronUnfreezeAssetContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronUnfreezeAssetContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronUnfreezeAssetContract::MergeFrom(const TronSignTx_TronContract_TronUnfreezeAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TronSignTx_TronContract_TronUnfreezeAssetContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronUnfreezeAssetContract::CopyFrom(const TronSignTx_TronContract_TronUnfreezeAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronUnfreezeAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronUnfreezeAssetContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronUnfreezeAssetContract::Swap(TronSignTx_TronContract_TronUnfreezeAssetContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronUnfreezeAssetContract::InternalSwap(TronSignTx_TronContract_TronUnfreezeAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronUnfreezeAssetContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronWithdrawBalanceContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronWithdrawBalanceContract::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronWithdrawBalanceContract::TronSignTx_TronContract_TronWithdrawBalanceContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronWithdrawBalanceContract)
}
TronSignTx_TronContract_TronWithdrawBalanceContract::TronSignTx_TronContract_TronWithdrawBalanceContract(const TronSignTx_TronContract_TronWithdrawBalanceContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronWithdrawBalanceContract)
}

void TronSignTx_TronContract_TronWithdrawBalanceContract::SharedCtor() {
}

TronSignTx_TronContract_TronWithdrawBalanceContract::~TronSignTx_TronContract_TronWithdrawBalanceContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronWithdrawBalanceContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronWithdrawBalanceContract::SharedDtor() {
}

void TronSignTx_TronContract_TronWithdrawBalanceContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronWithdrawBalanceContract& TronSignTx_TronContract_TronWithdrawBalanceContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronWithdrawBalanceContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronWithdrawBalanceContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronWithdrawBalanceContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronWithdrawBalanceContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronWithdrawBalanceContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronWithdrawBalanceContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronWithdrawBalanceContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronWithdrawBalanceContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronWithdrawBalanceContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronWithdrawBalanceContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronWithdrawBalanceContract)
  return target;
}

size_t TronSignTx_TronContract_TronWithdrawBalanceContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronWithdrawBalanceContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronWithdrawBalanceContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronWithdrawBalanceContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronWithdrawBalanceContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronWithdrawBalanceContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronWithdrawBalanceContract::MergeFrom(const TronSignTx_TronContract_TronWithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TronSignTx_TronContract_TronWithdrawBalanceContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronWithdrawBalanceContract::CopyFrom(const TronSignTx_TronContract_TronWithdrawBalanceContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronWithdrawBalanceContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronWithdrawBalanceContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronWithdrawBalanceContract::Swap(TronSignTx_TronContract_TronWithdrawBalanceContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronWithdrawBalanceContract::InternalSwap(TronSignTx_TronContract_TronWithdrawBalanceContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronWithdrawBalanceContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronUpdateAssetContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronUpdateAssetContract::HasBitSetters {
 public:
  static void set_has_description(TronSignTx_TronContract_TronUpdateAssetContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_url(TronSignTx_TronContract_TronUpdateAssetContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronUpdateAssetContract::kDescriptionFieldNumber;
const int TronSignTx_TronContract_TronUpdateAssetContract::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronUpdateAssetContract::TronSignTx_TronContract_TronUpdateAssetContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronUpdateAssetContract)
}
TronSignTx_TronContract_TronUpdateAssetContract::TronSignTx_TronContract_TronUpdateAssetContract(const TronSignTx_TronContract_TronUpdateAssetContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronUpdateAssetContract)
}

void TronSignTx_TronContract_TronUpdateAssetContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TronSignTx_TronContract_TronUpdateAssetContract::~TronSignTx_TronContract_TronUpdateAssetContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronUpdateAssetContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronUpdateAssetContract::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignTx_TronContract_TronUpdateAssetContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronUpdateAssetContract& TronSignTx_TronContract_TronUpdateAssetContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronUpdateAssetContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronUpdateAssetContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronUpdateAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronUpdateAssetContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronUpdateAssetContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string description = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronUpdateAssetContract.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.TronContract.TronUpdateAssetContract.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronUpdateAssetContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronUpdateAssetContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronUpdateAssetContract.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.TronContract.TronUpdateAssetContract.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronUpdateAssetContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronUpdateAssetContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronUpdateAssetContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronUpdateAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronUpdateAssetContract.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronUpdateAssetContract.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronUpdateAssetContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronUpdateAssetContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronUpdateAssetContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronUpdateAssetContract.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.TronContract.TronUpdateAssetContract.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronUpdateAssetContract)
  return target;
}

size_t TronSignTx_TronContract_TronUpdateAssetContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronUpdateAssetContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronUpdateAssetContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronUpdateAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronUpdateAssetContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronUpdateAssetContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronUpdateAssetContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronUpdateAssetContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronUpdateAssetContract::MergeFrom(const TronSignTx_TronContract_TronUpdateAssetContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronUpdateAssetContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
}

void TronSignTx_TronContract_TronUpdateAssetContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronUpdateAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronUpdateAssetContract::CopyFrom(const TronSignTx_TronContract_TronUpdateAssetContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronUpdateAssetContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronUpdateAssetContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronUpdateAssetContract::Swap(TronSignTx_TronContract_TronUpdateAssetContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronUpdateAssetContract::InternalSwap(TronSignTx_TronContract_TronUpdateAssetContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TronSignTx_TronContract_TronUpdateAssetContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::HasBitSetters {
 public:
  static void set_has_key(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::kKeyFieldNumber;
const int TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
}
TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters(const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::~TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  SharedDtor();
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::SharedDtor() {
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  return target;
}

size_t TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::MergeFrom(const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::CopyFrom(const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::Swap(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::InternalSwap(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronProposalCreateContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronProposalCreateContract::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronProposalCreateContract::kParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronProposalCreateContract::TronSignTx_TronContract_TronProposalCreateContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronProposalCreateContract)
}
TronSignTx_TronContract_TronProposalCreateContract::TronSignTx_TronContract_TronProposalCreateContract(const TronSignTx_TronContract_TronProposalCreateContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronProposalCreateContract)
}

void TronSignTx_TronContract_TronProposalCreateContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto.base);
}

TronSignTx_TronContract_TronProposalCreateContract::~TronSignTx_TronContract_TronProposalCreateContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronProposalCreateContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronProposalCreateContract::SharedDtor() {
}

void TronSignTx_TronContract_TronProposalCreateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronProposalCreateContract& TronSignTx_TronContract_TronProposalCreateContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronProposalCreateContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronProposalCreateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronProposalCreateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronProposalCreateContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronProposalCreateContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters parameters = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::_InternalParse;
          object = msg->add_parameters();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronProposalCreateContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronProposalCreateContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters parameters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronProposalCreateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronProposalCreateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronProposalCreateContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronProposalCreateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters parameters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parameters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->parameters(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronProposalCreateContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronProposalCreateContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronProposalCreateContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters parameters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parameters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->parameters(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronProposalCreateContract)
  return target;
}

size_t TronSignTx_TronContract_TronProposalCreateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronProposalCreateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters parameters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->parameters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parameters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronProposalCreateContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronProposalCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronProposalCreateContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronProposalCreateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronProposalCreateContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronProposalCreateContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronProposalCreateContract::MergeFrom(const TronSignTx_TronContract_TronProposalCreateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronProposalCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
}

void TronSignTx_TronContract_TronProposalCreateContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronProposalCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronProposalCreateContract::CopyFrom(const TronSignTx_TronContract_TronProposalCreateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronProposalCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronProposalCreateContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronProposalCreateContract::Swap(TronSignTx_TronContract_TronProposalCreateContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronProposalCreateContract::InternalSwap(TronSignTx_TronContract_TronProposalCreateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&parameters_)->InternalSwap(CastToBase(&other->parameters_));
}

::google::protobuf::Metadata TronSignTx_TronContract_TronProposalCreateContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronProposalApproveContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronProposalApproveContract::HasBitSetters {
 public:
  static void set_has_proposal_id(TronSignTx_TronContract_TronProposalApproveContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_add_approval(TronSignTx_TronContract_TronProposalApproveContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronProposalApproveContract::kProposalIdFieldNumber;
const int TronSignTx_TronContract_TronProposalApproveContract::kIsAddApprovalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronProposalApproveContract::TronSignTx_TronContract_TronProposalApproveContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronProposalApproveContract)
}
TronSignTx_TronContract_TronProposalApproveContract::TronSignTx_TronContract_TronProposalApproveContract(const TronSignTx_TronContract_TronProposalApproveContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&proposal_id_, &from.proposal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_add_approval_) -
    reinterpret_cast<char*>(&proposal_id_)) + sizeof(is_add_approval_));
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronProposalApproveContract)
}

void TronSignTx_TronContract_TronProposalApproveContract::SharedCtor() {
  ::memset(&proposal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_add_approval_) -
      reinterpret_cast<char*>(&proposal_id_)) + sizeof(is_add_approval_));
}

TronSignTx_TronContract_TronProposalApproveContract::~TronSignTx_TronContract_TronProposalApproveContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronProposalApproveContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronProposalApproveContract::SharedDtor() {
}

void TronSignTx_TronContract_TronProposalApproveContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronProposalApproveContract& TronSignTx_TronContract_TronProposalApproveContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronProposalApproveContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronProposalApproveContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronProposalApproveContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&proposal_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_add_approval_) -
        reinterpret_cast<char*>(&proposal_id_)) + sizeof(is_add_approval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronProposalApproveContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronProposalApproveContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 proposal_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_proposal_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_add_approval = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_add_approval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronProposalApproveContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronProposalApproveContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proposal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_proposal_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_add_approval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_add_approval(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_add_approval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronProposalApproveContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronProposalApproveContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronProposalApproveContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronProposalApproveContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 proposal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proposal_id(), output);
  }

  // optional bool is_add_approval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_add_approval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronProposalApproveContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronProposalApproveContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronProposalApproveContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 proposal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proposal_id(), target);
  }

  // optional bool is_add_approval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_add_approval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronProposalApproveContract)
  return target;
}

size_t TronSignTx_TronContract_TronProposalApproveContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronProposalApproveContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 proposal_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proposal_id());
    }

    // optional bool is_add_approval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronProposalApproveContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronProposalApproveContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronProposalApproveContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronProposalApproveContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronProposalApproveContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronProposalApproveContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronProposalApproveContract::MergeFrom(const TronSignTx_TronContract_TronProposalApproveContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronProposalApproveContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      proposal_id_ = from.proposal_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_add_approval_ = from.is_add_approval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx_TronContract_TronProposalApproveContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronProposalApproveContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronProposalApproveContract::CopyFrom(const TronSignTx_TronContract_TronProposalApproveContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronProposalApproveContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronProposalApproveContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronProposalApproveContract::Swap(TronSignTx_TronContract_TronProposalApproveContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronProposalApproveContract::InternalSwap(TronSignTx_TronContract_TronProposalApproveContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(proposal_id_, other->proposal_id_);
  swap(is_add_approval_, other->is_add_approval_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronProposalApproveContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract_TronProposalDeleteContract::InitAsDefaultInstance() {
}
class TronSignTx_TronContract_TronProposalDeleteContract::HasBitSetters {
 public:
  static void set_has_proposal_id(TronSignTx_TronContract_TronProposalDeleteContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract_TronProposalDeleteContract::kProposalIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract_TronProposalDeleteContract::TronSignTx_TronContract_TronProposalDeleteContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract.TronProposalDeleteContract)
}
TronSignTx_TronContract_TronProposalDeleteContract::TronSignTx_TronContract_TronProposalDeleteContract(const TronSignTx_TronContract_TronProposalDeleteContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proposal_id_ = from.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract.TronProposalDeleteContract)
}

void TronSignTx_TronContract_TronProposalDeleteContract::SharedCtor() {
  proposal_id_ = PROTOBUF_ULONGLONG(0);
}

TronSignTx_TronContract_TronProposalDeleteContract::~TronSignTx_TronContract_TronProposalDeleteContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract.TronProposalDeleteContract)
  SharedDtor();
}

void TronSignTx_TronContract_TronProposalDeleteContract::SharedDtor() {
}

void TronSignTx_TronContract_TronProposalDeleteContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract_TronProposalDeleteContract& TronSignTx_TronContract_TronProposalDeleteContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_TronProposalDeleteContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract_TronProposalDeleteContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract.TronProposalDeleteContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract_TronProposalDeleteContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract_TronProposalDeleteContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 proposal_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_proposal_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract_TronProposalDeleteContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract.TronProposalDeleteContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 proposal_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_proposal_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract.TronProposalDeleteContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract.TronProposalDeleteContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract_TronProposalDeleteContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract.TronProposalDeleteContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 proposal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proposal_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract.TronProposalDeleteContract)
}

::google::protobuf::uint8* TronSignTx_TronContract_TronProposalDeleteContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract.TronProposalDeleteContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 proposal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proposal_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract.TronProposalDeleteContract)
  return target;
}

size_t TronSignTx_TronContract_TronProposalDeleteContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract.TronProposalDeleteContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 proposal_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposal_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract_TronProposalDeleteContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract.TronProposalDeleteContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract_TronProposalDeleteContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract_TronProposalDeleteContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract.TronProposalDeleteContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract.TronProposalDeleteContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract_TronProposalDeleteContract::MergeFrom(const TronSignTx_TronContract_TronProposalDeleteContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract.TronProposalDeleteContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proposal_id()) {
    set_proposal_id(from.proposal_id());
  }
}

void TronSignTx_TronContract_TronProposalDeleteContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract.TronProposalDeleteContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract_TronProposalDeleteContract::CopyFrom(const TronSignTx_TronContract_TronProposalDeleteContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract.TronProposalDeleteContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract_TronProposalDeleteContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract_TronProposalDeleteContract::Swap(TronSignTx_TronContract_TronProposalDeleteContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract_TronProposalDeleteContract::InternalSwap(TronSignTx_TronContract_TronProposalDeleteContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(proposal_id_, other->proposal_id_);
}

::google::protobuf::Metadata TronSignTx_TronContract_TronProposalDeleteContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx_TronContract::InitAsDefaultInstance() {
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->transfer_contract_ = const_cast< ::TronSignTx_TronContract_TronTransferContract*>(
      ::TronSignTx_TronContract_TronTransferContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->transfer_asset_contract_ = const_cast< ::TronSignTx_TronContract_TronTransferAssetContract*>(
      ::TronSignTx_TronContract_TronTransferAssetContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->vote_witness_contract_ = const_cast< ::TronSignTx_TronContract_TronVoteWitnessContract*>(
      ::TronSignTx_TronContract_TronVoteWitnessContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->witness_create_contract_ = const_cast< ::TronSignTx_TronContract_TronWitnessCreateContract*>(
      ::TronSignTx_TronContract_TronWitnessCreateContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->asset_issue_contract_ = const_cast< ::TronSignTx_TronContract_TronAssetIssueContract*>(
      ::TronSignTx_TronContract_TronAssetIssueContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->witness_update_contract_ = const_cast< ::TronSignTx_TronContract_TronWitnessUpdateContract*>(
      ::TronSignTx_TronContract_TronWitnessUpdateContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->participate_asset_issue_contract_ = const_cast< ::TronSignTx_TronContract_TronParticipateAssetIssueContract*>(
      ::TronSignTx_TronContract_TronParticipateAssetIssueContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->account_update_contract_ = const_cast< ::TronSignTx_TronContract_TronAccountUpdateContract*>(
      ::TronSignTx_TronContract_TronAccountUpdateContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->freeze_balance_contract_ = const_cast< ::TronSignTx_TronContract_TronFreezeBalanceContract*>(
      ::TronSignTx_TronContract_TronFreezeBalanceContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->unfreeze_balance_contract_ = const_cast< ::TronSignTx_TronContract_TronUnfreezeBalanceContract*>(
      ::TronSignTx_TronContract_TronUnfreezeBalanceContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->withdraw_balance_contract_ = const_cast< ::TronSignTx_TronContract_TronWithdrawBalanceContract*>(
      ::TronSignTx_TronContract_TronWithdrawBalanceContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->unfreeze_asset_contract_ = const_cast< ::TronSignTx_TronContract_TronUnfreezeAssetContract*>(
      ::TronSignTx_TronContract_TronUnfreezeAssetContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->update_asset_contract_ = const_cast< ::TronSignTx_TronContract_TronUpdateAssetContract*>(
      ::TronSignTx_TronContract_TronUpdateAssetContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->proposal_create_contract_ = const_cast< ::TronSignTx_TronContract_TronProposalCreateContract*>(
      ::TronSignTx_TronContract_TronProposalCreateContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->proposal_approve_contract_ = const_cast< ::TronSignTx_TronContract_TronProposalApproveContract*>(
      ::TronSignTx_TronContract_TronProposalApproveContract::internal_default_instance());
  ::_TronSignTx_TronContract_default_instance_._instance.get_mutable()->proposal_delete_contract_ = const_cast< ::TronSignTx_TronContract_TronProposalDeleteContract*>(
      ::TronSignTx_TronContract_TronProposalDeleteContract::internal_default_instance());
}
class TronSignTx_TronContract::HasBitSetters {
 public:
  static const ::TronSignTx_TronContract_TronTransferContract& transfer_contract(const TronSignTx_TronContract* msg);
  static void set_has_transfer_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::TronSignTx_TronContract_TronTransferAssetContract& transfer_asset_contract(const TronSignTx_TronContract* msg);
  static void set_has_transfer_asset_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::TronSignTx_TronContract_TronVoteWitnessContract& vote_witness_contract(const TronSignTx_TronContract* msg);
  static void set_has_vote_witness_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::TronSignTx_TronContract_TronWitnessCreateContract& witness_create_contract(const TronSignTx_TronContract* msg);
  static void set_has_witness_create_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::TronSignTx_TronContract_TronAssetIssueContract& asset_issue_contract(const TronSignTx_TronContract* msg);
  static void set_has_asset_issue_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::TronSignTx_TronContract_TronWitnessUpdateContract& witness_update_contract(const TronSignTx_TronContract* msg);
  static void set_has_witness_update_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::TronSignTx_TronContract_TronParticipateAssetIssueContract& participate_asset_issue_contract(const TronSignTx_TronContract* msg);
  static void set_has_participate_asset_issue_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::TronSignTx_TronContract_TronAccountUpdateContract& account_update_contract(const TronSignTx_TronContract* msg);
  static void set_has_account_update_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::TronSignTx_TronContract_TronFreezeBalanceContract& freeze_balance_contract(const TronSignTx_TronContract* msg);
  static void set_has_freeze_balance_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::TronSignTx_TronContract_TronUnfreezeBalanceContract& unfreeze_balance_contract(const TronSignTx_TronContract* msg);
  static void set_has_unfreeze_balance_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::TronSignTx_TronContract_TronWithdrawBalanceContract& withdraw_balance_contract(const TronSignTx_TronContract* msg);
  static void set_has_withdraw_balance_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::TronSignTx_TronContract_TronUnfreezeAssetContract& unfreeze_asset_contract(const TronSignTx_TronContract* msg);
  static void set_has_unfreeze_asset_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::TronSignTx_TronContract_TronUpdateAssetContract& update_asset_contract(const TronSignTx_TronContract* msg);
  static void set_has_update_asset_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static const ::TronSignTx_TronContract_TronProposalCreateContract& proposal_create_contract(const TronSignTx_TronContract* msg);
  static void set_has_proposal_create_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static const ::TronSignTx_TronContract_TronProposalApproveContract& proposal_approve_contract(const TronSignTx_TronContract* msg);
  static void set_has_proposal_approve_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static const ::TronSignTx_TronContract_TronProposalDeleteContract& proposal_delete_contract(const TronSignTx_TronContract* msg);
  static void set_has_proposal_delete_contract(TronSignTx_TronContract* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
};

const ::TronSignTx_TronContract_TronTransferContract&
TronSignTx_TronContract::HasBitSetters::transfer_contract(const TronSignTx_TronContract* msg) {
  return *msg->transfer_contract_;
}
const ::TronSignTx_TronContract_TronTransferAssetContract&
TronSignTx_TronContract::HasBitSetters::transfer_asset_contract(const TronSignTx_TronContract* msg) {
  return *msg->transfer_asset_contract_;
}
const ::TronSignTx_TronContract_TronVoteWitnessContract&
TronSignTx_TronContract::HasBitSetters::vote_witness_contract(const TronSignTx_TronContract* msg) {
  return *msg->vote_witness_contract_;
}
const ::TronSignTx_TronContract_TronWitnessCreateContract&
TronSignTx_TronContract::HasBitSetters::witness_create_contract(const TronSignTx_TronContract* msg) {
  return *msg->witness_create_contract_;
}
const ::TronSignTx_TronContract_TronAssetIssueContract&
TronSignTx_TronContract::HasBitSetters::asset_issue_contract(const TronSignTx_TronContract* msg) {
  return *msg->asset_issue_contract_;
}
const ::TronSignTx_TronContract_TronWitnessUpdateContract&
TronSignTx_TronContract::HasBitSetters::witness_update_contract(const TronSignTx_TronContract* msg) {
  return *msg->witness_update_contract_;
}
const ::TronSignTx_TronContract_TronParticipateAssetIssueContract&
TronSignTx_TronContract::HasBitSetters::participate_asset_issue_contract(const TronSignTx_TronContract* msg) {
  return *msg->participate_asset_issue_contract_;
}
const ::TronSignTx_TronContract_TronAccountUpdateContract&
TronSignTx_TronContract::HasBitSetters::account_update_contract(const TronSignTx_TronContract* msg) {
  return *msg->account_update_contract_;
}
const ::TronSignTx_TronContract_TronFreezeBalanceContract&
TronSignTx_TronContract::HasBitSetters::freeze_balance_contract(const TronSignTx_TronContract* msg) {
  return *msg->freeze_balance_contract_;
}
const ::TronSignTx_TronContract_TronUnfreezeBalanceContract&
TronSignTx_TronContract::HasBitSetters::unfreeze_balance_contract(const TronSignTx_TronContract* msg) {
  return *msg->unfreeze_balance_contract_;
}
const ::TronSignTx_TronContract_TronWithdrawBalanceContract&
TronSignTx_TronContract::HasBitSetters::withdraw_balance_contract(const TronSignTx_TronContract* msg) {
  return *msg->withdraw_balance_contract_;
}
const ::TronSignTx_TronContract_TronUnfreezeAssetContract&
TronSignTx_TronContract::HasBitSetters::unfreeze_asset_contract(const TronSignTx_TronContract* msg) {
  return *msg->unfreeze_asset_contract_;
}
const ::TronSignTx_TronContract_TronUpdateAssetContract&
TronSignTx_TronContract::HasBitSetters::update_asset_contract(const TronSignTx_TronContract* msg) {
  return *msg->update_asset_contract_;
}
const ::TronSignTx_TronContract_TronProposalCreateContract&
TronSignTx_TronContract::HasBitSetters::proposal_create_contract(const TronSignTx_TronContract* msg) {
  return *msg->proposal_create_contract_;
}
const ::TronSignTx_TronContract_TronProposalApproveContract&
TronSignTx_TronContract::HasBitSetters::proposal_approve_contract(const TronSignTx_TronContract* msg) {
  return *msg->proposal_approve_contract_;
}
const ::TronSignTx_TronContract_TronProposalDeleteContract&
TronSignTx_TronContract::HasBitSetters::proposal_delete_contract(const TronSignTx_TronContract* msg) {
  return *msg->proposal_delete_contract_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx_TronContract::kTransferContractFieldNumber;
const int TronSignTx_TronContract::kTransferAssetContractFieldNumber;
const int TronSignTx_TronContract::kVoteWitnessContractFieldNumber;
const int TronSignTx_TronContract::kWitnessCreateContractFieldNumber;
const int TronSignTx_TronContract::kAssetIssueContractFieldNumber;
const int TronSignTx_TronContract::kWitnessUpdateContractFieldNumber;
const int TronSignTx_TronContract::kParticipateAssetIssueContractFieldNumber;
const int TronSignTx_TronContract::kAccountUpdateContractFieldNumber;
const int TronSignTx_TronContract::kFreezeBalanceContractFieldNumber;
const int TronSignTx_TronContract::kUnfreezeBalanceContractFieldNumber;
const int TronSignTx_TronContract::kWithdrawBalanceContractFieldNumber;
const int TronSignTx_TronContract::kUnfreezeAssetContractFieldNumber;
const int TronSignTx_TronContract::kUpdateAssetContractFieldNumber;
const int TronSignTx_TronContract::kProposalCreateContractFieldNumber;
const int TronSignTx_TronContract::kProposalApproveContractFieldNumber;
const int TronSignTx_TronContract::kProposalDeleteContractFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx_TronContract::TronSignTx_TronContract()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx.TronContract)
}
TronSignTx_TronContract::TronSignTx_TronContract(const TronSignTx_TronContract& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transfer_contract()) {
    transfer_contract_ = new ::TronSignTx_TronContract_TronTransferContract(*from.transfer_contract_);
  } else {
    transfer_contract_ = nullptr;
  }
  if (from.has_transfer_asset_contract()) {
    transfer_asset_contract_ = new ::TronSignTx_TronContract_TronTransferAssetContract(*from.transfer_asset_contract_);
  } else {
    transfer_asset_contract_ = nullptr;
  }
  if (from.has_vote_witness_contract()) {
    vote_witness_contract_ = new ::TronSignTx_TronContract_TronVoteWitnessContract(*from.vote_witness_contract_);
  } else {
    vote_witness_contract_ = nullptr;
  }
  if (from.has_witness_create_contract()) {
    witness_create_contract_ = new ::TronSignTx_TronContract_TronWitnessCreateContract(*from.witness_create_contract_);
  } else {
    witness_create_contract_ = nullptr;
  }
  if (from.has_asset_issue_contract()) {
    asset_issue_contract_ = new ::TronSignTx_TronContract_TronAssetIssueContract(*from.asset_issue_contract_);
  } else {
    asset_issue_contract_ = nullptr;
  }
  if (from.has_witness_update_contract()) {
    witness_update_contract_ = new ::TronSignTx_TronContract_TronWitnessUpdateContract(*from.witness_update_contract_);
  } else {
    witness_update_contract_ = nullptr;
  }
  if (from.has_participate_asset_issue_contract()) {
    participate_asset_issue_contract_ = new ::TronSignTx_TronContract_TronParticipateAssetIssueContract(*from.participate_asset_issue_contract_);
  } else {
    participate_asset_issue_contract_ = nullptr;
  }
  if (from.has_account_update_contract()) {
    account_update_contract_ = new ::TronSignTx_TronContract_TronAccountUpdateContract(*from.account_update_contract_);
  } else {
    account_update_contract_ = nullptr;
  }
  if (from.has_freeze_balance_contract()) {
    freeze_balance_contract_ = new ::TronSignTx_TronContract_TronFreezeBalanceContract(*from.freeze_balance_contract_);
  } else {
    freeze_balance_contract_ = nullptr;
  }
  if (from.has_unfreeze_balance_contract()) {
    unfreeze_balance_contract_ = new ::TronSignTx_TronContract_TronUnfreezeBalanceContract(*from.unfreeze_balance_contract_);
  } else {
    unfreeze_balance_contract_ = nullptr;
  }
  if (from.has_withdraw_balance_contract()) {
    withdraw_balance_contract_ = new ::TronSignTx_TronContract_TronWithdrawBalanceContract(*from.withdraw_balance_contract_);
  } else {
    withdraw_balance_contract_ = nullptr;
  }
  if (from.has_unfreeze_asset_contract()) {
    unfreeze_asset_contract_ = new ::TronSignTx_TronContract_TronUnfreezeAssetContract(*from.unfreeze_asset_contract_);
  } else {
    unfreeze_asset_contract_ = nullptr;
  }
  if (from.has_update_asset_contract()) {
    update_asset_contract_ = new ::TronSignTx_TronContract_TronUpdateAssetContract(*from.update_asset_contract_);
  } else {
    update_asset_contract_ = nullptr;
  }
  if (from.has_proposal_create_contract()) {
    proposal_create_contract_ = new ::TronSignTx_TronContract_TronProposalCreateContract(*from.proposal_create_contract_);
  } else {
    proposal_create_contract_ = nullptr;
  }
  if (from.has_proposal_approve_contract()) {
    proposal_approve_contract_ = new ::TronSignTx_TronContract_TronProposalApproveContract(*from.proposal_approve_contract_);
  } else {
    proposal_approve_contract_ = nullptr;
  }
  if (from.has_proposal_delete_contract()) {
    proposal_delete_contract_ = new ::TronSignTx_TronContract_TronProposalDeleteContract(*from.proposal_delete_contract_);
  } else {
    proposal_delete_contract_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TronSignTx.TronContract)
}

void TronSignTx_TronContract::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_TronContract_messages_2dtron_2eproto.base);
  ::memset(&transfer_contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposal_delete_contract_) -
      reinterpret_cast<char*>(&transfer_contract_)) + sizeof(proposal_delete_contract_));
}

TronSignTx_TronContract::~TronSignTx_TronContract() {
  // @@protoc_insertion_point(destructor:TronSignTx.TronContract)
  SharedDtor();
}

void TronSignTx_TronContract::SharedDtor() {
  if (this != internal_default_instance()) delete transfer_contract_;
  if (this != internal_default_instance()) delete transfer_asset_contract_;
  if (this != internal_default_instance()) delete vote_witness_contract_;
  if (this != internal_default_instance()) delete witness_create_contract_;
  if (this != internal_default_instance()) delete asset_issue_contract_;
  if (this != internal_default_instance()) delete witness_update_contract_;
  if (this != internal_default_instance()) delete participate_asset_issue_contract_;
  if (this != internal_default_instance()) delete account_update_contract_;
  if (this != internal_default_instance()) delete freeze_balance_contract_;
  if (this != internal_default_instance()) delete unfreeze_balance_contract_;
  if (this != internal_default_instance()) delete withdraw_balance_contract_;
  if (this != internal_default_instance()) delete unfreeze_asset_contract_;
  if (this != internal_default_instance()) delete update_asset_contract_;
  if (this != internal_default_instance()) delete proposal_create_contract_;
  if (this != internal_default_instance()) delete proposal_approve_contract_;
  if (this != internal_default_instance()) delete proposal_delete_contract_;
}

void TronSignTx_TronContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx_TronContract& TronSignTx_TronContract::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_TronContract_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx_TronContract::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx.TronContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transfer_contract_ != nullptr);
      transfer_contract_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transfer_asset_contract_ != nullptr);
      transfer_asset_contract_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vote_witness_contract_ != nullptr);
      vote_witness_contract_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(witness_create_contract_ != nullptr);
      witness_create_contract_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(asset_issue_contract_ != nullptr);
      asset_issue_contract_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(witness_update_contract_ != nullptr);
      witness_update_contract_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(participate_asset_issue_contract_ != nullptr);
      participate_asset_issue_contract_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(account_update_contract_ != nullptr);
      account_update_contract_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(freeze_balance_contract_ != nullptr);
      freeze_balance_contract_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(unfreeze_balance_contract_ != nullptr);
      unfreeze_balance_contract_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(withdraw_balance_contract_ != nullptr);
      withdraw_balance_contract_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(unfreeze_asset_contract_ != nullptr);
      unfreeze_asset_contract_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(update_asset_contract_ != nullptr);
      update_asset_contract_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(proposal_create_contract_ != nullptr);
      proposal_create_contract_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(proposal_approve_contract_ != nullptr);
      proposal_approve_contract_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(proposal_delete_contract_ != nullptr);
      proposal_delete_contract_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx_TronContract::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx_TronContract*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .TronSignTx.TronContract.TronTransferContract transfer_contract = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronTransferContract::_InternalParse;
        object = msg->mutable_transfer_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronTransferAssetContract transfer_asset_contract = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronTransferAssetContract::_InternalParse;
        object = msg->mutable_transfer_asset_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronVoteWitnessContract vote_witness_contract = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronVoteWitnessContract::_InternalParse;
        object = msg->mutable_vote_witness_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronWitnessCreateContract witness_create_contract = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronWitnessCreateContract::_InternalParse;
        object = msg->mutable_witness_create_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronAssetIssueContract asset_issue_contract = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronAssetIssueContract::_InternalParse;
        object = msg->mutable_asset_issue_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronWitnessUpdateContract witness_update_contract = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronWitnessUpdateContract::_InternalParse;
        object = msg->mutable_witness_update_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronParticipateAssetIssueContract participate_asset_issue_contract = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronParticipateAssetIssueContract::_InternalParse;
        object = msg->mutable_participate_asset_issue_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronAccountUpdateContract account_update_contract = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronAccountUpdateContract::_InternalParse;
        object = msg->mutable_account_update_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronFreezeBalanceContract freeze_balance_contract = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronFreezeBalanceContract::_InternalParse;
        object = msg->mutable_freeze_balance_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronUnfreezeBalanceContract::_InternalParse;
        object = msg->mutable_unfreeze_balance_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronWithdrawBalanceContract withdraw_balance_contract = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronWithdrawBalanceContract::_InternalParse;
        object = msg->mutable_withdraw_balance_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronUnfreezeAssetContract unfreeze_asset_contract = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronUnfreezeAssetContract::_InternalParse;
        object = msg->mutable_unfreeze_asset_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronUpdateAssetContract update_asset_contract = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronUpdateAssetContract::_InternalParse;
        object = msg->mutable_update_asset_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronProposalCreateContract proposal_create_contract = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronProposalCreateContract::_InternalParse;
        object = msg->mutable_proposal_create_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronProposalApproveContract proposal_approve_contract = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronProposalApproveContract::_InternalParse;
        object = msg->mutable_proposal_approve_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TronSignTx.TronContract.TronProposalDeleteContract proposal_delete_contract = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract_TronProposalDeleteContract::_InternalParse;
        object = msg->mutable_proposal_delete_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx_TronContract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx.TronContract)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TronSignTx.TronContract.TronTransferContract transfer_contract = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronTransferAssetContract transfer_asset_contract = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_asset_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronVoteWitnessContract vote_witness_contract = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vote_witness_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronWitnessCreateContract witness_create_contract = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_witness_create_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronAssetIssueContract asset_issue_contract = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_asset_issue_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronWitnessUpdateContract witness_update_contract = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_witness_update_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronParticipateAssetIssueContract participate_asset_issue_contract = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_participate_asset_issue_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronAccountUpdateContract account_update_contract = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account_update_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronFreezeBalanceContract freeze_balance_contract = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freeze_balance_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unfreeze_balance_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronWithdrawBalanceContract withdraw_balance_contract = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_withdraw_balance_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronUnfreezeAssetContract unfreeze_asset_contract = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unfreeze_asset_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronUpdateAssetContract update_asset_contract = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_asset_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronProposalCreateContract proposal_create_contract = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal_create_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronProposalApproveContract proposal_approve_contract = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal_approve_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract.TronProposalDeleteContract proposal_delete_contract = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal_delete_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx.TronContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx.TronContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx_TronContract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx.TronContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TronSignTx.TronContract.TronTransferContract transfer_contract = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::transfer_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronTransferAssetContract transfer_asset_contract = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::transfer_asset_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronVoteWitnessContract vote_witness_contract = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::vote_witness_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronWitnessCreateContract witness_create_contract = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::witness_create_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronAssetIssueContract asset_issue_contract = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::asset_issue_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronWitnessUpdateContract witness_update_contract = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::witness_update_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronParticipateAssetIssueContract participate_asset_issue_contract = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::participate_asset_issue_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronAccountUpdateContract account_update_contract = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::account_update_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronFreezeBalanceContract freeze_balance_contract = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::freeze_balance_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::unfreeze_balance_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronWithdrawBalanceContract withdraw_balance_contract = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::withdraw_balance_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronUnfreezeAssetContract unfreeze_asset_contract = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::unfreeze_asset_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronUpdateAssetContract update_asset_contract = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::update_asset_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronProposalCreateContract proposal_create_contract = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::proposal_create_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronProposalApproveContract proposal_approve_contract = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::proposal_approve_contract(this), output);
  }

  // optional .TronSignTx.TronContract.TronProposalDeleteContract proposal_delete_contract = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::proposal_delete_contract(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx.TronContract)
}

::google::protobuf::uint8* TronSignTx_TronContract::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx.TronContract)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TronSignTx.TronContract.TronTransferContract transfer_contract = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::transfer_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronTransferAssetContract transfer_asset_contract = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::transfer_asset_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronVoteWitnessContract vote_witness_contract = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::vote_witness_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronWitnessCreateContract witness_create_contract = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::witness_create_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronAssetIssueContract asset_issue_contract = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::asset_issue_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronWitnessUpdateContract witness_update_contract = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::witness_update_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronParticipateAssetIssueContract participate_asset_issue_contract = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::participate_asset_issue_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronAccountUpdateContract account_update_contract = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::account_update_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronFreezeBalanceContract freeze_balance_contract = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::freeze_balance_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::unfreeze_balance_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronWithdrawBalanceContract withdraw_balance_contract = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::withdraw_balance_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronUnfreezeAssetContract unfreeze_asset_contract = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::unfreeze_asset_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronUpdateAssetContract update_asset_contract = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::update_asset_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronProposalCreateContract proposal_create_contract = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::proposal_create_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronProposalApproveContract proposal_approve_contract = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::proposal_approve_contract(this), target);
  }

  // optional .TronSignTx.TronContract.TronProposalDeleteContract proposal_delete_contract = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::proposal_delete_contract(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx.TronContract)
  return target;
}

size_t TronSignTx_TronContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx.TronContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TronSignTx.TronContract.TronTransferContract transfer_contract = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transfer_contract_);
    }

    // optional .TronSignTx.TronContract.TronTransferAssetContract transfer_asset_contract = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transfer_asset_contract_);
    }

    // optional .TronSignTx.TronContract.TronVoteWitnessContract vote_witness_contract = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vote_witness_contract_);
    }

    // optional .TronSignTx.TronContract.TronWitnessCreateContract witness_create_contract = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *witness_create_contract_);
    }

    // optional .TronSignTx.TronContract.TronAssetIssueContract asset_issue_contract = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *asset_issue_contract_);
    }

    // optional .TronSignTx.TronContract.TronWitnessUpdateContract witness_update_contract = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *witness_update_contract_);
    }

    // optional .TronSignTx.TronContract.TronParticipateAssetIssueContract participate_asset_issue_contract = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *participate_asset_issue_contract_);
    }

    // optional .TronSignTx.TronContract.TronAccountUpdateContract account_update_contract = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *account_update_contract_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TronSignTx.TronContract.TronFreezeBalanceContract freeze_balance_contract = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *freeze_balance_contract_);
    }

    // optional .TronSignTx.TronContract.TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unfreeze_balance_contract_);
    }

    // optional .TronSignTx.TronContract.TronWithdrawBalanceContract withdraw_balance_contract = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *withdraw_balance_contract_);
    }

    // optional .TronSignTx.TronContract.TronUnfreezeAssetContract unfreeze_asset_contract = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unfreeze_asset_contract_);
    }

    // optional .TronSignTx.TronContract.TronUpdateAssetContract update_asset_contract = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_asset_contract_);
    }

    // optional .TronSignTx.TronContract.TronProposalCreateContract proposal_create_contract = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *proposal_create_contract_);
    }

    // optional .TronSignTx.TronContract.TronProposalApproveContract proposal_approve_contract = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *proposal_approve_contract_);
    }

    // optional .TronSignTx.TronContract.TronProposalDeleteContract proposal_delete_contract = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *proposal_delete_contract_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx_TronContract::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx.TronContract)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx_TronContract* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx_TronContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx.TronContract)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx.TronContract)
    MergeFrom(*source);
  }
}

void TronSignTx_TronContract::MergeFrom(const TronSignTx_TronContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx.TronContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_transfer_contract()->::TronSignTx_TronContract_TronTransferContract::MergeFrom(from.transfer_contract());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_transfer_asset_contract()->::TronSignTx_TronContract_TronTransferAssetContract::MergeFrom(from.transfer_asset_contract());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_vote_witness_contract()->::TronSignTx_TronContract_TronVoteWitnessContract::MergeFrom(from.vote_witness_contract());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_witness_create_contract()->::TronSignTx_TronContract_TronWitnessCreateContract::MergeFrom(from.witness_create_contract());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_asset_issue_contract()->::TronSignTx_TronContract_TronAssetIssueContract::MergeFrom(from.asset_issue_contract());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_witness_update_contract()->::TronSignTx_TronContract_TronWitnessUpdateContract::MergeFrom(from.witness_update_contract());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_participate_asset_issue_contract()->::TronSignTx_TronContract_TronParticipateAssetIssueContract::MergeFrom(from.participate_asset_issue_contract());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_account_update_contract()->::TronSignTx_TronContract_TronAccountUpdateContract::MergeFrom(from.account_update_contract());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_freeze_balance_contract()->::TronSignTx_TronContract_TronFreezeBalanceContract::MergeFrom(from.freeze_balance_contract());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_unfreeze_balance_contract()->::TronSignTx_TronContract_TronUnfreezeBalanceContract::MergeFrom(from.unfreeze_balance_contract());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_withdraw_balance_contract()->::TronSignTx_TronContract_TronWithdrawBalanceContract::MergeFrom(from.withdraw_balance_contract());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_unfreeze_asset_contract()->::TronSignTx_TronContract_TronUnfreezeAssetContract::MergeFrom(from.unfreeze_asset_contract());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_update_asset_contract()->::TronSignTx_TronContract_TronUpdateAssetContract::MergeFrom(from.update_asset_contract());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_proposal_create_contract()->::TronSignTx_TronContract_TronProposalCreateContract::MergeFrom(from.proposal_create_contract());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_proposal_approve_contract()->::TronSignTx_TronContract_TronProposalApproveContract::MergeFrom(from.proposal_approve_contract());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_proposal_delete_contract()->::TronSignTx_TronContract_TronProposalDeleteContract::MergeFrom(from.proposal_delete_contract());
    }
  }
}

void TronSignTx_TronContract::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx.TronContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx_TronContract::CopyFrom(const TronSignTx_TronContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx.TronContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx_TronContract::IsInitialized() const {
  return true;
}

void TronSignTx_TronContract::Swap(TronSignTx_TronContract* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx_TronContract::InternalSwap(TronSignTx_TronContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(transfer_contract_, other->transfer_contract_);
  swap(transfer_asset_contract_, other->transfer_asset_contract_);
  swap(vote_witness_contract_, other->vote_witness_contract_);
  swap(witness_create_contract_, other->witness_create_contract_);
  swap(asset_issue_contract_, other->asset_issue_contract_);
  swap(witness_update_contract_, other->witness_update_contract_);
  swap(participate_asset_issue_contract_, other->participate_asset_issue_contract_);
  swap(account_update_contract_, other->account_update_contract_);
  swap(freeze_balance_contract_, other->freeze_balance_contract_);
  swap(unfreeze_balance_contract_, other->unfreeze_balance_contract_);
  swap(withdraw_balance_contract_, other->withdraw_balance_contract_);
  swap(unfreeze_asset_contract_, other->unfreeze_asset_contract_);
  swap(update_asset_contract_, other->update_asset_contract_);
  swap(proposal_create_contract_, other->proposal_create_contract_);
  swap(proposal_approve_contract_, other->proposal_approve_contract_);
  swap(proposal_delete_contract_, other->proposal_delete_contract_);
}

::google::protobuf::Metadata TronSignTx_TronContract::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignTx::InitAsDefaultInstance() {
  ::_TronSignTx_default_instance_._instance.get_mutable()->contract_ = const_cast< ::TronSignTx_TronContract*>(
      ::TronSignTx_TronContract::internal_default_instance());
}
class TronSignTx::HasBitSetters {
 public:
  static void set_has_ref_block_bytes(TronSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ref_block_hash(TronSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_expiration(TronSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_data(TronSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::TronSignTx_TronContract& contract(const TronSignTx* msg);
  static void set_has_contract(TronSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_timestamp(TronSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::TronSignTx_TronContract&
TronSignTx::HasBitSetters::contract(const TronSignTx* msg) {
  return *msg->contract_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignTx::kAddressNFieldNumber;
const int TronSignTx::kRefBlockBytesFieldNumber;
const int TronSignTx::kRefBlockHashFieldNumber;
const int TronSignTx::kExpirationFieldNumber;
const int TronSignTx::kDataFieldNumber;
const int TronSignTx::kContractFieldNumber;
const int TronSignTx::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignTx::TronSignTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignTx)
}
TronSignTx::TronSignTx(const TronSignTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ref_block_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ref_block_bytes()) {
    ref_block_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_block_bytes_);
  }
  ref_block_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ref_block_hash()) {
    ref_block_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_block_hash_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_contract()) {
    contract_ = new ::TronSignTx_TronContract(*from.contract_);
  } else {
    contract_ = nullptr;
  }
  ::memcpy(&expiration_, &from.expiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&expiration_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:TronSignTx)
}

void TronSignTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignTx_messages_2dtron_2eproto.base);
  ref_block_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&contract_)) + sizeof(timestamp_));
}

TronSignTx::~TronSignTx() {
  // @@protoc_insertion_point(destructor:TronSignTx)
  SharedDtor();
}

void TronSignTx::SharedDtor() {
  ref_block_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contract_;
}

void TronSignTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignTx& TronSignTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignTx_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignTx::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ref_block_bytes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ref_block_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(contract_ != nullptr);
      contract_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&expiration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&expiration_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bytes ref_block_bytes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ref_block_bytes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes ref_block_hash = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ref_block_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 expiration = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_expiration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TronSignTx.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .TronSignTx.TronContract contract = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TronSignTx_TronContract::_InternalParse;
        object = msg->mutable_contract();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint64 timestamp = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ref_block_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ref_block_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ref_block_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ref_block_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 expiration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_expiration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TronSignTx.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TronSignTx.TronContract contract = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes ref_block_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ref_block_bytes(), output);
  }

  // optional bytes ref_block_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ref_block_hash(), output);
  }

  // optional uint64 expiration = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expiration(), output);
  }

  // optional string data = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  // optional .TronSignTx.TronContract contract = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::contract(this), output);
  }

  // optional uint64 timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignTx)
}

::google::protobuf::uint8* TronSignTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bytes ref_block_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ref_block_bytes(), target);
  }

  // optional bytes ref_block_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ref_block_hash(), target);
  }

  // optional uint64 expiration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expiration(), target);
  }

  // optional string data = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TronSignTx.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  // optional .TronSignTx.TronContract contract = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::contract(this), target);
  }

  // optional uint64 timestamp = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignTx)
  return target;
}

size_t TronSignTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes ref_block_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ref_block_bytes());
    }

    // optional bytes ref_block_hash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ref_block_hash());
    }

    // optional string data = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional .TronSignTx.TronContract contract = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *contract_);
    }

    // optional uint64 expiration = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiration());
    }

    // optional uint64 timestamp = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignTx* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignTx)
    MergeFrom(*source);
  }
}

void TronSignTx::MergeFrom(const TronSignTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ref_block_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_block_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ref_block_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_block_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_contract()->::TronSignTx_TronContract::MergeFrom(from.contract());
    }
    if (cached_has_bits & 0x00000010u) {
      expiration_ = from.expiration_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TronSignTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignTx::CopyFrom(const TronSignTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignTx::IsInitialized() const {
  return true;
}

void TronSignTx::Swap(TronSignTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignTx::InternalSwap(TronSignTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  ref_block_bytes_.Swap(&other->ref_block_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ref_block_hash_.Swap(&other->ref_block_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(contract_, other->contract_);
  swap(expiration_, other->expiration_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata TronSignTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TronSignedTx::InitAsDefaultInstance() {
}
class TronSignedTx::HasBitSetters {
 public:
  static void set_has_signature(TronSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_serialized_tx(TronSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TronSignedTx::kSignatureFieldNumber;
const int TronSignedTx::kSerializedTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TronSignedTx::TronSignedTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TronSignedTx)
}
TronSignedTx::TronSignedTx(const TronSignedTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_tx()) {
    serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
  }
  // @@protoc_insertion_point(copy_constructor:TronSignedTx)
}

void TronSignedTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TronSignedTx_messages_2dtron_2eproto.base);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TronSignedTx::~TronSignedTx() {
  // @@protoc_insertion_point(destructor:TronSignedTx)
  SharedDtor();
}

void TronSignedTx::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TronSignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TronSignedTx& TronSignedTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TronSignedTx_messages_2dtron_2eproto.base);
  return *internal_default_instance();
}


void TronSignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:TronSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_tx_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TronSignedTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TronSignedTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes serialized_tx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialized_tx();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TronSignedTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TronSignedTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_tx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TronSignedTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TronSignedTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TronSignedTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TronSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialized_tx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TronSignedTx)
}

::google::protobuf::uint8* TronSignedTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TronSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_tx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TronSignedTx)
  return target;
}

size_t TronSignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TronSignedTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes serialized_tx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_tx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TronSignedTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TronSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  const TronSignedTx* source =
      ::google::protobuf::DynamicCastToGenerated<TronSignedTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TronSignedTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TronSignedTx)
    MergeFrom(*source);
  }
}

void TronSignedTx::MergeFrom(const TronSignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TronSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
    }
  }
}

void TronSignedTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TronSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TronSignedTx::CopyFrom(const TronSignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TronSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TronSignedTx::IsInitialized() const {
  return true;
}

void TronSignedTx::Swap(TronSignedTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TronSignedTx::InternalSwap(TronSignedTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_tx_.Swap(&other->serialized_tx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TronSignedTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dtron_2eproto);
  return ::file_level_metadata_messages_2dtron_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::TronGetAddress* Arena::CreateMaybeMessage< ::TronGetAddress >(Arena* arena) {
  return Arena::CreateInternal< ::TronGetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TronAddress* Arena::CreateMaybeMessage< ::TronAddress >(Arena* arena) {
  return Arena::CreateInternal< ::TronAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronAccountUpdateContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronAccountUpdateContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronAccountUpdateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronTransferContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronTransferContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronTransferContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronTransferAssetContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronTransferAssetContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronTransferAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronVoteWitnessContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronVoteWitnessContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronVoteWitnessContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronWitnessCreateContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronWitnessCreateContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronWitnessCreateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronWitnessUpdateContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronWitnessUpdateContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronWitnessUpdateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronAssetIssueContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronAssetIssueContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronAssetIssueContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronParticipateAssetIssueContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronParticipateAssetIssueContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronParticipateAssetIssueContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronFreezeBalanceContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronFreezeBalanceContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronFreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronUnfreezeBalanceContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronUnfreezeBalanceContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronUnfreezeBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronUnfreezeAssetContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronUnfreezeAssetContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronUnfreezeAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronWithdrawBalanceContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronWithdrawBalanceContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronWithdrawBalanceContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronUpdateAssetContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronUpdateAssetContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronUpdateAssetContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronProposalCreateContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronProposalCreateContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronProposalCreateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronProposalApproveContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronProposalApproveContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronProposalApproveContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract_TronProposalDeleteContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract_TronProposalDeleteContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract_TronProposalDeleteContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx_TronContract* Arena::CreateMaybeMessage< ::TronSignTx_TronContract >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx_TronContract >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignTx* Arena::CreateMaybeMessage< ::TronSignTx >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignTx >(arena);
}
template<> PROTOBUF_NOINLINE ::TronSignedTx* Arena::CreateMaybeMessage< ::TronSignedTx >(Arena* arena) {
  return Arena::CreateInternal< ::TronSignedTx >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
