// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-beam.proto

#include "messages-beam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2dbeam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BeamKeyIDV_messages_2dbeam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dbeam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BeamPublicKey_messages_2dbeam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dbeam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dbeam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignSendTx_BeamPayment_messages_2dbeam_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dbeam_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignature_messages_2dbeam_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace beam {
class BeamKeyIDVDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamKeyIDV> _instance;
} _BeamKeyIDV_default_instance_;
class BeamGenerateKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamGenerateKey> _instance;
} _BeamGenerateKey_default_instance_;
class BeamGenerateNonceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamGenerateNonce> _instance;
} _BeamGenerateNonce_default_instance_;
class BeamECCImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamECCImage> _instance;
} _BeamECCImage_default_instance_;
class BeamSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignature> _instance;
} _BeamSignature_default_instance_;
class BeamDisplayMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamDisplayMessage> _instance;
} _BeamDisplayMessage_default_instance_;
class BeamConfirmResponseMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamConfirmResponseMessage> _instance;
} _BeamConfirmResponseMessage_default_instance_;
class BeamSignMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignMessage> _instance;
} _BeamSignMessage_default_instance_;
class BeamSignedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignedMessage> _instance;
} _BeamSignedMessage_default_instance_;
class BeamVerifyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamVerifyMessage> _instance;
} _BeamVerifyMessage_default_instance_;
class BeamGetPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamGetPublicKey> _instance;
} _BeamGetPublicKey_default_instance_;
class BeamPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamPublicKey> _instance;
} _BeamPublicKey_default_instance_;
class BeamGetOwnerKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamGetOwnerKey> _instance;
} _BeamGetOwnerKey_default_instance_;
class BeamOwnerKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamOwnerKey> _instance;
} _BeamOwnerKey_default_instance_;
class BeamSignSendTx_BeamPaymentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignSendTx_BeamPayment> _instance;
} _BeamSignSendTx_BeamPayment_default_instance_;
class BeamSignSendTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignSendTx> _instance;
} _BeamSignSendTx_default_instance_;
class BeamSignReceiveTx_BeamPaymentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignReceiveTx_BeamPayment> _instance;
} _BeamSignReceiveTx_BeamPayment_default_instance_;
class BeamSignReceiveTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignReceiveTx> _instance;
} _BeamSignReceiveTx_default_instance_;
class BeamSignedTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeamSignedTx> _instance;
} _BeamSignedTx_default_instance_;
}  // namespace beam
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsBeamKeyIDV_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamKeyIDV_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamKeyIDV();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamKeyIDV::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamKeyIDV_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamKeyIDV_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamGenerateKey_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamGenerateKey_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamGenerateKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamGenerateKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BeamGenerateKey_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBeamGenerateKey_messages_2dbeam_2eproto}, {
      &scc_info_BeamKeyIDV_messages_2dbeam_2eproto.base,}};

static void InitDefaultsBeamGenerateNonce_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamGenerateNonce_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamGenerateNonce();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamGenerateNonce::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamGenerateNonce_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamGenerateNonce_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamECCImage_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamECCImage_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamECCImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamECCImage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamECCImage_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamECCImage_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamSignature_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignature_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignature_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamSignature_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamDisplayMessage_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamDisplayMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamDisplayMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamDisplayMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamDisplayMessage_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamDisplayMessage_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamConfirmResponseMessage_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamConfirmResponseMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamConfirmResponseMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamConfirmResponseMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamConfirmResponseMessage_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamConfirmResponseMessage_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamSignMessage_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignMessage_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamSignMessage_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamSignedMessage_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignedMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BeamSignedMessage_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBeamSignedMessage_messages_2dbeam_2eproto}, {
      &scc_info_BeamSignature_messages_2dbeam_2eproto.base,}};

static void InitDefaultsBeamVerifyMessage_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamVerifyMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamVerifyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamVerifyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BeamVerifyMessage_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBeamVerifyMessage_messages_2dbeam_2eproto}, {
      &scc_info_BeamSignature_messages_2dbeam_2eproto.base,
      &scc_info_BeamPublicKey_messages_2dbeam_2eproto.base,}};

static void InitDefaultsBeamGetPublicKey_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamGetPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamGetPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamGetPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamGetPublicKey_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamGetPublicKey_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamPublicKey_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamPublicKey_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamPublicKey_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamGetOwnerKey_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamGetOwnerKey_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamGetOwnerKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamGetOwnerKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamGetOwnerKey_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamGetOwnerKey_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamOwnerKey_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamOwnerKey_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamOwnerKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamOwnerKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamOwnerKey_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamOwnerKey_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamSignSendTx_BeamPayment_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignSendTx_BeamPayment_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignSendTx_BeamPayment_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamSignSendTx_BeamPayment_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamSignSendTx_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignSendTx_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignSendTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignSendTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BeamSignSendTx_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBeamSignSendTx_messages_2dbeam_2eproto}, {
      &scc_info_BeamSignSendTx_BeamPayment_messages_2dbeam_2eproto.base,}};

static void InitDefaultsBeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignReceiveTx_BeamPayment_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto}, {}};

static void InitDefaultsBeamSignReceiveTx_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignReceiveTx_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignReceiveTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignReceiveTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BeamSignReceiveTx_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBeamSignReceiveTx_messages_2dbeam_2eproto}, {
      &scc_info_BeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto.base,
      &scc_info_BeamSignature_messages_2dbeam_2eproto.base,}};

static void InitDefaultsBeamSignedTx_messages_2dbeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::beam::_BeamSignedTx_default_instance_;
    new (ptr) ::hw::trezor::messages::beam::BeamSignedTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::beam::BeamSignedTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BeamSignedTx_messages_2dbeam_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeamSignedTx_messages_2dbeam_2eproto}, {}};

void InitDefaults_messages_2dbeam_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_BeamKeyIDV_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamGenerateKey_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamGenerateNonce_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamECCImage_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignature_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamDisplayMessage_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamConfirmResponseMessage_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignMessage_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignedMessage_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamVerifyMessage_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamGetPublicKey_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamPublicKey_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamGetOwnerKey_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamOwnerKey_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignSendTx_BeamPayment_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignSendTx_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignReceiveTx_messages_2dbeam_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BeamSignedTx_messages_2dbeam_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2dbeam_2eproto[19];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2dbeam_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2dbeam_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2dbeam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamKeyIDV, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamKeyIDV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamKeyIDV, idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamKeyIDV, type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamKeyIDV, sub_idx_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamKeyIDV, value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGenerateKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGenerateKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGenerateKey, kidv_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGenerateKey, is_coin_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGenerateNonce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGenerateNonce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGenerateNonce, slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamECCImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamECCImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamECCImage, image_x_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignature, nonce_pub_x_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignature, nonce_pub_y_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignature, sign_k_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamDisplayMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamDisplayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamDisplayMessage, text_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamDisplayMessage, show_display_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamConfirmResponseMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamConfirmResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamConfirmResponseMessage, text_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamConfirmResponseMessage, response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignMessage, msg_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignMessage, show_display_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignedMessage, signature_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamVerifyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamVerifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamVerifyMessage, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamVerifyMessage, public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamVerifyMessage, message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGetPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGetPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGetPublicKey, show_display_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamPublicKey, pub_x_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamPublicKey, pub_y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGetOwnerKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGetOwnerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamGetOwnerKey, show_display_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamOwnerKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamOwnerKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamOwnerKey, key_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment, destination_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment, destination_tag_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx, fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx, flags_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignSendTx, payment_),
  ~0u,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment, destination_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment, destination_tag_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx, fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx, flags_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx, payment_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignReceiveTx, signature_),
  ~0u,
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignedTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignedTx, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::beam::BeamSignedTx, serialized_tx_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::hw::trezor::messages::beam::BeamKeyIDV)},
  { 13, 20, sizeof(::hw::trezor::messages::beam::BeamGenerateKey)},
  { 22, 28, sizeof(::hw::trezor::messages::beam::BeamGenerateNonce)},
  { 29, 35, sizeof(::hw::trezor::messages::beam::BeamECCImage)},
  { 36, 44, sizeof(::hw::trezor::messages::beam::BeamSignature)},
  { 47, 54, sizeof(::hw::trezor::messages::beam::BeamDisplayMessage)},
  { 56, 63, sizeof(::hw::trezor::messages::beam::BeamConfirmResponseMessage)},
  { 65, 72, sizeof(::hw::trezor::messages::beam::BeamSignMessage)},
  { 74, 80, sizeof(::hw::trezor::messages::beam::BeamSignedMessage)},
  { 81, 89, sizeof(::hw::trezor::messages::beam::BeamVerifyMessage)},
  { 92, 98, sizeof(::hw::trezor::messages::beam::BeamGetPublicKey)},
  { 99, 106, sizeof(::hw::trezor::messages::beam::BeamPublicKey)},
  { 108, 114, sizeof(::hw::trezor::messages::beam::BeamGetOwnerKey)},
  { 115, 121, sizeof(::hw::trezor::messages::beam::BeamOwnerKey)},
  { 122, 130, sizeof(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment)},
  { 133, 142, sizeof(::hw::trezor::messages::beam::BeamSignSendTx)},
  { 146, 154, sizeof(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment)},
  { 157, 167, sizeof(::hw::trezor::messages::beam::BeamSignReceiveTx)},
  { 172, 179, sizeof(::hw::trezor::messages::beam::BeamSignedTx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamKeyIDV_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamGenerateKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamGenerateNonce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamECCImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamDisplayMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamConfirmResponseMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamVerifyMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamGetPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamGetOwnerKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamOwnerKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignSendTx_BeamPayment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignSendTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignReceiveTx_BeamPayment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignReceiveTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::beam::_BeamSignedTx_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2dbeam_2eproto = {
  {}, AddDescriptors_messages_2dbeam_2eproto, "messages-beam.proto", schemas,
  file_default_instances, TableStruct_messages_2dbeam_2eproto::offsets,
  file_level_metadata_messages_2dbeam_2eproto, 19, file_level_enum_descriptors_messages_2dbeam_2eproto, file_level_service_descriptors_messages_2dbeam_2eproto,
};

const char descriptor_table_protodef_messages_2dbeam_2eproto[] =
  "\n\023messages-beam.proto\022\027hw.trezor.message"
  "s.beam\"G\n\nBeamKeyIDV\022\013\n\003idx\030\001 \001(\004\022\014\n\004typ"
  "e\030\002 \001(\r\022\017\n\007sub_idx\030\003 \001(\r\022\r\n\005value\030\004 \001(\004\""
  "Y\n\017BeamGenerateKey\0221\n\004kidv\030\001 \001(\0132#.hw.tr"
  "ezor.messages.beam.BeamKeyIDV\022\023\n\013is_coin"
  "_key\030\002 \001(\010\"!\n\021BeamGenerateNonce\022\014\n\004slot\030"
  "\001 \001(\r\"\037\n\014BeamECCImage\022\017\n\007image_x\030\001 \001(\014\"I"
  "\n\rBeamSignature\022\023\n\013nonce_pub_x\030\001 \001(\014\022\023\n\013"
  "nonce_pub_y\030\002 \001(\014\022\016\n\006sign_k\030\003 \001(\014\"8\n\022Bea"
  "mDisplayMessage\022\014\n\004text\030\001 \001(\t\022\024\n\014show_di"
  "splay\030\002 \001(\010\"<\n\032BeamConfirmResponseMessag"
  "e\022\014\n\004text\030\001 \001(\t\022\020\n\010response\030\002 \001(\010\"4\n\017Bea"
  "mSignMessage\022\013\n\003msg\030\001 \001(\t\022\024\n\014show_displa"
  "y\030\002 \001(\010\"N\n\021BeamSignedMessage\0229\n\tsignatur"
  "e\030\001 \001(\0132&.hw.trezor.messages.beam.BeamSi"
  "gnature\"\233\001\n\021BeamVerifyMessage\0229\n\tsignatu"
  "re\030\001 \001(\0132&.hw.trezor.messages.beam.BeamS"
  "ignature\022:\n\npublic_key\030\002 \001(\0132&.hw.trezor"
  ".messages.beam.BeamPublicKey\022\017\n\007message\030"
  "\003 \001(\014\"(\n\020BeamGetPublicKey\022\024\n\014show_displa"
  "y\030\001 \001(\010\"-\n\rBeamPublicKey\022\r\n\005pub_x\030\001 \001(\014\022"
  "\r\n\005pub_y\030\002 \001(\014\"\'\n\017BeamGetOwnerKey\022\024\n\014sho"
  "w_display\030\001 \001(\010\"\033\n\014BeamOwnerKey\022\013\n\003key\030\001"
  " \001(\014\"\322\001\n\016BeamSignSendTx\022\021\n\taddress_n\030\001 \003"
  "(\r\022\013\n\003fee\030\002 \001(\004\022\r\n\005flags\030\003 \001(\r\022D\n\007paymen"
  "t\030\004 \001(\01323.hw.trezor.messages.beam.BeamSi"
  "gnSendTx.BeamPayment\032K\n\013BeamPayment\022\016\n\006a"
  "mount\030\001 \001(\004\022\023\n\013destination\030\002 \001(\t\022\027\n\017dest"
  "ination_tag\030\003 \001(\r\"\223\002\n\021BeamSignReceiveTx\022"
  "\021\n\taddress_n\030\001 \003(\r\022\013\n\003fee\030\002 \001(\004\022\r\n\005flags"
  "\030\003 \001(\r\022G\n\007payment\030\004 \001(\01326.hw.trezor.mess"
  "ages.beam.BeamSignReceiveTx.BeamPayment\022"
  "9\n\tsignature\030\005 \001(\0132&.hw.trezor.messages."
  "beam.BeamSignature\032K\n\013BeamPayment\022\016\n\006amo"
  "unt\030\001 \001(\004\022\023\n\013destination\030\002 \001(\t\022\027\n\017destin"
  "ation_tag\030\003 \001(\r\"8\n\014BeamSignedTx\022\021\n\tsigna"
  "ture\030\001 \001(\014\022\025\n\rserialized_tx\030\002 \001(\014B8\n#com"
  ".satoshilabs.trezor.lib.protobufB\021Trezor"
  "MessageBeam"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2dbeam_2eproto = {
  false, InitDefaults_messages_2dbeam_2eproto, 
  descriptor_table_protodef_messages_2dbeam_2eproto,
  "messages-beam.proto", &assign_descriptors_table_messages_2dbeam_2eproto, 1531,
};

void AddDescriptors_messages_2dbeam_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2dbeam_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dbeam_2eproto = []() { AddDescriptors_messages_2dbeam_2eproto(); return true; }();
namespace hw {
namespace trezor {
namespace messages {
namespace beam {

// ===================================================================

void BeamKeyIDV::InitAsDefaultInstance() {
}
class BeamKeyIDV::HasBitSetters {
 public:
  static void set_has_idx(BeamKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_type(BeamKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sub_idx(BeamKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_value(BeamKeyIDV* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamKeyIDV::kIdxFieldNumber;
const int BeamKeyIDV::kTypeFieldNumber;
const int BeamKeyIDV::kSubIdxFieldNumber;
const int BeamKeyIDV::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamKeyIDV::BeamKeyIDV()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamKeyIDV)
}
BeamKeyIDV::BeamKeyIDV(const BeamKeyIDV& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamKeyIDV)
}

void BeamKeyIDV::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(value_));
}

BeamKeyIDV::~BeamKeyIDV() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamKeyIDV)
  SharedDtor();
}

void BeamKeyIDV::SharedDtor() {
}

void BeamKeyIDV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamKeyIDV& BeamKeyIDV::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamKeyIDV_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamKeyIDV::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamKeyIDV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&idx_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamKeyIDV::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamKeyIDV*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 idx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sub_idx = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_sub_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamKeyIDV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamKeyIDV)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sub_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_sub_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamKeyIDV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamKeyIDV)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamKeyIDV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamKeyIDV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->idx(), output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_idx(), output);
  }

  // optional uint64 value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamKeyIDV)
}

::google::protobuf::uint8* BeamKeyIDV::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamKeyIDV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->idx(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 sub_idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_idx(), target);
  }

  // optional uint64 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamKeyIDV)
  return target;
}

size_t BeamKeyIDV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamKeyIDV)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idx());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 sub_idx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_idx());
    }

    // optional uint64 value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamKeyIDV::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamKeyIDV)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamKeyIDV* source =
      ::google::protobuf::DynamicCastToGenerated<BeamKeyIDV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamKeyIDV)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamKeyIDV)
    MergeFrom(*source);
  }
}

void BeamKeyIDV::MergeFrom(const BeamKeyIDV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamKeyIDV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      sub_idx_ = from.sub_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamKeyIDV::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamKeyIDV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamKeyIDV::CopyFrom(const BeamKeyIDV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamKeyIDV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamKeyIDV::IsInitialized() const {
  return true;
}

void BeamKeyIDV::Swap(BeamKeyIDV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamKeyIDV::InternalSwap(BeamKeyIDV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(idx_, other->idx_);
  swap(type_, other->type_);
  swap(sub_idx_, other->sub_idx_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata BeamKeyIDV::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamGenerateKey::InitAsDefaultInstance() {
  ::hw::trezor::messages::beam::_BeamGenerateKey_default_instance_._instance.get_mutable()->kidv_ = const_cast< ::hw::trezor::messages::beam::BeamKeyIDV*>(
      ::hw::trezor::messages::beam::BeamKeyIDV::internal_default_instance());
}
class BeamGenerateKey::HasBitSetters {
 public:
  static const ::hw::trezor::messages::beam::BeamKeyIDV& kidv(const BeamGenerateKey* msg);
  static void set_has_kidv(BeamGenerateKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_coin_key(BeamGenerateKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::beam::BeamKeyIDV&
BeamGenerateKey::HasBitSetters::kidv(const BeamGenerateKey* msg) {
  return *msg->kidv_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamGenerateKey::kKidvFieldNumber;
const int BeamGenerateKey::kIsCoinKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamGenerateKey::BeamGenerateKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamGenerateKey)
}
BeamGenerateKey::BeamGenerateKey(const BeamGenerateKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kidv()) {
    kidv_ = new ::hw::trezor::messages::beam::BeamKeyIDV(*from.kidv_);
  } else {
    kidv_ = nullptr;
  }
  is_coin_key_ = from.is_coin_key_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamGenerateKey)
}

void BeamGenerateKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamGenerateKey_messages_2dbeam_2eproto.base);
  ::memset(&kidv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_coin_key_) -
      reinterpret_cast<char*>(&kidv_)) + sizeof(is_coin_key_));
}

BeamGenerateKey::~BeamGenerateKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamGenerateKey)
  SharedDtor();
}

void BeamGenerateKey::SharedDtor() {
  if (this != internal_default_instance()) delete kidv_;
}

void BeamGenerateKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamGenerateKey& BeamGenerateKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamGenerateKey_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamGenerateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamGenerateKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(kidv_ != nullptr);
    kidv_->Clear();
  }
  is_coin_key_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamGenerateKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamGenerateKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::beam::BeamKeyIDV::_InternalParse;
        object = msg->mutable_kidv();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool is_coin_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_coin_key(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamGenerateKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamGenerateKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kidv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_coin_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_coin_key(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coin_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamGenerateKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamGenerateKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamGenerateKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamGenerateKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::kidv(this), output);
  }

  // optional bool is_coin_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_coin_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamGenerateKey)
}

::google::protobuf::uint8* BeamGenerateKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamGenerateKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::kidv(this), target);
  }

  // optional bool is_coin_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_coin_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamGenerateKey)
  return target;
}

size_t BeamGenerateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamGenerateKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kidv_);
    }

    // optional bool is_coin_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamGenerateKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamGenerateKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamGenerateKey* source =
      ::google::protobuf::DynamicCastToGenerated<BeamGenerateKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamGenerateKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamGenerateKey)
    MergeFrom(*source);
  }
}

void BeamGenerateKey::MergeFrom(const BeamGenerateKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamGenerateKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_kidv()->::hw::trezor::messages::beam::BeamKeyIDV::MergeFrom(from.kidv());
    }
    if (cached_has_bits & 0x00000002u) {
      is_coin_key_ = from.is_coin_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamGenerateKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamGenerateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamGenerateKey::CopyFrom(const BeamGenerateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamGenerateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamGenerateKey::IsInitialized() const {
  return true;
}

void BeamGenerateKey::Swap(BeamGenerateKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamGenerateKey::InternalSwap(BeamGenerateKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kidv_, other->kidv_);
  swap(is_coin_key_, other->is_coin_key_);
}

::google::protobuf::Metadata BeamGenerateKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamGenerateNonce::InitAsDefaultInstance() {
}
class BeamGenerateNonce::HasBitSetters {
 public:
  static void set_has_slot(BeamGenerateNonce* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamGenerateNonce::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamGenerateNonce::BeamGenerateNonce()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamGenerateNonce)
}
BeamGenerateNonce::BeamGenerateNonce(const BeamGenerateNonce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamGenerateNonce)
}

void BeamGenerateNonce::SharedCtor() {
  slot_ = 0u;
}

BeamGenerateNonce::~BeamGenerateNonce() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamGenerateNonce)
  SharedDtor();
}

void BeamGenerateNonce::SharedDtor() {
}

void BeamGenerateNonce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamGenerateNonce& BeamGenerateNonce::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamGenerateNonce_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamGenerateNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamGenerateNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamGenerateNonce::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamGenerateNonce*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamGenerateNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamGenerateNonce)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamGenerateNonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamGenerateNonce)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamGenerateNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamGenerateNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamGenerateNonce)
}

::google::protobuf::uint8* BeamGenerateNonce::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamGenerateNonce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamGenerateNonce)
  return target;
}

size_t BeamGenerateNonce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamGenerateNonce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 slot = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamGenerateNonce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamGenerateNonce)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamGenerateNonce* source =
      ::google::protobuf::DynamicCastToGenerated<BeamGenerateNonce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamGenerateNonce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamGenerateNonce)
    MergeFrom(*source);
  }
}

void BeamGenerateNonce::MergeFrom(const BeamGenerateNonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamGenerateNonce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    set_slot(from.slot());
  }
}

void BeamGenerateNonce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamGenerateNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamGenerateNonce::CopyFrom(const BeamGenerateNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamGenerateNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamGenerateNonce::IsInitialized() const {
  return true;
}

void BeamGenerateNonce::Swap(BeamGenerateNonce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamGenerateNonce::InternalSwap(BeamGenerateNonce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
}

::google::protobuf::Metadata BeamGenerateNonce::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamECCImage::InitAsDefaultInstance() {
}
class BeamECCImage::HasBitSetters {
 public:
  static void set_has_image_x(BeamECCImage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamECCImage::kImageXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamECCImage::BeamECCImage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamECCImage)
}
BeamECCImage::BeamECCImage(const BeamECCImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image_x()) {
    image_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_x_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamECCImage)
}

void BeamECCImage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamECCImage_messages_2dbeam_2eproto.base);
  image_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BeamECCImage::~BeamECCImage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamECCImage)
  SharedDtor();
}

void BeamECCImage::SharedDtor() {
  image_x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamECCImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamECCImage& BeamECCImage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamECCImage_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamECCImage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamECCImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_x_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamECCImage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamECCImage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes image_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image_x();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamECCImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamECCImage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes image_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamECCImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamECCImage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamECCImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamECCImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes image_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image_x(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamECCImage)
}

::google::protobuf::uint8* BeamECCImage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamECCImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes image_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image_x(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamECCImage)
  return target;
}

size_t BeamECCImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamECCImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes image_x = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_x());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamECCImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamECCImage)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamECCImage* source =
      ::google::protobuf::DynamicCastToGenerated<BeamECCImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamECCImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamECCImage)
    MergeFrom(*source);
  }
}

void BeamECCImage::MergeFrom(const BeamECCImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamECCImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image_x()) {
    _has_bits_[0] |= 0x00000001u;
    image_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_x_);
  }
}

void BeamECCImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamECCImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamECCImage::CopyFrom(const BeamECCImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamECCImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamECCImage::IsInitialized() const {
  return true;
}

void BeamECCImage::Swap(BeamECCImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamECCImage::InternalSwap(BeamECCImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  image_x_.Swap(&other->image_x_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BeamECCImage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignature::InitAsDefaultInstance() {
}
class BeamSignature::HasBitSetters {
 public:
  static void set_has_nonce_pub_x(BeamSignature* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_nonce_pub_y(BeamSignature* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sign_k(BeamSignature* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignature::kNoncePubXFieldNumber;
const int BeamSignature::kNoncePubYFieldNumber;
const int BeamSignature::kSignKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignature::BeamSignature()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignature)
}
BeamSignature::BeamSignature(const BeamSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_pub_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nonce_pub_x()) {
    nonce_pub_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_pub_x_);
  }
  nonce_pub_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nonce_pub_y()) {
    nonce_pub_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_pub_y_);
  }
  sign_k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sign_k()) {
    sign_k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_k_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignature)
}

void BeamSignature::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignature_messages_2dbeam_2eproto.base);
  nonce_pub_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_pub_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BeamSignature::~BeamSignature() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignature)
  SharedDtor();
}

void BeamSignature::SharedDtor() {
  nonce_pub_x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_pub_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignature& BeamSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignature_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      nonce_pub_x_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      nonce_pub_y_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sign_k_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignature*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes nonce_pub_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_nonce_pub_x();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes nonce_pub_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_nonce_pub_y();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes sign_k = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sign_k();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes nonce_pub_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce_pub_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes nonce_pub_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce_pub_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sign_k = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_k()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes nonce_pub_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nonce_pub_x(), output);
  }

  // optional bytes nonce_pub_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nonce_pub_y(), output);
  }

  // optional bytes sign_k = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sign_k(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignature)
}

::google::protobuf::uint8* BeamSignature::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes nonce_pub_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nonce_pub_x(), target);
  }

  // optional bytes nonce_pub_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nonce_pub_y(), target);
  }

  // optional bytes sign_k = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sign_k(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignature)
  return target;
}

size_t BeamSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes nonce_pub_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nonce_pub_x());
    }

    // optional bytes nonce_pub_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nonce_pub_y());
    }

    // optional bytes sign_k = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_k());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignature* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignature)
    MergeFrom(*source);
  }
}

void BeamSignature::MergeFrom(const BeamSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nonce_pub_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_pub_x_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      nonce_pub_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_pub_y_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      sign_k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_k_);
    }
  }
}

void BeamSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignature::CopyFrom(const BeamSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignature::IsInitialized() const {
  return true;
}

void BeamSignature::Swap(BeamSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignature::InternalSwap(BeamSignature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nonce_pub_x_.Swap(&other->nonce_pub_x_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nonce_pub_y_.Swap(&other->nonce_pub_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_k_.Swap(&other->sign_k_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BeamSignature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamDisplayMessage::InitAsDefaultInstance() {
}
class BeamDisplayMessage::HasBitSetters {
 public:
  static void set_has_text(BeamDisplayMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_show_display(BeamDisplayMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamDisplayMessage::kTextFieldNumber;
const int BeamDisplayMessage::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamDisplayMessage::BeamDisplayMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamDisplayMessage)
}
BeamDisplayMessage::BeamDisplayMessage(const BeamDisplayMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamDisplayMessage)
}

void BeamDisplayMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamDisplayMessage_messages_2dbeam_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_display_ = false;
}

BeamDisplayMessage::~BeamDisplayMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamDisplayMessage)
  SharedDtor();
}

void BeamDisplayMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamDisplayMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamDisplayMessage& BeamDisplayMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamDisplayMessage_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamDisplayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamDisplayMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamDisplayMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamDisplayMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.beam.BeamDisplayMessage.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamDisplayMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamDisplayMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.beam.BeamDisplayMessage.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamDisplayMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamDisplayMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamDisplayMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamDisplayMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamDisplayMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamDisplayMessage)
}

::google::protobuf::uint8* BeamDisplayMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamDisplayMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamDisplayMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamDisplayMessage)
  return target;
}

size_t BeamDisplayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamDisplayMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool show_display = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamDisplayMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamDisplayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamDisplayMessage* source =
      ::google::protobuf::DynamicCastToGenerated<BeamDisplayMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamDisplayMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamDisplayMessage)
    MergeFrom(*source);
  }
}

void BeamDisplayMessage::MergeFrom(const BeamDisplayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamDisplayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      show_display_ = from.show_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamDisplayMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamDisplayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamDisplayMessage::CopyFrom(const BeamDisplayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamDisplayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamDisplayMessage::IsInitialized() const {
  return true;
}

void BeamDisplayMessage::Swap(BeamDisplayMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamDisplayMessage::InternalSwap(BeamDisplayMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata BeamDisplayMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamConfirmResponseMessage::InitAsDefaultInstance() {
}
class BeamConfirmResponseMessage::HasBitSetters {
 public:
  static void set_has_text(BeamConfirmResponseMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_response(BeamConfirmResponseMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamConfirmResponseMessage::kTextFieldNumber;
const int BeamConfirmResponseMessage::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamConfirmResponseMessage::BeamConfirmResponseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamConfirmResponseMessage)
}
BeamConfirmResponseMessage::BeamConfirmResponseMessage(const BeamConfirmResponseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamConfirmResponseMessage)
}

void BeamConfirmResponseMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamConfirmResponseMessage_messages_2dbeam_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = false;
}

BeamConfirmResponseMessage::~BeamConfirmResponseMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  SharedDtor();
}

void BeamConfirmResponseMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamConfirmResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamConfirmResponseMessage& BeamConfirmResponseMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamConfirmResponseMessage_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamConfirmResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  response_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamConfirmResponseMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamConfirmResponseMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.beam.BeamConfirmResponseMessage.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool response = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamConfirmResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.beam.BeamConfirmResponseMessage.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamConfirmResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamConfirmResponseMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional bool response = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamConfirmResponseMessage)
}

::google::protobuf::uint8* BeamConfirmResponseMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamConfirmResponseMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional bool response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  return target;
}

size_t BeamConfirmResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamConfirmResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamConfirmResponseMessage* source =
      ::google::protobuf::DynamicCastToGenerated<BeamConfirmResponseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamConfirmResponseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamConfirmResponseMessage)
    MergeFrom(*source);
  }
}

void BeamConfirmResponseMessage::MergeFrom(const BeamConfirmResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamConfirmResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamConfirmResponseMessage::CopyFrom(const BeamConfirmResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamConfirmResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamConfirmResponseMessage::IsInitialized() const {
  return true;
}

void BeamConfirmResponseMessage::Swap(BeamConfirmResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamConfirmResponseMessage::InternalSwap(BeamConfirmResponseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_, other->response_);
}

::google::protobuf::Metadata BeamConfirmResponseMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignMessage::InitAsDefaultInstance() {
}
class BeamSignMessage::HasBitSetters {
 public:
  static void set_has_msg(BeamSignMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_show_display(BeamSignMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignMessage::kMsgFieldNumber;
const int BeamSignMessage::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignMessage::BeamSignMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignMessage)
}
BeamSignMessage::BeamSignMessage(const BeamSignMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignMessage)
}

void BeamSignMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignMessage_messages_2dbeam_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_display_ = false;
}

BeamSignMessage::~BeamSignMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignMessage)
  SharedDtor();
}

void BeamSignMessage::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamSignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignMessage& BeamSignMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignMessage_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string msg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.beam.BeamSignMessage.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.beam.BeamSignMessage.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamSignMessage.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignMessage)
}

::google::protobuf::uint8* BeamSignMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamSignMessage.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignMessage)
  return target;
}

size_t BeamSignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string msg = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional bool show_display = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignMessage* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignMessage)
    MergeFrom(*source);
  }
}

void BeamSignMessage::MergeFrom(const BeamSignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      show_display_ = from.show_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamSignMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignMessage::CopyFrom(const BeamSignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignMessage::IsInitialized() const {
  return true;
}

void BeamSignMessage::Swap(BeamSignMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignMessage::InternalSwap(BeamSignMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata BeamSignMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignedMessage::InitAsDefaultInstance() {
  ::hw::trezor::messages::beam::_BeamSignedMessage_default_instance_._instance.get_mutable()->signature_ = const_cast< ::hw::trezor::messages::beam::BeamSignature*>(
      ::hw::trezor::messages::beam::BeamSignature::internal_default_instance());
}
class BeamSignedMessage::HasBitSetters {
 public:
  static const ::hw::trezor::messages::beam::BeamSignature& signature(const BeamSignedMessage* msg);
  static void set_has_signature(BeamSignedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::beam::BeamSignature&
BeamSignedMessage::HasBitSetters::signature(const BeamSignedMessage* msg) {
  return *msg->signature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignedMessage::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignedMessage::BeamSignedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignedMessage)
}
BeamSignedMessage::BeamSignedMessage(const BeamSignedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::hw::trezor::messages::beam::BeamSignature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignedMessage)
}

void BeamSignedMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignedMessage_messages_2dbeam_2eproto.base);
  signature_ = nullptr;
}

BeamSignedMessage::~BeamSignedMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignedMessage)
  SharedDtor();
}

void BeamSignedMessage::SharedDtor() {
  if (this != internal_default_instance()) delete signature_;
}

void BeamSignedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignedMessage& BeamSignedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignedMessage_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != nullptr);
    signature_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::beam::BeamSignature::_InternalParse;
        object = msg->mutable_signature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::signature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignedMessage)
}

::google::protobuf::uint8* BeamSignedMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::signature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignedMessage)
  return target;
}

size_t BeamSignedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignedMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignedMessage* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignedMessage)
    MergeFrom(*source);
  }
}

void BeamSignedMessage::MergeFrom(const BeamSignedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    mutable_signature()->::hw::trezor::messages::beam::BeamSignature::MergeFrom(from.signature());
  }
}

void BeamSignedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignedMessage::CopyFrom(const BeamSignedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignedMessage::IsInitialized() const {
  return true;
}

void BeamSignedMessage::Swap(BeamSignedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignedMessage::InternalSwap(BeamSignedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(signature_, other->signature_);
}

::google::protobuf::Metadata BeamSignedMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamVerifyMessage::InitAsDefaultInstance() {
  ::hw::trezor::messages::beam::_BeamVerifyMessage_default_instance_._instance.get_mutable()->signature_ = const_cast< ::hw::trezor::messages::beam::BeamSignature*>(
      ::hw::trezor::messages::beam::BeamSignature::internal_default_instance());
  ::hw::trezor::messages::beam::_BeamVerifyMessage_default_instance_._instance.get_mutable()->public_key_ = const_cast< ::hw::trezor::messages::beam::BeamPublicKey*>(
      ::hw::trezor::messages::beam::BeamPublicKey::internal_default_instance());
}
class BeamVerifyMessage::HasBitSetters {
 public:
  static const ::hw::trezor::messages::beam::BeamSignature& signature(const BeamVerifyMessage* msg);
  static void set_has_signature(BeamVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::hw::trezor::messages::beam::BeamPublicKey& public_key(const BeamVerifyMessage* msg);
  static void set_has_public_key(BeamVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_message(BeamVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::beam::BeamSignature&
BeamVerifyMessage::HasBitSetters::signature(const BeamVerifyMessage* msg) {
  return *msg->signature_;
}
const ::hw::trezor::messages::beam::BeamPublicKey&
BeamVerifyMessage::HasBitSetters::public_key(const BeamVerifyMessage* msg) {
  return *msg->public_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamVerifyMessage::kSignatureFieldNumber;
const int BeamVerifyMessage::kPublicKeyFieldNumber;
const int BeamVerifyMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamVerifyMessage::BeamVerifyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamVerifyMessage)
}
BeamVerifyMessage::BeamVerifyMessage(const BeamVerifyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_signature()) {
    signature_ = new ::hw::trezor::messages::beam::BeamSignature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from.has_public_key()) {
    public_key_ = new ::hw::trezor::messages::beam::BeamPublicKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamVerifyMessage)
}

void BeamVerifyMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamVerifyMessage_messages_2dbeam_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_key_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(public_key_));
}

BeamVerifyMessage::~BeamVerifyMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamVerifyMessage)
  SharedDtor();
}

void BeamVerifyMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete public_key_;
}

void BeamVerifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamVerifyMessage& BeamVerifyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamVerifyMessage_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamVerifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(public_key_ != nullptr);
      public_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamVerifyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamVerifyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::beam::BeamSignature::_InternalParse;
        object = msg->mutable_signature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.beam.BeamPublicKey public_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::beam::BeamPublicKey::_InternalParse;
        object = msg->mutable_public_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamVerifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamVerifyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.beam.BeamPublicKey public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamVerifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamVerifyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamVerifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::signature(this), output);
  }

  // optional .hw.trezor.messages.beam.BeamPublicKey public_key = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::public_key(this), output);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamVerifyMessage)
}

::google::protobuf::uint8* BeamVerifyMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::signature(this), target);
  }

  // optional .hw.trezor.messages.beam.BeamPublicKey public_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::public_key(this), target);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamVerifyMessage)
  return target;
}

size_t BeamVerifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamVerifyMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .hw.trezor.messages.beam.BeamPublicKey public_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *public_key_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamVerifyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamVerifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamVerifyMessage* source =
      ::google::protobuf::DynamicCastToGenerated<BeamVerifyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamVerifyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamVerifyMessage)
    MergeFrom(*source);
  }
}

void BeamVerifyMessage::MergeFrom(const BeamVerifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamVerifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::hw::trezor::messages::beam::BeamSignature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_public_key()->::hw::trezor::messages::beam::BeamPublicKey::MergeFrom(from.public_key());
    }
  }
}

void BeamVerifyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamVerifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamVerifyMessage::CopyFrom(const BeamVerifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamVerifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamVerifyMessage::IsInitialized() const {
  return true;
}

void BeamVerifyMessage::Swap(BeamVerifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamVerifyMessage::InternalSwap(BeamVerifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_, other->signature_);
  swap(public_key_, other->public_key_);
}

::google::protobuf::Metadata BeamVerifyMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamGetPublicKey::InitAsDefaultInstance() {
}
class BeamGetPublicKey::HasBitSetters {
 public:
  static void set_has_show_display(BeamGetPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamGetPublicKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamGetPublicKey::BeamGetPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamGetPublicKey)
}
BeamGetPublicKey::BeamGetPublicKey(const BeamGetPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamGetPublicKey)
}

void BeamGetPublicKey::SharedCtor() {
  show_display_ = false;
}

BeamGetPublicKey::~BeamGetPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamGetPublicKey)
  SharedDtor();
}

void BeamGetPublicKey::SharedDtor() {
}

void BeamGetPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamGetPublicKey& BeamGetPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamGetPublicKey_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamGetPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamGetPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamGetPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamGetPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamGetPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamGetPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamGetPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamGetPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamGetPublicKey)
}

::google::protobuf::uint8* BeamGetPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamGetPublicKey)
  return target;
}

size_t BeamGetPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamGetPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool show_display = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamGetPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamGetPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<BeamGetPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamGetPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamGetPublicKey)
    MergeFrom(*source);
  }
}

void BeamGetPublicKey::MergeFrom(const BeamGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void BeamGetPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamGetPublicKey::CopyFrom(const BeamGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamGetPublicKey::IsInitialized() const {
  return true;
}

void BeamGetPublicKey::Swap(BeamGetPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamGetPublicKey::InternalSwap(BeamGetPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata BeamGetPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamPublicKey::InitAsDefaultInstance() {
}
class BeamPublicKey::HasBitSetters {
 public:
  static void set_has_pub_x(BeamPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pub_y(BeamPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamPublicKey::kPubXFieldNumber;
const int BeamPublicKey::kPubYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamPublicKey::BeamPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamPublicKey)
}
BeamPublicKey::BeamPublicKey(const BeamPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pub_x()) {
    pub_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_x_);
  }
  pub_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pub_y()) {
    pub_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_y_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamPublicKey)
}

void BeamPublicKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamPublicKey_messages_2dbeam_2eproto.base);
  pub_x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BeamPublicKey::~BeamPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamPublicKey)
  SharedDtor();
}

void BeamPublicKey::SharedDtor() {
  pub_x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamPublicKey& BeamPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamPublicKey_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pub_x_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pub_y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes pub_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pub_x();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes pub_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pub_y();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes pub_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pub_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes pub_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pub_x(), output);
  }

  // optional bytes pub_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pub_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamPublicKey)
}

::google::protobuf::uint8* BeamPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes pub_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pub_x(), target);
  }

  // optional bytes pub_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pub_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamPublicKey)
  return target;
}

size_t BeamPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes pub_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pub_x());
    }

    // optional bytes pub_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pub_y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<BeamPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamPublicKey)
    MergeFrom(*source);
  }
}

void BeamPublicKey::MergeFrom(const BeamPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pub_x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_x_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pub_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pub_y_);
    }
  }
}

void BeamPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamPublicKey::CopyFrom(const BeamPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamPublicKey::IsInitialized() const {
  return true;
}

void BeamPublicKey::Swap(BeamPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamPublicKey::InternalSwap(BeamPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pub_x_.Swap(&other->pub_x_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pub_y_.Swap(&other->pub_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BeamPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamGetOwnerKey::InitAsDefaultInstance() {
}
class BeamGetOwnerKey::HasBitSetters {
 public:
  static void set_has_show_display(BeamGetOwnerKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamGetOwnerKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamGetOwnerKey::BeamGetOwnerKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamGetOwnerKey)
}
BeamGetOwnerKey::BeamGetOwnerKey(const BeamGetOwnerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamGetOwnerKey)
}

void BeamGetOwnerKey::SharedCtor() {
  show_display_ = false;
}

BeamGetOwnerKey::~BeamGetOwnerKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamGetOwnerKey)
  SharedDtor();
}

void BeamGetOwnerKey::SharedDtor() {
}

void BeamGetOwnerKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamGetOwnerKey& BeamGetOwnerKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamGetOwnerKey_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamGetOwnerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamGetOwnerKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamGetOwnerKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamGetOwnerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show_display = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamGetOwnerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamGetOwnerKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamGetOwnerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamGetOwnerKey)
}

::google::protobuf::uint8* BeamGetOwnerKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamGetOwnerKey)
  return target;
}

size_t BeamGetOwnerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool show_display = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamGetOwnerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamGetOwnerKey* source =
      ::google::protobuf::DynamicCastToGenerated<BeamGetOwnerKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamGetOwnerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamGetOwnerKey)
    MergeFrom(*source);
  }
}

void BeamGetOwnerKey::MergeFrom(const BeamGetOwnerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void BeamGetOwnerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamGetOwnerKey::CopyFrom(const BeamGetOwnerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamGetOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamGetOwnerKey::IsInitialized() const {
  return true;
}

void BeamGetOwnerKey::Swap(BeamGetOwnerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamGetOwnerKey::InternalSwap(BeamGetOwnerKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata BeamGetOwnerKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamOwnerKey::InitAsDefaultInstance() {
}
class BeamOwnerKey::HasBitSetters {
 public:
  static void set_has_key(BeamOwnerKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamOwnerKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamOwnerKey::BeamOwnerKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamOwnerKey)
}
BeamOwnerKey::BeamOwnerKey(const BeamOwnerKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamOwnerKey)
}

void BeamOwnerKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamOwnerKey_messages_2dbeam_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BeamOwnerKey::~BeamOwnerKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamOwnerKey)
  SharedDtor();
}

void BeamOwnerKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamOwnerKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamOwnerKey& BeamOwnerKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamOwnerKey_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamOwnerKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamOwnerKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamOwnerKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamOwnerKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamOwnerKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamOwnerKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamOwnerKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamOwnerKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamOwnerKey)
}

::google::protobuf::uint8* BeamOwnerKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamOwnerKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamOwnerKey)
  return target;
}

size_t BeamOwnerKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamOwnerKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamOwnerKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamOwnerKey* source =
      ::google::protobuf::DynamicCastToGenerated<BeamOwnerKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamOwnerKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamOwnerKey)
    MergeFrom(*source);
  }
}

void BeamOwnerKey::MergeFrom(const BeamOwnerKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamOwnerKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _has_bits_[0] |= 0x00000001u;
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void BeamOwnerKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamOwnerKey::CopyFrom(const BeamOwnerKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamOwnerKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamOwnerKey::IsInitialized() const {
  return true;
}

void BeamOwnerKey::Swap(BeamOwnerKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamOwnerKey::InternalSwap(BeamOwnerKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BeamOwnerKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignSendTx_BeamPayment::InitAsDefaultInstance() {
}
class BeamSignSendTx_BeamPayment::HasBitSetters {
 public:
  static void set_has_amount(BeamSignSendTx_BeamPayment* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_destination(BeamSignSendTx_BeamPayment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_destination_tag(BeamSignSendTx_BeamPayment* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignSendTx_BeamPayment::kAmountFieldNumber;
const int BeamSignSendTx_BeamPayment::kDestinationFieldNumber;
const int BeamSignSendTx_BeamPayment::kDestinationTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignSendTx_BeamPayment::BeamSignSendTx_BeamPayment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
}
BeamSignSendTx_BeamPayment::BeamSignSendTx_BeamPayment(const BeamSignSendTx_BeamPayment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination()) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&destination_tag_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
}

void BeamSignSendTx_BeamPayment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignSendTx_BeamPayment_messages_2dbeam_2eproto.base);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_tag_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
}

BeamSignSendTx_BeamPayment::~BeamSignSendTx_BeamPayment() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  SharedDtor();
}

void BeamSignSendTx_BeamPayment::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamSignSendTx_BeamPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignSendTx_BeamPayment& BeamSignSendTx_BeamPayment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignSendTx_BeamPayment_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignSendTx_BeamPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    destination_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_tag_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignSendTx_BeamPayment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignSendTx_BeamPayment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string destination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination");
        object = msg->mutable_destination();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 destination_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_destination_tag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignSendTx_BeamPayment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string destination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 destination_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_destination_tag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignSendTx_BeamPayment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination(), output);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destination_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
}

::google::protobuf::uint8* BeamSignSendTx_BeamPayment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destination_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  return target;
}

size_t BeamSignSendTx_BeamPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string destination = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }

    // optional uint64 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 destination_tag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_tag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignSendTx_BeamPayment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignSendTx_BeamPayment* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignSendTx_BeamPayment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
    MergeFrom(*source);
  }
}

void BeamSignSendTx_BeamPayment::MergeFrom(const BeamSignSendTx_BeamPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      destination_tag_ = from.destination_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamSignSendTx_BeamPayment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignSendTx_BeamPayment::CopyFrom(const BeamSignSendTx_BeamPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignSendTx_BeamPayment::IsInitialized() const {
  return true;
}

void BeamSignSendTx_BeamPayment::Swap(BeamSignSendTx_BeamPayment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignSendTx_BeamPayment::InternalSwap(BeamSignSendTx_BeamPayment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(destination_tag_, other->destination_tag_);
}

::google::protobuf::Metadata BeamSignSendTx_BeamPayment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignSendTx::InitAsDefaultInstance() {
  ::hw::trezor::messages::beam::_BeamSignSendTx_default_instance_._instance.get_mutable()->payment_ = const_cast< ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment*>(
      ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment::internal_default_instance());
}
class BeamSignSendTx::HasBitSetters {
 public:
  static void set_has_fee(BeamSignSendTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flags(BeamSignSendTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment& payment(const BeamSignSendTx* msg);
  static void set_has_payment(BeamSignSendTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment&
BeamSignSendTx::HasBitSetters::payment(const BeamSignSendTx* msg) {
  return *msg->payment_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignSendTx::kAddressNFieldNumber;
const int BeamSignSendTx::kFeeFieldNumber;
const int BeamSignSendTx::kFlagsFieldNumber;
const int BeamSignSendTx::kPaymentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignSendTx::BeamSignSendTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignSendTx)
}
BeamSignSendTx::BeamSignSendTx(const BeamSignSendTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payment()) {
    payment_ = new ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment(*from.payment_);
  } else {
    payment_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignSendTx)
}

void BeamSignSendTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignSendTx_messages_2dbeam_2eproto.base);
  ::memset(&payment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&payment_)) + sizeof(flags_));
}

BeamSignSendTx::~BeamSignSendTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignSendTx)
  SharedDtor();
}

void BeamSignSendTx::SharedDtor() {
  if (this != internal_default_instance()) delete payment_;
}

void BeamSignSendTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignSendTx& BeamSignSendTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignSendTx_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignSendTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignSendTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(payment_ != nullptr);
    payment_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&fee_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignSendTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignSendTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint64 fee = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.beam.BeamSignSendTx.BeamPayment payment = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment::_InternalParse;
        object = msg->mutable_payment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignSendTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignSendTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fee(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.beam.BeamSignSendTx.BeamPayment payment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignSendTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignSendTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignSendTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignSendTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fee(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional .hw.trezor.messages.beam.BeamSignSendTx.BeamPayment payment = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::payment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignSendTx)
}

::google::protobuf::uint8* BeamSignSendTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignSendTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fee(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional .hw.trezor.messages.beam.BeamSignSendTx.BeamPayment payment = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::payment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignSendTx)
  return target;
}

size_t BeamSignSendTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignSendTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hw.trezor.messages.beam.BeamSignSendTx.BeamPayment payment = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payment_);
    }

    // optional uint64 fee = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignSendTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignSendTx)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignSendTx* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignSendTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignSendTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignSendTx)
    MergeFrom(*source);
  }
}

void BeamSignSendTx::MergeFrom(const BeamSignSendTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignSendTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_payment()->::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment::MergeFrom(from.payment());
    }
    if (cached_has_bits & 0x00000002u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamSignSendTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignSendTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignSendTx::CopyFrom(const BeamSignSendTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignSendTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignSendTx::IsInitialized() const {
  return true;
}

void BeamSignSendTx::Swap(BeamSignSendTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignSendTx::InternalSwap(BeamSignSendTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(payment_, other->payment_);
  swap(fee_, other->fee_);
  swap(flags_, other->flags_);
}

::google::protobuf::Metadata BeamSignSendTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignReceiveTx_BeamPayment::InitAsDefaultInstance() {
}
class BeamSignReceiveTx_BeamPayment::HasBitSetters {
 public:
  static void set_has_amount(BeamSignReceiveTx_BeamPayment* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_destination(BeamSignReceiveTx_BeamPayment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_destination_tag(BeamSignReceiveTx_BeamPayment* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignReceiveTx_BeamPayment::kAmountFieldNumber;
const int BeamSignReceiveTx_BeamPayment::kDestinationFieldNumber;
const int BeamSignReceiveTx_BeamPayment::kDestinationTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignReceiveTx_BeamPayment::BeamSignReceiveTx_BeamPayment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
}
BeamSignReceiveTx_BeamPayment::BeamSignReceiveTx_BeamPayment(const BeamSignReceiveTx_BeamPayment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination()) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&destination_tag_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
}

void BeamSignReceiveTx_BeamPayment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto.base);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_tag_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
}

BeamSignReceiveTx_BeamPayment::~BeamSignReceiveTx_BeamPayment() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  SharedDtor();
}

void BeamSignReceiveTx_BeamPayment::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamSignReceiveTx_BeamPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignReceiveTx_BeamPayment& BeamSignReceiveTx_BeamPayment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignReceiveTx_BeamPayment_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignReceiveTx_BeamPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    destination_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_tag_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignReceiveTx_BeamPayment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignReceiveTx_BeamPayment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string destination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination");
        object = msg->mutable_destination();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 destination_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_destination_tag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignReceiveTx_BeamPayment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string destination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 destination_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_destination_tag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignReceiveTx_BeamPayment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination(), output);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destination_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
}

::google::protobuf::uint8* BeamSignReceiveTx_BeamPayment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destination_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  return target;
}

size_t BeamSignReceiveTx_BeamPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string destination = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }

    // optional uint64 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 destination_tag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_tag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignReceiveTx_BeamPayment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignReceiveTx_BeamPayment* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignReceiveTx_BeamPayment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
    MergeFrom(*source);
  }
}

void BeamSignReceiveTx_BeamPayment::MergeFrom(const BeamSignReceiveTx_BeamPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      destination_tag_ = from.destination_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamSignReceiveTx_BeamPayment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignReceiveTx_BeamPayment::CopyFrom(const BeamSignReceiveTx_BeamPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignReceiveTx_BeamPayment::IsInitialized() const {
  return true;
}

void BeamSignReceiveTx_BeamPayment::Swap(BeamSignReceiveTx_BeamPayment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignReceiveTx_BeamPayment::InternalSwap(BeamSignReceiveTx_BeamPayment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(destination_tag_, other->destination_tag_);
}

::google::protobuf::Metadata BeamSignReceiveTx_BeamPayment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignReceiveTx::InitAsDefaultInstance() {
  ::hw::trezor::messages::beam::_BeamSignReceiveTx_default_instance_._instance.get_mutable()->payment_ = const_cast< ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment*>(
      ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment::internal_default_instance());
  ::hw::trezor::messages::beam::_BeamSignReceiveTx_default_instance_._instance.get_mutable()->signature_ = const_cast< ::hw::trezor::messages::beam::BeamSignature*>(
      ::hw::trezor::messages::beam::BeamSignature::internal_default_instance());
}
class BeamSignReceiveTx::HasBitSetters {
 public:
  static void set_has_fee(BeamSignReceiveTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_flags(BeamSignReceiveTx* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment& payment(const BeamSignReceiveTx* msg);
  static void set_has_payment(BeamSignReceiveTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::beam::BeamSignature& signature(const BeamSignReceiveTx* msg);
  static void set_has_signature(BeamSignReceiveTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment&
BeamSignReceiveTx::HasBitSetters::payment(const BeamSignReceiveTx* msg) {
  return *msg->payment_;
}
const ::hw::trezor::messages::beam::BeamSignature&
BeamSignReceiveTx::HasBitSetters::signature(const BeamSignReceiveTx* msg) {
  return *msg->signature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignReceiveTx::kAddressNFieldNumber;
const int BeamSignReceiveTx::kFeeFieldNumber;
const int BeamSignReceiveTx::kFlagsFieldNumber;
const int BeamSignReceiveTx::kPaymentFieldNumber;
const int BeamSignReceiveTx::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignReceiveTx::BeamSignReceiveTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignReceiveTx)
}
BeamSignReceiveTx::BeamSignReceiveTx(const BeamSignReceiveTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payment()) {
    payment_ = new ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment(*from.payment_);
  } else {
    payment_ = nullptr;
  }
  if (from.has_signature()) {
    signature_ = new ::hw::trezor::messages::beam::BeamSignature(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignReceiveTx)
}

void BeamSignReceiveTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignReceiveTx_messages_2dbeam_2eproto.base);
  ::memset(&payment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&payment_)) + sizeof(flags_));
}

BeamSignReceiveTx::~BeamSignReceiveTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignReceiveTx)
  SharedDtor();
}

void BeamSignReceiveTx::SharedDtor() {
  if (this != internal_default_instance()) delete payment_;
  if (this != internal_default_instance()) delete signature_;
}

void BeamSignReceiveTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignReceiveTx& BeamSignReceiveTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignReceiveTx_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignReceiveTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(payment_ != nullptr);
      payment_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&fee_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignReceiveTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignReceiveTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint64 fee = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment payment = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment::_InternalParse;
        object = msg->mutable_payment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.beam.BeamSignature signature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::beam::BeamSignature::_InternalParse;
        object = msg->mutable_signature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignReceiveTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fee(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment payment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.beam.BeamSignature signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignReceiveTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignReceiveTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignReceiveTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fee(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional .hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment payment = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::payment(this), output);
  }

  // optional .hw.trezor.messages.beam.BeamSignature signature = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::signature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignReceiveTx)
}

::google::protobuf::uint8* BeamSignReceiveTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fee(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional .hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment payment = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::payment(this), target);
  }

  // optional .hw.trezor.messages.beam.BeamSignature signature = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::signature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignReceiveTx)
  return target;
}

size_t BeamSignReceiveTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment payment = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payment_);
    }

    // optional .hw.trezor.messages.beam.BeamSignature signature = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional uint64 fee = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignReceiveTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignReceiveTx* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignReceiveTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignReceiveTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignReceiveTx)
    MergeFrom(*source);
  }
}

void BeamSignReceiveTx::MergeFrom(const BeamSignReceiveTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_payment()->::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment::MergeFrom(from.payment());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::hw::trezor::messages::beam::BeamSignature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeamSignReceiveTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignReceiveTx::CopyFrom(const BeamSignReceiveTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignReceiveTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignReceiveTx::IsInitialized() const {
  return true;
}

void BeamSignReceiveTx::Swap(BeamSignReceiveTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignReceiveTx::InternalSwap(BeamSignReceiveTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(payment_, other->payment_);
  swap(signature_, other->signature_);
  swap(fee_, other->fee_);
  swap(flags_, other->flags_);
}

::google::protobuf::Metadata BeamSignReceiveTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BeamSignedTx::InitAsDefaultInstance() {
}
class BeamSignedTx::HasBitSetters {
 public:
  static void set_has_signature(BeamSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_serialized_tx(BeamSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeamSignedTx::kSignatureFieldNumber;
const int BeamSignedTx::kSerializedTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeamSignedTx::BeamSignedTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.beam.BeamSignedTx)
}
BeamSignedTx::BeamSignedTx(const BeamSignedTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_tx()) {
    serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.beam.BeamSignedTx)
}

void BeamSignedTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BeamSignedTx_messages_2dbeam_2eproto.base);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BeamSignedTx::~BeamSignedTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.beam.BeamSignedTx)
  SharedDtor();
}

void BeamSignedTx::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeamSignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BeamSignedTx& BeamSignedTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BeamSignedTx_messages_2dbeam_2eproto.base);
  return *internal_default_instance();
}


void BeamSignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.beam.BeamSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_tx_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BeamSignedTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BeamSignedTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes serialized_tx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialized_tx();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BeamSignedTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.beam.BeamSignedTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_tx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.beam.BeamSignedTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.beam.BeamSignedTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BeamSignedTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.beam.BeamSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialized_tx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.beam.BeamSignedTx)
}

::google::protobuf::uint8* BeamSignedTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.beam.BeamSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_tx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.beam.BeamSignedTx)
  return target;
}

size_t BeamSignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.beam.BeamSignedTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes serialized_tx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_tx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BeamSignedTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.beam.BeamSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  const BeamSignedTx* source =
      ::google::protobuf::DynamicCastToGenerated<BeamSignedTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.beam.BeamSignedTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.beam.BeamSignedTx)
    MergeFrom(*source);
  }
}

void BeamSignedTx::MergeFrom(const BeamSignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.beam.BeamSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
    }
  }
}

void BeamSignedTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.beam.BeamSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSignedTx::CopyFrom(const BeamSignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.beam.BeamSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSignedTx::IsInitialized() const {
  return true;
}

void BeamSignedTx::Swap(BeamSignedTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeamSignedTx::InternalSwap(BeamSignedTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_tx_.Swap(&other->serialized_tx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BeamSignedTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbeam_2eproto);
  return ::file_level_metadata_messages_2dbeam_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace beam
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamKeyIDV* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamKeyIDV >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamKeyIDV >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamGenerateKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamGenerateKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamGenerateKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamGenerateNonce* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamGenerateNonce >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamGenerateNonce >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamECCImage* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamECCImage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamECCImage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignature* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignature >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamDisplayMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamDisplayMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamDisplayMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamConfirmResponseMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamConfirmResponseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamConfirmResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignedMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamVerifyMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamVerifyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamVerifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamGetPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamGetPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamGetPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamGetOwnerKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamGetOwnerKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamGetOwnerKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamOwnerKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamOwnerKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamOwnerKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignSendTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignSendTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignSendTx >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignReceiveTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignReceiveTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignReceiveTx >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::beam::BeamSignedTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::beam::BeamSignedTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::beam::BeamSignedTx >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
