// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-lisk.proto

#include "messages-lisk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2dlisk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dlisk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dlisk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dlisk_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dlisk_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace lisk {
class LiskGetAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskGetAddress> _instance;
} _LiskGetAddress_default_instance_;
class LiskAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskAddress> _instance;
} _LiskAddress_default_instance_;
class LiskGetPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskGetPublicKey> _instance;
} _LiskGetPublicKey_default_instance_;
class LiskPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskPublicKey> _instance;
} _LiskPublicKey_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType> _instance;
} _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType> _instance;
} _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType> _instance;
} _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAssetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset> _instance;
} _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_;
class LiskSignTx_LiskTransactionCommonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignTx_LiskTransactionCommon> _instance;
} _LiskSignTx_LiskTransactionCommon_default_instance_;
class LiskSignTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignTx> _instance;
} _LiskSignTx_default_instance_;
class LiskSignedTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignedTx> _instance;
} _LiskSignedTx_default_instance_;
class LiskSignMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskSignMessage> _instance;
} _LiskSignMessage_default_instance_;
class LiskMessageSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskMessageSignature> _instance;
} _LiskMessageSignature_default_instance_;
class LiskVerifyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LiskVerifyMessage> _instance;
} _LiskVerifyMessage_default_instance_;
}  // namespace lisk
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsLiskGetAddress_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskGetAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskGetAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskGetAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskGetAddress_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskGetAddress_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskAddress_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskAddress_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskAddress_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskGetPublicKey_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskGetPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskGetPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskGetPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskGetPublicKey_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskGetPublicKey_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskPublicKey_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskPublicKey_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskPublicKey_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto}, {
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto.base,
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto.base,
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto.base,}};

static void InitDefaultsLiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto}, {
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto.base,}};

static void InitDefaultsLiskSignTx_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignTx_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LiskSignTx_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLiskSignTx_messages_2dlisk_2eproto}, {
      &scc_info_LiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto.base,}};

static void InitDefaultsLiskSignedTx_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignedTx_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignedTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignedTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignedTx_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskSignedTx_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskSignMessage_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskSignMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskSignMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskSignMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskSignMessage_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskSignMessage_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskMessageSignature_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskMessageSignature_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskMessageSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskMessageSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskMessageSignature_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskMessageSignature_messages_2dlisk_2eproto}, {}};

static void InitDefaultsLiskVerifyMessage_messages_2dlisk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::lisk::_LiskVerifyMessage_default_instance_;
    new (ptr) ::hw::trezor::messages::lisk::LiskVerifyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::lisk::LiskVerifyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LiskVerifyMessage_messages_2dlisk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLiskVerifyMessage_messages_2dlisk_2eproto}, {}};

void InitDefaults_messages_2dlisk_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LiskGetAddress_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskAddress_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskGetPublicKey_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskPublicKey_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignTx_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignedTx_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskSignMessage_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskMessageSignature_messages_2dlisk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LiskVerifyMessage_messages_2dlisk_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2dlisk_2eproto[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_messages_2dlisk_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2dlisk_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2dlisk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetAddress, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetAddress, show_display_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskAddress, address_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetPublicKey, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskGetPublicKey, show_display_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskPublicKey, public_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType, public_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType, username_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType, min_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType, life_time_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType, keys_group_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset, delegate_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset, votes_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset, multisignature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset, data_),
  1,
  2,
  ~0u,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, recipient_id_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, sender_public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, requester_public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, timestamp_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon, asset_),
  7,
  5,
  6,
  0,
  1,
  2,
  3,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignTx, transaction_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignedTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignedTx, signature_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignMessage, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskSignMessage, message_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskMessageSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskMessageSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskMessageSignature, public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskMessageSignature, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskVerifyMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskVerifyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskVerifyMessage, public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskVerifyMessage, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::lisk::LiskVerifyMessage, message_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hw::trezor::messages::lisk::LiskGetAddress)},
  { 9, 15, sizeof(::hw::trezor::messages::lisk::LiskAddress)},
  { 16, 23, sizeof(::hw::trezor::messages::lisk::LiskGetPublicKey)},
  { 25, 31, sizeof(::hw::trezor::messages::lisk::LiskPublicKey)},
  { 32, 38, sizeof(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType)},
  { 39, 45, sizeof(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType)},
  { 46, 54, sizeof(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType)},
  { 57, 67, sizeof(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset)},
  { 72, 86, sizeof(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon)},
  { 95, 102, sizeof(::hw::trezor::messages::lisk::LiskSignTx)},
  { 104, 110, sizeof(::hw::trezor::messages::lisk::LiskSignedTx)},
  { 111, 118, sizeof(::hw::trezor::messages::lisk::LiskSignMessage)},
  { 120, 127, sizeof(::hw::trezor::messages::lisk::LiskMessageSignature)},
  { 129, 137, sizeof(::hw::trezor::messages::lisk::LiskVerifyMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskGetAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskGetPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignedTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskSignMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskMessageSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::lisk::_LiskVerifyMessage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2dlisk_2eproto = {
  {}, AddDescriptors_messages_2dlisk_2eproto, "messages-lisk.proto", schemas,
  file_default_instances, TableStruct_messages_2dlisk_2eproto::offsets,
  file_level_metadata_messages_2dlisk_2eproto, 14, file_level_enum_descriptors_messages_2dlisk_2eproto, file_level_service_descriptors_messages_2dlisk_2eproto,
};

const char descriptor_table_protodef_messages_2dlisk_2eproto[] =
  "\n\023messages-lisk.proto\022\027hw.trezor.message"
  "s.lisk\"9\n\016LiskGetAddress\022\021\n\taddress_n\030\001 "
  "\003(\r\022\024\n\014show_display\030\002 \001(\010\"\036\n\013LiskAddress"
  "\022\017\n\007address\030\001 \001(\t\";\n\020LiskGetPublicKey\022\021\n"
  "\taddress_n\030\001 \003(\r\022\024\n\014show_display\030\002 \001(\010\"#"
  "\n\rLiskPublicKey\022\022\n\npublic_key\030\001 \001(\014\"\335\t\n\n"
  "LiskSignTx\022\021\n\taddress_n\030\001 \003(\r\022N\n\013transac"
  "tion\030\002 \001(\01329.hw.trezor.messages.lisk.Lis"
  "kSignTx.LiskTransactionCommon\032\353\010\n\025LiskTr"
  "ansactionCommon\022[\n\004type\030\001 \001(\0162M.hw.trezo"
  "r.messages.lisk.LiskSignTx.LiskTransacti"
  "onCommon.LiskTransactionType\022\021\n\006amount\030\002"
  " \001(\004:\0010\022\013\n\003fee\030\003 \001(\004\022\024\n\014recipient_id\030\004 \001"
  "(\t\022\031\n\021sender_public_key\030\005 \001(\014\022\034\n\024request"
  "er_public_key\030\006 \001(\014\022\021\n\tsignature\030\007 \001(\014\022\021"
  "\n\ttimestamp\030\010 \001(\r\022]\n\005asset\030\t \001(\0132N.hw.tr"
  "ezor.messages.lisk.LiskSignTx.LiskTransa"
  "ctionCommon.LiskTransactionAsset\032\267\004\n\024Lis"
  "kTransactionAsset\022s\n\tsignature\030\001 \001(\0132`.h"
  "w.trezor.messages.lisk.LiskSignTx.LiskTr"
  "ansactionCommon.LiskTransactionAsset.Lis"
  "kSignatureType\022q\n\010delegate\030\002 \001(\0132_.hw.tr"
  "ezor.messages.lisk.LiskSignTx.LiskTransa"
  "ctionCommon.LiskTransactionAsset.LiskDel"
  "egateType\022\r\n\005votes\030\003 \003(\t\022}\n\016multisignatu"
  "re\030\004 \001(\0132e.hw.trezor.messages.lisk.LiskS"
  "ignTx.LiskTransactionCommon.LiskTransact"
  "ionAsset.LiskMultisignatureType\022\014\n\004data\030"
  "\005 \001(\t\032\'\n\021LiskSignatureType\022\022\n\npublic_key"
  "\030\001 \001(\014\032$\n\020LiskDelegateType\022\020\n\010username\030\001"
  " \001(\t\032L\n\026LiskMultisignatureType\022\013\n\003min\030\001 "
  "\001(\r\022\021\n\tlife_time\030\002 \001(\r\022\022\n\nkeys_group\030\003 \003"
  "(\t\"\306\001\n\023LiskTransactionType\022\014\n\010Transfer\020\000"
  "\022\034\n\030RegisterSecondPassphrase\020\001\022\024\n\020Regist"
  "erDelegate\020\002\022\r\n\tCastVotes\020\003\022!\n\035RegisterM"
  "ultisignatureAccount\020\004\022\016\n\nCreateDapp\020\005\022\024"
  "\n\020TransferIntoDapp\020\006\022\025\n\021TransferOutOfDap"
  "p\020\007\"!\n\014LiskSignedTx\022\021\n\tsignature\030\001 \001(\014\"5"
  "\n\017LiskSignMessage\022\021\n\taddress_n\030\001 \003(\r\022\017\n\007"
  "message\030\002 \001(\014\"=\n\024LiskMessageSignature\022\022\n"
  "\npublic_key\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"K\n\021"
  "LiskVerifyMessage\022\022\n\npublic_key\030\001 \001(\014\022\021\n"
  "\tsignature\030\002 \001(\014\022\017\n\007message\030\003 \001(\014B8\n#com"
  ".satoshilabs.trezor.lib.protobufB\021Trezor"
  "MessageLisk"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2dlisk_2eproto = {
  false, InitDefaults_messages_2dlisk_2eproto, 
  descriptor_table_protodef_messages_2dlisk_2eproto,
  "messages-lisk.proto", &assign_descriptors_table_messages_2dlisk_2eproto, 1771,
};

void AddDescriptors_messages_2dlisk_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2dlisk_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dlisk_2eproto = []() { AddDescriptors_messages_2dlisk_2eproto(); return true; }();
namespace hw {
namespace trezor {
namespace messages {
namespace lisk {
const ::google::protobuf::EnumDescriptor* LiskSignTx_LiskTransactionCommon_LiskTransactionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_messages_2dlisk_2eproto);
  return file_level_enum_descriptors_messages_2dlisk_2eproto[0];
}
bool LiskSignTx_LiskTransactionCommon_LiskTransactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::Transfer;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::RegisterSecondPassphrase;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::RegisterDelegate;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::CastVotes;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::RegisterMultisignatureAccount;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::CreateDapp;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::TransferIntoDapp;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::TransferOutOfDapp;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::LiskTransactionType_MIN;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::LiskTransactionType_MAX;
const int LiskSignTx_LiskTransactionCommon::LiskTransactionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LiskGetAddress::InitAsDefaultInstance() {
}
class LiskGetAddress::HasBitSetters {
 public:
  static void set_has_show_display(LiskGetAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskGetAddress::kAddressNFieldNumber;
const int LiskGetAddress::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskGetAddress::LiskGetAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskGetAddress)
}
LiskGetAddress::LiskGetAddress(const LiskGetAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskGetAddress)
}

void LiskGetAddress::SharedCtor() {
  show_display_ = false;
}

LiskGetAddress::~LiskGetAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskGetAddress)
  SharedDtor();
}

void LiskGetAddress::SharedDtor() {
}

void LiskGetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskGetAddress& LiskGetAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskGetAddress_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskGetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskGetAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskGetAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskGetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskGetAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskGetAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskGetAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskGetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskGetAddress)
}

::google::protobuf::uint8* LiskGetAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskGetAddress)
  return target;
}

size_t LiskGetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskGetAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskGetAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskGetAddress* source =
      ::google::protobuf::DynamicCastToGenerated<LiskGetAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskGetAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskGetAddress)
    MergeFrom(*source);
  }
}

void LiskGetAddress::MergeFrom(const LiskGetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void LiskGetAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskGetAddress::CopyFrom(const LiskGetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskGetAddress::IsInitialized() const {
  return true;
}

void LiskGetAddress::Swap(LiskGetAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskGetAddress::InternalSwap(LiskGetAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata LiskGetAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskAddress::InitAsDefaultInstance() {
}
class LiskAddress::HasBitSetters {
 public:
  static void set_has_address(LiskAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskAddress::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskAddress::LiskAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskAddress)
}
LiskAddress::LiskAddress(const LiskAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskAddress)
}

void LiskAddress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskAddress_messages_2dlisk_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskAddress::~LiskAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskAddress)
  SharedDtor();
}

void LiskAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskAddress& LiskAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskAddress_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.lisk.LiskAddress.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.lisk.LiskAddress.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskAddress)
}

::google::protobuf::uint8* LiskAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskAddress)
  return target;
}

size_t LiskAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string address = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskAddress* source =
      ::google::protobuf::DynamicCastToGenerated<LiskAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskAddress)
    MergeFrom(*source);
  }
}

void LiskAddress::MergeFrom(const LiskAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _has_bits_[0] |= 0x00000001u;
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void LiskAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskAddress::CopyFrom(const LiskAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskAddress::IsInitialized() const {
  return true;
}

void LiskAddress::Swap(LiskAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskAddress::InternalSwap(LiskAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskGetPublicKey::InitAsDefaultInstance() {
}
class LiskGetPublicKey::HasBitSetters {
 public:
  static void set_has_show_display(LiskGetPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskGetPublicKey::kAddressNFieldNumber;
const int LiskGetPublicKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskGetPublicKey::LiskGetPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskGetPublicKey)
}
LiskGetPublicKey::LiskGetPublicKey(const LiskGetPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskGetPublicKey)
}

void LiskGetPublicKey::SharedCtor() {
  show_display_ = false;
}

LiskGetPublicKey::~LiskGetPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskGetPublicKey)
  SharedDtor();
}

void LiskGetPublicKey::SharedDtor() {
}

void LiskGetPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskGetPublicKey& LiskGetPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskGetPublicKey_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskGetPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskGetPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskGetPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskGetPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskGetPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskGetPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskGetPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskGetPublicKey)
}

::google::protobuf::uint8* LiskGetPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskGetPublicKey)
  return target;
}

size_t LiskGetPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskGetPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskGetPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<LiskGetPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskGetPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskGetPublicKey)
    MergeFrom(*source);
  }
}

void LiskGetPublicKey::MergeFrom(const LiskGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void LiskGetPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskGetPublicKey::CopyFrom(const LiskGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskGetPublicKey::IsInitialized() const {
  return true;
}

void LiskGetPublicKey::Swap(LiskGetPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskGetPublicKey::InternalSwap(LiskGetPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata LiskGetPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskPublicKey::InitAsDefaultInstance() {
}
class LiskPublicKey::HasBitSetters {
 public:
  static void set_has_public_key(LiskPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskPublicKey::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskPublicKey::LiskPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskPublicKey)
}
LiskPublicKey::LiskPublicKey(const LiskPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskPublicKey)
}

void LiskPublicKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskPublicKey_messages_2dlisk_2eproto.base);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskPublicKey::~LiskPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskPublicKey)
  SharedDtor();
}

void LiskPublicKey::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskPublicKey& LiskPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskPublicKey_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    public_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskPublicKey)
}

::google::protobuf::uint8* LiskPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskPublicKey)
  return target;
}

size_t LiskPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes public_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<LiskPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskPublicKey)
    MergeFrom(*source);
  }
}

void LiskPublicKey::MergeFrom(const LiskPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _has_bits_[0] |= 0x00000001u;
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void LiskPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskPublicKey::CopyFrom(const LiskPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskPublicKey::IsInitialized() const {
  return true;
}

void LiskPublicKey::Swap(LiskPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskPublicKey::InternalSwap(LiskPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::InitAsDefaultInstance() {
}
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::HasBitSetters {
 public:
  static void set_has_public_key(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
}
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto.base);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  SharedDtor();
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    public_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
}

::google::protobuf::uint8* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  return target;
}

size_t LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes public_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
    MergeFrom(*source);
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _has_bits_[0] |= 0x00000001u;
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::IsInitialized() const {
  return true;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::InitAsDefaultInstance() {
}
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::HasBitSetters {
 public:
  static void set_has_username(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
}
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto.base);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  SharedDtor();
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string username = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
}

::google::protobuf::uint8* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string username = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  return target;
}

size_t LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string username = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
    MergeFrom(*source);
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_username()) {
    _has_bits_[0] |= 0x00000001u;
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::IsInitialized() const {
  return true;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::InitAsDefaultInstance() {
}
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::HasBitSetters {
 public:
  static void set_has_min(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_life_time(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::kMinFieldNumber;
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::kLifeTimeFieldNumber;
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::kKeysGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
}
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keys_group_(from.keys_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&life_time_) -
    reinterpret_cast<char*>(&min_)) + sizeof(life_time_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto.base);
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&life_time_) -
      reinterpret_cast<char*>(&min_)) + sizeof(life_time_));
}

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  SharedDtor();
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::SharedDtor() {
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_group_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&life_time_) -
        reinterpret_cast<char*>(&min_)) + sizeof(life_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 min = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 life_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_life_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string keys_group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group");
          object = msg->add_keys_group();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 life_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_life_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string keys_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys_group(this->keys_group_size() - 1).data(),
            static_cast<int>(this->keys_group(this->keys_group_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min(), output);
  }

  // optional uint32 life_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->life_time(), output);
  }

  // repeated string keys_group = 3;
  for (int i = 0, n = this->keys_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys_group(i).data(), static_cast<int>(this->keys_group(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keys_group(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
}

::google::protobuf::uint8* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min(), target);
  }

  // optional uint32 life_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->life_time(), target);
  }

  // repeated string keys_group = 3;
  for (int i = 0, n = this->keys_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys_group(i).data(), static_cast<int>(this->keys_group(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keys_group(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  return target;
}

size_t LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys_group = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_group_size());
  for (int i = 0, n = this->keys_group_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys_group(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 life_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
    MergeFrom(*source);
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_group_.MergeFrom(from.keys_group_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      life_time_ = from.life_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::IsInitialized() const {
  return true;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_group_.InternalSwap(CastToBase(&other->keys_group_));
  swap(min_, other->min_);
  swap(life_time_, other->life_time_);
}

::google::protobuf::Metadata LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::InitAsDefaultInstance() {
  ::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_._instance.get_mutable()->signature_ = const_cast< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType*>(
      ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::internal_default_instance());
  ::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_._instance.get_mutable()->delegate_ = const_cast< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType*>(
      ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::internal_default_instance());
  ::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_._instance.get_mutable()->multisignature_ = const_cast< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType*>(
      ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::internal_default_instance());
}
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::HasBitSetters {
 public:
  static const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& signature(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg);
  static void set_has_signature(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& delegate(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg);
  static void set_has_delegate(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& multisignature(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg);
  static void set_has_multisignature(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType&
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::HasBitSetters::signature(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg) {
  return *msg->signature_;
}
const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType&
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::HasBitSetters::delegate(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg) {
  return *msg->delegate_;
}
const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType&
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::HasBitSetters::multisignature(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* msg) {
  return *msg->multisignature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::kSignatureFieldNumber;
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::kDelegateFieldNumber;
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::kVotesFieldNumber;
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::kMultisignatureFieldNumber;
const int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
}
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_signature()) {
    signature_ = new ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from.has_delegate()) {
    delegate_ = new ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType(*from.delegate_);
  } else {
    delegate_ = nullptr;
  }
  if (from.has_multisignature()) {
    multisignature_ = new ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType(*from.multisignature_);
  } else {
    multisignature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multisignature_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(multisignature_));
}

LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  SharedDtor();
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete delegate_;
  if (this != internal_default_instance()) delete multisignature_;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(delegate_ != nullptr);
      delegate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(multisignature_ != nullptr);
      multisignature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::_InternalParse;
        object = msg->mutable_signature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::_InternalParse;
        object = msg->mutable_delegate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string votes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes");
          object = msg->add_votes();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::_InternalParse;
        object = msg->mutable_multisignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delegate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string votes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_votes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->votes(this->votes_size() - 1).data(),
            static_cast<int>(this->votes(this->votes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multisignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::signature(this), output);
  }

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::delegate(this), output);
  }

  // repeated string votes = 3;
  for (int i = 0, n = this->votes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->votes(i).data(), static_cast<int>(this->votes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->votes(i), output);
  }

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::multisignature(this), output);
  }

  // optional string data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
}

::google::protobuf::uint8* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::signature(this), target);
  }

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::delegate(this), target);
  }

  // repeated string votes = 3;
  for (int i = 0, n = this->votes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->votes(i).data(), static_cast<int>(this->votes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->votes(i), target);
  }

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::multisignature(this), target);
  }

  // optional string data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  return target;
}

size_t LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string votes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->votes_size());
  for (int i = 0, n = this->votes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->votes(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delegate_);
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *multisignature_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
    MergeFrom(*source);
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signature()->::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_delegate()->::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::MergeFrom(from.delegate());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_multisignature()->::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::MergeFrom(from.multisignature());
    }
  }
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::IsInitialized() const {
  return true;
}

void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  votes_.InternalSwap(CastToBase(&other->votes_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_, other->signature_);
  swap(delegate_, other->delegate_);
  swap(multisignature_, other->multisignature_);
}

::google::protobuf::Metadata LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignTx_LiskTransactionCommon::InitAsDefaultInstance() {
  ::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_default_instance_._instance.get_mutable()->asset_ = const_cast< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset*>(
      ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::internal_default_instance());
}
class LiskSignTx_LiskTransactionCommon::HasBitSetters {
 public:
  static void set_has_type(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_amount(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_fee(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_recipient_id(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sender_public_key(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_requester_public_key(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_signature(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_timestamp(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& asset(const LiskSignTx_LiskTransactionCommon* msg);
  static void set_has_asset(LiskSignTx_LiskTransactionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset&
LiskSignTx_LiskTransactionCommon::HasBitSetters::asset(const LiskSignTx_LiskTransactionCommon* msg) {
  return *msg->asset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignTx_LiskTransactionCommon::kTypeFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kAmountFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kFeeFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kRecipientIdFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kSenderPublicKeyFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kRequesterPublicKeyFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kSignatureFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kTimestampFieldNumber;
const int LiskSignTx_LiskTransactionCommon::kAssetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignTx_LiskTransactionCommon::LiskSignTx_LiskTransactionCommon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
}
LiskSignTx_LiskTransactionCommon::LiskSignTx_LiskTransactionCommon(const LiskSignTx_LiskTransactionCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recipient_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recipient_id()) {
    recipient_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
  }
  sender_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_public_key()) {
    sender_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
  }
  requester_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requester_public_key()) {
    requester_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requester_public_key_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_asset()) {
    asset_ = new ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset(*from.asset_);
  } else {
    asset_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
}

void LiskSignTx_LiskTransactionCommon::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto.base);
  recipient_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requester_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&asset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&asset_)) + sizeof(timestamp_));
}

LiskSignTx_LiskTransactionCommon::~LiskSignTx_LiskTransactionCommon() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  SharedDtor();
}

void LiskSignTx_LiskTransactionCommon::SharedDtor() {
  recipient_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requester_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asset_;
}

void LiskSignTx_LiskTransactionCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignTx_LiskTransactionCommon& LiskSignTx_LiskTransactionCommon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignTx_LiskTransactionCommon_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignTx_LiskTransactionCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      recipient_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sender_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      requester_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(asset_ != nullptr);
      asset_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(type_));
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignTx_LiskTransactionCommon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignTx_LiskTransactionCommon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 amount = 2 [default = 0];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 fee = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string recipient_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id");
        object = msg->mutable_recipient_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes sender_public_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sender_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes requester_public_key = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_requester_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::_InternalParse;
        object = msg->mutable_asset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignTx_LiskTransactionCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType_IsValid(value)) {
            set_type(static_cast< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fee = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_fee(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recipient_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recipient_id().data(), static_cast<int>(this->recipient_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sender_public_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes requester_public_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_requester_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignTx_LiskTransactionCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 amount = 2 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional uint64 fee = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fee(), output);
  }

  // optional string recipient_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipient_id().data(), static_cast<int>(this->recipient_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->recipient_id(), output);
  }

  // optional bytes sender_public_key = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sender_public_key(), output);
  }

  // optional bytes requester_public_key = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->requester_public_key(), output);
  }

  // optional bytes signature = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->signature(), output);
  }

  // optional uint32 timestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timestamp(), output);
  }

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::asset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
}

::google::protobuf::uint8* LiskSignTx_LiskTransactionCommon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 amount = 2 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // optional uint64 fee = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fee(), target);
  }

  // optional string recipient_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipient_id().data(), static_cast<int>(this->recipient_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recipient_id(), target);
  }

  // optional bytes sender_public_key = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sender_public_key(), target);
  }

  // optional bytes requester_public_key = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->requester_public_key(), target);
  }

  // optional bytes signature = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->signature(), target);
  }

  // optional uint32 timestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timestamp(), target);
  }

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::asset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  return target;
}

size_t LiskSignTx_LiskTransactionCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string recipient_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recipient_id());
    }

    // optional bytes sender_public_key = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sender_public_key());
    }

    // optional bytes requester_public_key = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->requester_public_key());
    }

    // optional bytes signature = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *asset_);
    }

    // optional uint64 amount = 2 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 fee = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // optional uint32 timestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignTx_LiskTransactionCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignTx_LiskTransactionCommon* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignTx_LiskTransactionCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
    MergeFrom(*source);
  }
}

void LiskSignTx_LiskTransactionCommon::MergeFrom(const LiskSignTx_LiskTransactionCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      recipient_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sender_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      requester_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requester_public_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_asset()->::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::MergeFrom(from.asset());
    }
    if (cached_has_bits & 0x00000020u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp(from.timestamp());
  }
}

void LiskSignTx_LiskTransactionCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignTx_LiskTransactionCommon::CopyFrom(const LiskSignTx_LiskTransactionCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignTx_LiskTransactionCommon::IsInitialized() const {
  return true;
}

void LiskSignTx_LiskTransactionCommon::Swap(LiskSignTx_LiskTransactionCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignTx_LiskTransactionCommon::InternalSwap(LiskSignTx_LiskTransactionCommon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recipient_id_.Swap(&other->recipient_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_public_key_.Swap(&other->sender_public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  requester_public_key_.Swap(&other->requester_public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(asset_, other->asset_);
  swap(amount_, other->amount_);
  swap(fee_, other->fee_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata LiskSignTx_LiskTransactionCommon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignTx::InitAsDefaultInstance() {
  ::hw::trezor::messages::lisk::_LiskSignTx_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon*>(
      ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon::internal_default_instance());
}
class LiskSignTx::HasBitSetters {
 public:
  static const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon& transaction(const LiskSignTx* msg);
  static void set_has_transaction(LiskSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon&
LiskSignTx::HasBitSetters::transaction(const LiskSignTx* msg) {
  return *msg->transaction_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignTx::kAddressNFieldNumber;
const int LiskSignTx::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignTx::LiskSignTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignTx)
}
LiskSignTx::LiskSignTx(const LiskSignTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignTx)
}

void LiskSignTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignTx_messages_2dlisk_2eproto.base);
  transaction_ = nullptr;
}

LiskSignTx::~LiskSignTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignTx)
  SharedDtor();
}

void LiskSignTx::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_;
}

void LiskSignTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignTx& LiskSignTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignTx_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(transaction_ != nullptr);
    transaction_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon::_InternalParse;
        object = msg->mutable_transaction();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::transaction(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignTx)
}

::google::protobuf::uint8* LiskSignTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::transaction(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignTx)
  return target;
}

size_t LiskSignTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignTx* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignTx)
    MergeFrom(*source);
  }
}

void LiskSignTx::MergeFrom(const LiskSignTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_transaction()) {
    mutable_transaction()->::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon::MergeFrom(from.transaction());
  }
}

void LiskSignTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignTx::CopyFrom(const LiskSignTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignTx::IsInitialized() const {
  return true;
}

void LiskSignTx::Swap(LiskSignTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignTx::InternalSwap(LiskSignTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(transaction_, other->transaction_);
}

::google::protobuf::Metadata LiskSignTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignedTx::InitAsDefaultInstance() {
}
class LiskSignedTx::HasBitSetters {
 public:
  static void set_has_signature(LiskSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignedTx::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignedTx::LiskSignedTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignedTx)
}
LiskSignedTx::LiskSignedTx(const LiskSignedTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignedTx)
}

void LiskSignedTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignedTx_messages_2dlisk_2eproto.base);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskSignedTx::~LiskSignedTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignedTx)
  SharedDtor();
}

void LiskSignedTx::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskSignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignedTx& LiskSignedTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignedTx_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignedTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignedTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignedTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignedTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignedTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignedTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignedTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignedTx)
}

::google::protobuf::uint8* LiskSignedTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignedTx)
  return target;
}

size_t LiskSignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignedTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes signature = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignedTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignedTx* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignedTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignedTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignedTx)
    MergeFrom(*source);
  }
}

void LiskSignedTx::MergeFrom(const LiskSignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    _has_bits_[0] |= 0x00000001u;
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void LiskSignedTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignedTx::CopyFrom(const LiskSignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignedTx::IsInitialized() const {
  return true;
}

void LiskSignedTx::Swap(LiskSignedTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignedTx::InternalSwap(LiskSignedTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskSignedTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskSignMessage::InitAsDefaultInstance() {
}
class LiskSignMessage::HasBitSetters {
 public:
  static void set_has_message(LiskSignMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskSignMessage::kAddressNFieldNumber;
const int LiskSignMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskSignMessage::LiskSignMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskSignMessage)
}
LiskSignMessage::LiskSignMessage(const LiskSignMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskSignMessage)
}

void LiskSignMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskSignMessage_messages_2dlisk_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskSignMessage::~LiskSignMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskSignMessage)
  SharedDtor();
}

void LiskSignMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskSignMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskSignMessage& LiskSignMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskSignMessage_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskSignMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskSignMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskSignMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bytes message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskSignMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskSignMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskSignMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskSignMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskSignMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskSignMessage)
}

::google::protobuf::uint8* LiskSignMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskSignMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bytes message = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskSignMessage)
  return target;
}

size_t LiskSignMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskSignMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bytes message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskSignMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskSignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskSignMessage* source =
      ::google::protobuf::DynamicCastToGenerated<LiskSignMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskSignMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskSignMessage)
    MergeFrom(*source);
  }
}

void LiskSignMessage::MergeFrom(const LiskSignMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskSignMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void LiskSignMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskSignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskSignMessage::CopyFrom(const LiskSignMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskSignMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskSignMessage::IsInitialized() const {
  return true;
}

void LiskSignMessage::Swap(LiskSignMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskSignMessage::InternalSwap(LiskSignMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskSignMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskMessageSignature::InitAsDefaultInstance() {
}
class LiskMessageSignature::HasBitSetters {
 public:
  static void set_has_public_key(LiskMessageSignature* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_signature(LiskMessageSignature* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskMessageSignature::kPublicKeyFieldNumber;
const int LiskMessageSignature::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskMessageSignature::LiskMessageSignature()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskMessageSignature)
}
LiskMessageSignature::LiskMessageSignature(const LiskMessageSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskMessageSignature)
}

void LiskMessageSignature::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskMessageSignature_messages_2dlisk_2eproto.base);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskMessageSignature::~LiskMessageSignature() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskMessageSignature)
  SharedDtor();
}

void LiskMessageSignature::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskMessageSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskMessageSignature& LiskMessageSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskMessageSignature_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskMessageSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskMessageSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskMessageSignature::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskMessageSignature*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskMessageSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskMessageSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskMessageSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskMessageSignature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskMessageSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskMessageSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskMessageSignature)
}

::google::protobuf::uint8* LiskMessageSignature::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskMessageSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskMessageSignature)
  return target;
}

size_t LiskMessageSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskMessageSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes public_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskMessageSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskMessageSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskMessageSignature* source =
      ::google::protobuf::DynamicCastToGenerated<LiskMessageSignature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskMessageSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskMessageSignature)
    MergeFrom(*source);
  }
}

void LiskMessageSignature::MergeFrom(const LiskMessageSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskMessageSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
}

void LiskMessageSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskMessageSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskMessageSignature::CopyFrom(const LiskMessageSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskMessageSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskMessageSignature::IsInitialized() const {
  return true;
}

void LiskMessageSignature::Swap(LiskMessageSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskMessageSignature::InternalSwap(LiskMessageSignature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskMessageSignature::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LiskVerifyMessage::InitAsDefaultInstance() {
}
class LiskVerifyMessage::HasBitSetters {
 public:
  static void set_has_public_key(LiskVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_signature(LiskVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(LiskVerifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LiskVerifyMessage::kPublicKeyFieldNumber;
const int LiskVerifyMessage::kSignatureFieldNumber;
const int LiskVerifyMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LiskVerifyMessage::LiskVerifyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.lisk.LiskVerifyMessage)
}
LiskVerifyMessage::LiskVerifyMessage(const LiskVerifyMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.lisk.LiskVerifyMessage)
}

void LiskVerifyMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LiskVerifyMessage_messages_2dlisk_2eproto.base);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LiskVerifyMessage::~LiskVerifyMessage() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.lisk.LiskVerifyMessage)
  SharedDtor();
}

void LiskVerifyMessage::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LiskVerifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LiskVerifyMessage& LiskVerifyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LiskVerifyMessage_messages_2dlisk_2eproto.base);
  return *internal_default_instance();
}


void LiskVerifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LiskVerifyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LiskVerifyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LiskVerifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.lisk.LiskVerifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.lisk.LiskVerifyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LiskVerifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.lisk.LiskVerifyMessage)
}

::google::protobuf::uint8* LiskVerifyMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.lisk.LiskVerifyMessage)
  return target;
}

size_t LiskVerifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes public_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes message = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LiskVerifyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LiskVerifyMessage* source =
      ::google::protobuf::DynamicCastToGenerated<LiskVerifyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.lisk.LiskVerifyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.lisk.LiskVerifyMessage)
    MergeFrom(*source);
  }
}

void LiskVerifyMessage::MergeFrom(const LiskVerifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
}

void LiskVerifyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiskVerifyMessage::CopyFrom(const LiskVerifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.lisk.LiskVerifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiskVerifyMessage::IsInitialized() const {
  return true;
}

void LiskVerifyMessage::Swap(LiskVerifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiskVerifyMessage::InternalSwap(LiskVerifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LiskVerifyMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dlisk_2eproto);
  return ::file_level_metadata_messages_2dlisk_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lisk
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskGetAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskGetAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskGetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskGetPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskGetPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskGetPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignTx >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignedTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignedTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignedTx >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskSignMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskSignMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskSignMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskMessageSignature* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskMessageSignature >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskMessageSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::lisk::LiskVerifyMessage* Arena::CreateMaybeMessage< ::hw::trezor::messages::lisk::LiskVerifyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::lisk::LiskVerifyMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
