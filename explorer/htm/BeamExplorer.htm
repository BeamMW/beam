<!DOCTYPE html>
<html lang="en">
<!-- WELCOME TO BEAM SMART EXPLORER!
- This is an interactive web display of the data queried to a Beam explorer node.
- The IP address of the explorer node can be changed in var 'urlPrefix'.
- Current version of the file: v0.5

General rules for developement:
- Let's keep everything in one single standalone file!
- HTML/JS/CSS must be compatible with Chrome 83 (to allow also being used as a Beam Wallet DApp).
- Graphics are embedded as SVG or are Unicode symbols.
- Ideally, JS functions mainly modify classes while most display features are done by CSS.
- That way, if we disable styling, the data can directly be copy-pasted somewhere else.

The file is organized in four main sections:
1) All the CSS styling.
2) Some static HTML (banner, footer, etc.).
3) Core JS functions to request the node explorer data and parse it into HTML.
4) Extra JS functions for adjustments, filtering, sorting, etc.

Disclaimer:
- This is an experimental work-in-progress.
- It is provided AS-IS, with no guarantees whatsoever.
-->
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  <meta name="theme-color" content="#000000">
  <!-- Simplified Beam logo SVG favicon is URL-encoded (i.e. mainly replacing < > # and spaces) -->
  <!-- Remark: Such SVG favicon does not seem to be recognized by Safari -->
  <link rel="icon" href="data:image/svg+xml,%3Csvg%20viewBox='112%2085%20320%20320'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EBeam%20favicon%3C/title%3E%3Cpath%20d='m424%20371h-304l152-260zm-229-44%2078-135%2078%20135z'%20fill='%230b76ff'%20fill-rule='evenodd'/%3E%3Cpolygon%20points='225%20314%20272%20226%20320%20314'%20fill='%2339fff2'/%3E%3Cpolygon%20points='120%20192%20272%20278%20272%20287%20120%20246'%20fill='%2324c1ff'/%3E%3Cpolygon%20points='424%20167%20272%20278%20272%20287%20424%20274'%20fill='%23fd76fd'/%3E%3C/svg%3E%0A">
  <title>Beam Smart Explorer</title>

<!-- ------------ SECTION 1 - CSS STYLES ------------ --> 
<style>

	/* GENERAL ELEMENTS */
	* {
  		box-sizing: border-box; /* Width and height will always include padding and border */
	}
	html {
		font-family: Arial, Helvetica, sans-serif; /* Default fonts */
 		font-size: 62.5%; /* Since default browser font size is generally 16px, this sets an easy '1rem = 10px' */
		line-height: 1; /* From a CSS reset template... */
		margin: 0; /* From a CSS reset template... */
	}
	:root {
 		background: #d0daff; /* Default background color for all pages */
	}
	:link { color: #0066CC; } 	/* Default link colors */
	:visited { color: #3e1a8b; }
	:link:active, :visited:active { color: #3e1a8b; }
	p {
		font-size: 1.6rem;
		padding: 5px 0 5px 0;
	}
	ul {
		font-size: 1.4rem;
		padding: 0 10px 0 15px;
		text-align: left;
	}
	div > ul {
		padding: 0 10px 0 35px;  /* Wide first bullet point level when not in table cells */
	}
	td ul {
		padding: 0 10px 0 15px; /* Tight bullet points when inside table cells */
	}
	ul li {
		padding: 2px 0 0 2px;
	}
	h1 {
		font-size: 3.2rem;
		text-align: center;
		margin: 10px 0 10px 0;
	}
	h2 {
		font-size: 2.4rem;
		text-align: left;
		margin: 15px 0 10px 0;
	}
	h3, h3 a:link, h3 a:visited {
		font-size: 1.9rem;
		text-align: left;
		color: #17204e;
		margin: 10px 0 15px 0;
	}
	h3::before {
		content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
		color: #17204e;
	}
	.blockHeight, .blockHeight a {
		font-family: "Lucida Console", ui-monospace, monospace;
		font-weight: normal;
	}
	h2 .blockHeight a {
		color: #17204e;
	}
	.blockTitle {
		white-space: nowrap; /* Don't wrap text */
	}
	.blockTitle .blockHeight {
		font-weight: bold;
	}
	.listOfBlockHeaders {
		cursor: pointer;
		fill: #777ebc;
		display: inline-block;
		vertical-align: top; /* Needed to align text and symbol */
	}
	.listOfBlockHeaders:hover {
		fill: #555fb8;
	}
	.nextBlock, .previousBlock, .newerBlocks, .olderBlocks {
		cursor: pointer;
		stroke: #777ebc;
		display: inline-block;
		vertical-align: middle; /* Needed to align text and symbol */
	}
	.nextBlock a, .previousBlock a, .newerBlocks a, .olderBlocks a { /* Needed for Chrome 83 */
		stroke: #777ebc;
	}
	.nextBlock a:hover, .previousBlock a:hover, .newerBlocks a:hover, .olderBlocks a:hover {
		stroke: #555fb8;
	}
	.nextBlock.off, .previousBlock.off, .newerBlocks.off, .olderBlocks.off { /* Dim out when disabled */
		cursor: default;
		stroke: lightgrey;
	}
	.nextBlock.off:hover, .previousBlock.off:hover, .newerBlocks.off:hover, .olderBlocks.off:hover {
		stroke: lightgrey;
	}
	.assetName {
		color: black;
		white-space: nowrap; /* Don't wrap text */
	}
	.assetName a {
		color: black; /* Keep links in black */
	}
	.bool {
		font-family: "Lucida Console", ui-monospace, monospace;
		font-size: 1.6rem;
		color: black;
	}
	.bool.yes {
		color: green; /* 'True' in green */
	}
	.bool.no {
		color: blue; /* 'False' in blue */
	}
	.time {
		white-space: nowrap; /* Don't wrap text */
		font-size: 1.2rem;
		color: #650000;
	}
	.metadata {
		font-family: "Lucida Console", ui-monospace, monospace;
		display: table; /* We use table-like display to ensure that text and symbol stay inline */
		color: #505050;
		font-size: 1.2rem;
		vertical-align: middle; /* Needed to align text and symbol */
	}
	/* Display full metadata */
	.metadata .full {
		font-family: inherit;
		display: table-cell; 
		max-width: 80ch; /* Wrap long strings after 80 characters */
		white-space: pre-wrap; /* Wrap and preserve all space */
		overflow-wrap: break-word; /* Break words when needed (similar to the old word-wrap) */
	}
	/* Display reduced metadata */
	.metadata .reduced {
		font-family: inherit;
		display: table-cell;
		max-width: 45ch; /* Show only the 45 first characters (good enough for AMML tokens!) */
		white-space: nowrap; /* Don't wrap text */
		overflow: hidden; /* Hide text that overflows */
		text-overflow: ellipsis; /* Add '...' when overflowing */
	}
	/* Remark: The extend symbols are hidden by default in the HTML */
	.extend {
		vertical-align: middle; /* Needed to align text and symbol */
		visibility: hidden; /* Hide the symbols but maintain their space */
		display: table-cell;
		cursor: pointer;
		fill: #aaaaaa;
		padding: 0 0 0 3px;
	}
	/* Display the extend symbols when hovering over the element containing the text */
	*:hover > .metadata .extend {
		visibility: visible;
	}
	/* Highlight the symbol when hovering on it */
	.extend:hover {
		fill: grey;
	}
	.cid, .kernelId, .blob, .commitment {
		font-family: "Lucida Console", ui-monospace, monospace;
		font-size: 1.2rem;
		color: #525252;
		white-space: nowrap;
		display: inline;
		vertical-align: middle; /* Needed to align text and symbol */
	}
	.cid a {
		font-family: "Lucida Console", ui-monospace, monospace;
		font-size: 1.2rem;
		color: #525252; /* Keep links grey */
		text-decoration-line: underline;
		text-decoration-color: grey; /* Use a light underline color */
	}
	.cidTitle {
		font-family: "Lucida Console", ui-monospace, monospace;
		font-weight: normal;
	}
	/* Display truncated hashes */
	.truncated {
		font-family: inherit;
		vertical-align: middle; /* Needed to align text and symbol */
		display: inline-block; /* Needed to allow setting a max-width */
		max-width: 25ch; /* Show only the 25 first characters */
		overflow: hidden;  /* Hide text that overflows */
		text-overflow: ellipsis;  /* Add '...' when overflowing */
	}
	/* Display extended hashes */
	.expanded {
		font-family: inherit;
		vertical-align: middle; /* Needed to align text and symbol */
	}
	/* The extend symbols are hidden by default in the HTML */
	.expand {
		vertical-align: middle; /* Needed to align text and symbol */
		display: inline; /* Superseed the HTML 'hidden' attribute */
		visibility: hidden; /* Hide the symbols but maintain their space */
		cursor: pointer;
		fill: #aaaaaa;
		padding: 0 0 0 3px;
	}
	/* Display the expand symbols when hovering over the cell or the list item containing the text */
	*:hover > span > .expand {
		visibility: visible;
	}
	/* Hide the expand symbol in the special case of a text with link (just to avoid confusion about the effect of clicking) */
	span.withLink:hover + .expand {
		visibility: hidden;
	}
	/* Highlight the symbol when hovering on it */
	.expand:hover {
		fill: grey;
	}
	.amount {
		font-family: "Lucida Console", ui-monospace, monospace;
		font-size: 1.4rem;
		color: darkcyan;
	}
	.amount.pos {
		color: green; /* Positive values in green */
	}
	.amount.neg {
		color: red; /* Negative values in red */
	}
	.th {
		/* This class is a "header" type from the node explorer data */
	}
	.more {
		font-weight: bold;
		color: #17204e;
	}
	.more a {
		color: #17204e;
	}
	.more::before {
		content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
		color: #17204e;
	}

	/* FORMAT TABLES */
	table, td, th {
		color: black; /* Default text color */
		font-size: 1.5rem; /* Default text size */
		border: 1px solid #ddd; /* Thin grey border */
		border-collapse: collapse; /* Join table and cell borders as one single line */
		padding: 5px; /* Add a small padding */
	}
	table thead > tr th {
		background-color: #b8bbd8; /* Background color for table header cells declared as such ("thead" tag) */
	}
	th {
		white-space: nowrap; /* Don't wrap header text */
	}
	.tableGeneric {
		/* Nothing special */
	}
	.tableUTXO, .tableKernels {
		min-width: 50ch; /* Just to keep them visually balanced (inputs, outputs, kernels) */
		margin: 5px;
	}
	.tableSummary, .tableTotals {
		min-width: 70ch; /* Just to keep them visually balanced */
	}
	.tableOwned_compact, .tableOwned_full {
		width: 100%; /* Occupy full width of the column they appear in */
	}
	.tableFunds_compact, .tableFunds_full {
		width: 100%; /* Occupy full width of the column they appear in */
	}
	.tableContracts, .tableAssetHistory, .tableAssets, .tableCallHistory, .tableHistoricalBlocks {
		/* Nothing special */
	}
	.contractCall {
		border: 3px solid #555fb8; /* Group multiple contract calls within a thick border */
	}
	.mainCall, .subCall {
		text-align: center;
	}
	.divTableStatus, .divTableBlocks {
		/* These div are just a dirty hack added to wrap and identify some special types of generic tables... */
	}
	/* Alternate row colors (...although the colors get mixed up when the table is filtered!) */
	table tbody > tr:nth-child(odd) { background-color: #fff; }
	table tbody > tr:nth-child(even) { background-color: #eee; }
	/* Highlight when hover on main rows (for certain tables only) */
	.tableUTXO tbody > tr:hover, .tableKernels tbody > tr:hover,
	.tableOwned_full tbody > tr:hover, .tableFunds_full tbody > tr:hover,
	.tableAssets tbody > tr:hover, .tableAssetHistory tbody > tr:hover,
	.divTableBlocks .tableGeneric tbody > tr:hover, .tableContracts tbody > tr:hover {
		background-color: #e0e0f0;
	}

	/* TITLE BANNER AND FOOTER */
	#Page-container {
 		position: relative;
		min-height: 96vh; /* Always use the whole screen space, so that the footer stays at the bottom */
		min-width: 97vh;
		padding: 8px;
	}
	#Content-wrap {
		padding-bottom: 1.8rem; /* Leave some space for the footer */
	}
	#Banner {
		width: 100%;
		display: table;
		background-color: #a7acd9;
		border-radius: 0.5em; /* Slightly round corners */
		padding: 5px 10px 5px 10px;
		text-align: center;
	}
	#BeamLogo {
		display: table-cell;
		vertical-align: middle;
		text-align: left;
	}
	#BannerCenter{
		display: table-cell;
		vertical-align: middle;
		text-align: center;
		width: 100%;
		white-space: nowrap; /* Never wrap text */
		padding: 5px 10px 5px 10px;
	}
	#BeamTitle {
		font-size: 2.4rem;
		color: #17204e;
		margin: 0 0 5px 0;
	}
	#Version {
		font-size: 1rem;
		color: #525252;
	}
	#Menu {
		font-size: 1.5rem;
		color: #17204e;
	}
	.menuItem a {
		color: #2d3799; /* No change of color when followed */
	}
	.menuSeparator {
		color: #17204e;
		padding: 0 5px 0 5px;
	}
	#Navigation {
		display: table-cell;
		vertical-align: middle;
		text-align: center;
		font-size: 2rem;
		color: #525252;
		padding: 0 10px 0 10px;
		line-height: 1; /* Without units it's a number of lines */
	}
	#Navigation a {
		color: #525252;
		text-decoration-line: none;
	}
	#Back *, #Reload *, #ExpandAll * {
		fill: #636785; /* Color all SVG elements */
	}
	#Back:hover *, #Reload:hover *, #ExpandAll:hover * {
		fill: #505050; /* Color all SVG elements */
	}
	#TopButton, #BottomButton {
		position: fixed; /* Fixed position */
		z-index: 99; /* Make sure it does not overlap */
		cursor: pointer; /* Mouse pointer on hover */
		border: none; /* Remove borders */
		outline: none; /* Remove outline */
		border-radius: 50%; /* Round button */
		background-color: black; /* Background color */
		opacity: 0.15; /* Very transparent */
		text-align: center;
		font-size: 1.5rem;
		color: white; /* Text color */
		padding: 10px; /* Some padding */
	}
	#TopButton {
		display: none; /* Hidden by default */
		bottom: 50px; /* Bottom of the page */
		right: 10px; /* Right side of the page */
	}
	#BottomButton {
		display: block; /* Shown by default */
		bottom: 10px; /* Bottom of the page */
		right: 10px; /* Right side of the page */
	}
	#TopButton:hover, #BottomButton:hover {
		opacity: 0.9; /* Less transparent on hover */
		background-color: rgb(0,0,0,0.4); /* Background with more transparency */
	}
	#Footer {
		position: absolute;
		bottom: 0;
		width: 100%;
		text-align: center;
		color: #17204e;
		font-weight: bold;
		white-space: nowrap; /* Don't wrap text */
		font-size: 1.2rem;
		height: 1.8rem; /* Footer height */
	}
	#Footer a {
		color: #17204e;
		text-decoration: none;
	}
	#Footer a:hover {
		text-decoration: underline;
	}
	#Footer::before {
		content: "\25b8"; /* Nice useless decoration ;-) */
		color: #17204e;
	}
	#Footer::after {
		content: "\25c2"; /* Nice useless decoration ;-) */
		color: #17204e;
	}
	#Loading {
		/* Nothing special */
	}

	/* SPECIAL HISTORICAL BLOCKS */
	.specialBlock_Title {
		font-size: 1.5rem;
		font-weight: bold;
		color: #17204e;
		padding: 5px 2px 5px 2px;
	}
	.specialBlock_Title::before {
		content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
	}
	.specialBlock_Description {
		font-size: 1.3rem;
		color: black;
		line-height: 1.7rem;
		padding: 2px 2px 10px 2px;
	}
	.specialBlock_Description br { /* Dirty hack to add line spacing to 'br' tag... */
		display: block;
		content: " ";
		margin: 0.3rem 0 0.3rem 0;
	}
	.specialBlock_Description a {
		color: #2d3799;
		font-weight: bold;		
	}
	.specialBlock_Link {
		font-size: 1.2rem;
		color: grey;
		line-height: 1.3rem;
		padding: 2px;
	}
	.specialBlock_Link:first-child {
		padding-top: 20rem;
	}
	.specialBlock_Link:last-child {
		padding-bottom: 1rem;
	}
	.specialBlock_Link a {
		color: grey;
	}
	.specialBlock_Link::before {
		content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
	}

	/* COLLAPSIBLE BLOCKS */
	/* Remark: We use the 'checkbox hack' to make collapsibles 100% CSS */
	.collapsible {
		display: block; 
		width: fit-content; /* Will have the width of its full content */
	}
	.collapsible-checkbox {
		display: none; /* Hide the actual checkbox (clicking will happen on its label only) */
	}
	/* Normal collapsible header */
	.collapsible-label {
		display: block;
		width: 100%; /* Uses all the content width */
		max-width: 97vw; /* But no more than the screen width (when collapsed) */
		white-space: nowrap; /* Never wrap text */
		cursor: pointer;
		font-size: 1.5rem;
		margin: 15px 0 0 0;
		color: white;
		background-color: #777ebc;
		padding: 10px;
		border: none;
		text-align: left;
		outline: none;
		border-radius: 0.5em; /* Slightly round corners */
	}
	.collapsible-label:hover {
		background-color: #555fb8;
	}
	/* Smaller compact collapsible header */
	.collapsible-label.small {
		display: block;
		width: fit-content; /* Uses only its own needed width */
		font-size: 1.2rem;
		color: black;
		background-color: #b8bbd8;
		margin: 0;
		padding: 2px 5px 2px 5px;
		border-radius: 0.25em; /* Slightly round corners */
	}
	.collapsible-label.small:hover {
		background-color: #8c94e0;
	}
	.collapsible-checkbox:checked + .collapsible-label {
		border-bottom-right-radius: 0; /* Remove bottom round corners when expanded... */
		border-bottom-left-radius: 0; /* ...just because it's nice! :-) */
		max-width: unset; /* No limit on width when expanded */
	}
	/* Collapsible symbols */
	.collapsible-label::before {
		content: '\002b \00a0'; /* Add plus sign when collapsed */
		color: #bababa;
		font-weight: bold;
	}
	.collapsible-label.small::before {
		color: black; /* Use black sign for small collapsible */
	}
	.collapsible-checkbox:checked + .collapsible-label::before {
		content: '\2212 \00a0'; /* Add minus sign when expanded */
	}
	/* Collapsible content */
	.collapsible-content {
		display: block;
		width: 100%;
		height: 0; /* Hide by collapsing its height only (thus maintaining its horizontal space) */
		overflow: hidden;
		background-color: white;
	}
	.collapsible-content.small {
		display: none; /* Hide completely for small collapsibles (width is not maintained) */
		background-color: unset; /* No specific background color for small collapsibles */
	}
	.collapsible-checkbox:checked + .collapsible-label + .collapsible-content {
		height: unset;  /* Show content's full height */
		overflow: visible;
		border: 0.5px solid #777ebc; /* Add a thin border */
	}
	.collapsible-checkbox:checked + .collapsible-label + .collapsible-content.small {
		display: block; /* Show content */
		overflow: visible;
		border: none; /* No border for small collapsibles */
	}

	/* SORT AND SEARCH HEADERS IN TABLES */
	/* General for all headers */
	.filtersOff th, .filtersOn th, .filtersNot th, .headerCell, .headerRow {
		text-align: center;
		white-space: nowrap; /* Don't wrap header text */
		font-weight: bold;
	}
	/* Add placeholders for sorting indicators */
	.filtersOff th::before {
		content: '\21c5 \00a0';
		visibility: hidden;
	}
	/* Force same min column width as when filters are on */
	.filtersOff th {
		min-width: 5ch;
	}
	/* Headers when filters are off */
	.filtersOff th {
		background-color: #b8bbd8;
	}
	.filtersOff:hover th {
		cursor: pointer; /* Change mouse to pointer to show it's clickable */
		background-color: #9ca2d2;
	}
	/* Headers when filters are on */
	.filtersOn th {
		background-color: #9ca2d2;
	}
	/* Make header rows sticky to the top of the window */
	/* Remark: On Chrome 83, sticky only works on 'th' (not on 'thead' or 'tr') */
	.filtersOff th, .filtersOn th {
		position: sticky;
		top: 0;
		z-index: 10;
	}

	/* SORT OPTIONS IN HEADERS */
	.sortable {
		cursor: pointer; /* Change mouse pointer to show it's clickable */
	}
	/* Add sorting indicators */
	.sortable::before {
		content: '\21c5 \00a0'; /* Symbol when not sorted */
		color: #666;
	}
	.sortable:hover::before { /* Highlight symbol on hover */
		color: #e7e7e7;
	}
	.sortable.asc::before {
		content: '\25b2 \00a0'; /* Symbol when sorted ascending */
		color: #e7e7e7;
	}
	.sortable.desc::before {
		content: '\25bc \00a0'; /* Symbol when sorted descending */
		color: #e7e7e7;
	}

	/* SEARCH OPTIONS IN HEADERS */
	.searchable {
		/* Nothing special */
	}
	.search {
		visibility: hidden; /* Search fields are hidden by default */
		display: inline-block;
		width: 95%;
		max-width: 20ch;
		min-width: 5ch;
		border-radius: 0.25em; /* Slightly round corners */
		border: 1px solid #555; /* Dark border */
		background-color: #afb3d8;
		padding: 0.25ch 1ch 0.25ch 1ch ; /* Internal padding */
	}
	/* Search fields on hover */
	.headerCell:hover .search {
		visibility: visible; /* Make it appear when hover */
	}
	/* Search fields with content */
	.search:not(:placeholder-shown) {
		visibility: visible; /* Keep it visible */
		max-width: 95%; /* Extend to full width */
		background-color: #b8bbd8; /* Use a lighter background */
		border: 1px solid #ddd; /* White border */
	}
	/* Search fields on focus */
	.search:focus {
		visibility: visible; /* Keep it visible */
		max-width: 95%; /* Extend to full width */
		outline: none; /* Avoid the browser default focus outline */
		border: 1px solid #ddd; /* White border */
	}
	
</style>

</head>
<body>
<!-- ------------ SECTION 2 - STATIC HTML ------------ --> 

	<!-- Wrappers (added just to keep footer at the bottom) -->
	<div id="Page-container">
		<div id="Content-wrap">

			<!-- Define SVG templates (= invisible 'symbols') that can easily be called when we need these icons. -->
			<!-- Remark: We don't define any fixed size here, so that they will adapat to the SVG size what will call them. -->
			<!-- Remark: 'xmlns' is apparently not needed when the SVG is given inline. -->
			<svg style='display:none'><symbol id='eye_icon' viewBox='0 11 32 10'><path d='m0 16 .16.35q.1.22.48.93t.83 1.34 1.25 1.54 1.66 1.7 2.15 1.56 2.62 1.35 3.14.9 3.71.35 3.71-.36 3.17-.92 2.6-1.32 2.14-1.6 1.66-1.63 1.25-1.6.83-1.31.48-.93L32 16q-.03-.13-.16-.35t-.48-.9-.83-1.34-1.25-1.57-1.66-1.66-2.15-1.57-2.62-1.35-3.14-.9T16 6.03t-3.71.35-3.17.9-2.6 1.34-2.14 1.57-1.66 1.66-1.25 1.57-.83 1.34-.48.93zm10.02 0q0-2.46 1.72-4.22T16 10.02t4.26 1.76T22.02 16t-1.76 4.26T16 22.02t-4.26-1.76T10.02 16zM12 16q0 1.66 1.18 2.85T16 20t2.82-1.15T20 16t-1.18-2.82T16 12t-2.82 1.18L16 16h-4z'/></symbol></svg>
			<svg style='display:none'><symbol id='left_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' d='M12 3a9 9 0 1 0 0 18 9 9 0 0 0 0-18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m13 9-3 3 3 3'/></symbol></svg>
			<svg style='display:none'><symbol id='right_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' d='M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m11 15 3-3-3-3'/></symbol></svg>
			<svg style='display:none'><symbol id='double_right_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' d='M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 9 15 L 12 12 L 9 9'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 13 15 L 16 12 L 13 9'/></symbol></svg>
			<svg style='display:none'><symbol id='double_left_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' stroke-linecap='round' d='M12 3a9 9 0 1 0 0 18 9 9 0 0 0 0-18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 11 9 L 8 12 L 11 15'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 15 9 L 12 12 L 15 15'/></symbol></svg>
			<svg style='display:none'><symbol id='list_icon' viewBox='0 -3 14 14'><path d='M4 0h7a1 1 0 1 1 0 2H4a1 1 0 0 1 0-2zM1 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 4h7a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2zM1 4a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 4h7a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2zM1 8a1 1 0 1 1 0 2 1 1 0 0 1 0-2z'/></symbol></svg>

			<!-- Fixed banner on all pages -->
			<div id="Banner">
				<span id="BeamLogo">
					<!-- Clicking on the logo sends back to the main page -->
					<a href='?' title='Main page'>
						<!-- A simplified SVG version of the BEAM logo -->
						<svg height='5em' width='5em' viewBox='42 42 460 460'><defs><linearGradient id='Gradient1' x1='-24.6' y1='683.51' x2='-23.57' y2='683.51' gradientTransform='matrix(98, 0, 0, -47, 2497.75, 32364.11)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#fff' stop-opacity='0'/><stop offset='1' stop-color='#fff'/></linearGradient><linearGradient id='Gradient2' x1='-28.7' y1='703.17' x2='-27.72' y2='703.17' gradientTransform='matrix(-98, 0, 0, 26, -2353.25, -18019.72)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#9d6eff' stop-opacity='0'/><stop offset='1' stop-color='#a18cff'/></linearGradient><linearGradient id='Gradient3' x1='-28.69' y1='682.8' x2='-27.57' y2='682.8' gradientTransform='translate(-2353.25 29603.78) rotate(180) scale(98 43)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#ae60d6' stop-opacity='0'/><stop offset='1' stop-color='#ab38e6'/></linearGradient><linearGradient id='Gradient4' x1='-28.68' y1='685.09' x2='-27.47' y2='685.09' gradientTransform='translate(-2353.25 41328.94) rotate(180) scale(98 60)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#fd76fd' stop-opacity='0'/><stop offset='1' stop-color='#ff51ff'/></linearGradient></defs><circle id='circle' fill='#0b1624' cx='272' cy='272' r='230'/><g id='logo'><path id='Triangle-left' fill='#24c1ff' d='M272.25,327.21H194.72l77.5-135V110.45L120.31,370.64H272.25Z'/><path id='Triangle-right' fill='#0b76ff' d='M272.25,327.21h77.53l-77.5-135V110.45L424.19,370.64H272.25Z'/><polygon id='Triangle-small-left' fill='#39fff2' points='272.25 226.3 272.25 313.57 224.77 313.67 272.25 226.3'/><polygon id='Triangle-small-right' fill='#00e2c2' points='272.25 226.3 272.25 313.57 319.73 313.67 272.25 226.3'/><polygon id='Ray1-left' fill='url(#Gradient1)' points='86.13 191.81 272.25 277.83 272.25 286.83 86.13 246.1 86.13 191.81'/><polygon id='Ray2-right-low' fill='url(#Gradient2)' points='458.75 274.33 272.25 286.83 272.25 283.83 458.75 238.5 458.75 274.33'/><polygon id='Ray3-right-mid' fill='url(#Gradient3)' points='458.75 202.67 272.25 280.83 272.25 283.83 458.75 238.5 458.75 202.67'/><polygon id='Ray4-right-top' fill='url(#Gradient4)' points='458.75 166.83 272.25 277.83 272.25 280.83 458.75 202.67 458.75 166.83'/></g></svg>
					</a>
				</span>
				<span id="BannerCenter">
					<h1 id="BeamTitle">Beam Smart Explorer <span id='Version'>v0.5</span></h1>
					<div id="Menu">
						<!-- Main explorer menu -->
						<span class="menuItem"><a href="javascript:window.location.href=window.location.pathname + '?type=hdrs';" title="List of recent Block Headers">Block Headers</a></span>
						<span class="menuSeparator"> | </span>
						<span class="menuItem"><a href="javascript:window.location.href=window.location.pathname + '?type=assets';" title="List of current Confidential Assets">Confidential Assets</a></span>
						<span class="menuSeparator"> | </span>
						<span class="menuItem"><a href="javascript:window.location.href=window.location.pathname + '?type=contracts';" title="List of currently deployed Smart Contracts">Smart Contracts</a></span>
						<span class="menuSeparator"> | </span>
						<span class="menuItem"><a href="javascript:window.location.href=window.location.pathname + '?type=historical';" title="List of special historical blocks">Historical blocks</a></span>
					</div>
				</span>
				<!-- Banner symbols for special functions -->
				<span id="Navigation">
					<a id="Reload" href="" title="Reload"><svg width='1em' height='1em' viewBox='-5 -10 140 140'><path d='M60,95.5c-19.575,0-35.5-15.926-35.5-35.5c0-19.575,15.925-35.5,35.5-35.5c13.62,0,25.467,7.714,31.418,19h22.627 C106.984,20.347,85.462,3.5,60,3.5C28.796,3.5,3.5,28.796,3.5,60c0,31.203,25.296,56.5,56.5,56.5 c16.264,0,30.911-6.882,41.221-17.88L85.889,84.255C79.406,91.168,70.201,95.5,60,95.5z'/><polygon points='120,21.832 119.992,68.842 74.827,55.811'/></svg></a>
					<br><a id="Back" href="javascript:history.back();" title="Back"><svg width='1em' height='1em' viewBox='3 1 60 34'><path d='M3 18L19 2v10h42v12H19v10z'/></svg></a>
					<br><a id="ExpandAll" href="javascript:expandEverything();" title="Expand everything"><svg width='1em' height='1em'><use href='#eye_icon'/></svg></a>
				</span>
			</div>

			<!-- Floating buttons to scroll up and down -->
			<div>
				<button onclick='topFunction();' id='TopButton' title='Top'>&#9650;</button>
				<button onclick='bottomFunction();' id='BottomButton' title='Bottom'>&#9660;</button>
			</div>

			<!-- Main content area (will be replaced through Javascript) -->
			<div id="my_content">
				<h2 id="Loading">Loading...</h2>
			</div>

		</div>

		<!-- Fixed footer on all pages -->
		<div id='Footer'><a href='https://www.beam.mw'>www.beam.mw</a> & <a href="https://github.com/BeamMW/beam/tree/master/explorer/htm" title="https://github.com/BeamMW/beam/tree/master/explorer/htm">GitHub</a></div>

		<!-- No JavaScript warning -->
		<noscript>You need to enable JavaScript to run this app.</noscript>

	</div>

<!-- ------------ SECTION 3 - CORE JS FUNCTIONS ------------ --> 
<script>

	function MakeRef(link, text, target="_self")
	{
		return "<a href='" + link + "' target='" + target + "'>" + text + "</a>";
	}

	function UrlSelf(type, extra="")
	{
		return window.location.pathname + "?type=" + type + extra;
	}

	function UrlSelfWithID(type, id, extra)
	{
		return UrlSelf(type, "&id=" + id + extra);
	}

	function MakeCellEx(text, styles)
	{
		return "<td" + styles + ">" + text + "</td>";
	}

	function MakeCell(text)
	{
		return MakeCellEx(text, "");
	}

	function MakeCellRA(text, styles)
	{
		return MakeCellEx(text, " align='right'");
	}
	
	function MakeAmountClr(amount)
	{
		let type = "amount";

		if (amount[0] == '-')
			type = "amount neg";
		if (amount[0] == '+')
			type = "amount pos";

		return AddClass(amount, type);
	}

	function AddClass(txt,className)
	{
		return "<span class='" + className + "'>" + txt + "</span>";
	}
	
	function AddClassEx(txt,className,other)
	{
		return "<span class='" + className + "' " + other + ">" + txt + "</span>";
	}

	function AddClassDiv(txt,className,other="")
	{
		return "<div class='" + className + "' " + other + ">" + txt + "</div>";
	}

	function UrlBlock(h)
	{
		return UrlSelfWithID("block", h, "");
	}

	function MakeBlock(h)
	{
		return AddClass(MakeRef(UrlBlock(h), h), "blockHeight");
	}

	function MakeCellAmount(amount, extra)
	{
		return MakeCellRA(MakeAmountClr(amount), extra);
	}

	function MakeAsset(aid)
	{
		if (aid == 0)
			return AddClass("Beam", "assetName");
		return AddClass(MakeRef(UrlSelfWithID("aid", aid, ""), "Asset-" + aid), "assetName");
	}
	
	function MakeCid(cid)
	{
		return AddClassEx(MakeRef(UrlSelfWithID("contract", cid, ""), cid), "cid", "title='" + cid + "'");
	}
		
	function MakeFundsTbl(jFunds)
	{
		if (!jFunds)
			return "";

		let text = "";

		// Make collapsible and add some headers if more than a few rows
		let maxRows = 5;
		if (jFunds.length < maxRows) {
			text += "<table class='tableFunds_compact'>";
		} else {
			text += MakeCollapsibleBegin(jFunds.length + "&nbsp;assets", "unchecked", "small");
			text += "<table class='tableFunds_full'>\n\
					<thead><tr>\n\
						<th>Asset</th>\n\
						<th>Amount</th>\n\
					</tr></thead>\n";
		}

		for (let iF = 0; iF < jFunds.length; iF++)
		{
			const jFR = jFunds[iF];
			text += "<tr>";
			text += MakeCell(MakeAsset(jFR[0]["value"]));
			text += MakeCellAmount(jFR[1]["value"], "");
			text += "</tr>"
		}
		text += "</table>";
		if (jFunds.length < maxRows) {
			text += MakeCollapsibleEnd();
		}
		return text;
	}
	
	function Obj2Html_TableRows(jTbl)
	{
		let text = "";
		for (let iRow = 0; iRow < jTbl.length; iRow++)
		{
			const jRow = jTbl[iRow];
			
			if (jRow.type == "group")
				text += Obj2Html_TableRows(jRow.value);
			else
			{
				text += "<tr>";
				
				for (let iCol = 0; iCol < jRow.length; iCol++)
				{
					text += "<td align='right'>";
					text += Obj2Html(jRow[iCol]);
					text += "</td>";
				}

				text += "</tr>";
			}
		}
		return text;
	}
	
	function Obj2HtmlSpecial(obj)
	{
		//console.log(JSON.stringify(obj))

		if (obj.type == "cid")
			return MakeCid(obj.value);

		if (obj.type == "th")
			return AddClass(Obj2Html(obj.value), "th");

		if (obj.type == "amount")
			return MakeAmountClr(obj.value);

		if (obj.type == "table")
		{
			const jTbl = obj.value;
			let text = "<table class='tableGeneric'>";
			
			text += Obj2Html_TableRows(jTbl);
			
			text += "</table>";
			
			return text;
		}
		
		if (obj.type == "aid")
			return MakeAsset(obj.value);

		if (obj.type == "height")
			return MakeBlock(obj.value);

		if (obj.type == "blob")
			return AddClassEx(obj.value, "blob", "title='" + obj.value + "'");

		if (obj.type == "bool")
			return (obj.value > 0) ? AddClass("yes", "bool yes") : AddClass("no", "bool no");

		if (obj.type == "time")
		{
			let d = new Date();
			let diff = d.getTimezoneOffset();
			d = new Date((obj.value - diff * 60) * 1000);
			let txt = d.toISOString().split('T');
			return AddClass(txt[0] + ' ' + txt[1].split('.')[0], "time");
		}

		return "";
	}

	function Obj2Html(obj)
	{
		if (obj == null)
			return "";

		if (Array.isArray(obj))
		{
			let txt = "<ul>";
			for (let i = 0; i < obj.length; i++)
			{
				txt += "<li>";
				txt += Obj2Html(obj[i]);
				txt += "</li>";
			}
			
			txt += "</ul>";
			return txt;
		}

		if (typeof obj == 'object')
		{
			let txt = Obj2HtmlSpecial(obj);
			if (txt != "")
				return txt;
		
			txt = "<ul>";
			for (let key in obj)
			{
				txt += "<li>" + key + ": ";
				txt += Obj2Html(obj[key]);
				txt += "</li>";
			}
			
			txt += "</ul>";
			return txt;
		}

		// If data is a text string starting with "STD:" (i.e. it's an asset description), then we type it as "metadata"
		if (typeof obj === "string" && obj.startsWith("STD:"))
		{
			return AddClass(obj, "metadata");
		}
			
		return obj;
	}
	
	function SetContent(text)
	{
		document.getElementById("my_content").innerHTML = text;

		// Add truncate/expand options to all text of type hash, cid, metadata, etc.
		addExpandOptions();
		// Include options for adding filters to the first row of long tables
		addFilterOption();
	}
	
	function DisplayContracts()
	{
		let text = "\
		<h2>Deployed Smart Contracts</h2>\n\
		<table class='tableContracts'>\n\
			<thead><tr>\n\
				<th>Cid</th>\n\
				<th>Kind</th>\n\
				<th>Deploy Height</th>\n\
				<th>Locked Funds</th>\n\
				<th>Owned Assets</th>\n\
			</tr></thead>\n\
		";

		const jData = JSON.parse(this.responseText);
		const jTbl = jData["value"];
		
		// skip 1st row
		for (let iRow = 1; iRow < jTbl.length; iRow++)
		{
			const jRow = jTbl[iRow];
			text += "<tr>";

			const cid = jRow[0]["value"];
			text += MakeCell(MakeCid(cid));
			text += MakeCell(Obj2Html(jRow[1]));
			text += MakeCellRA(MakeBlock(jRow[2]));

			text += MakeCell(MakeFundsTbl(jRow[3]["value"]));

			text += "<td>";
			
			const jOwned = jRow[4]["value"];
			if (jOwned)
			{
				// Make collapsible and add some headers if more than a few rows
				let maxRows = 5;
				if (jOwned.length < maxRows) {
					text += "<table class='tableOwned_compact'>";
				} else {
					text += MakeCollapsibleBegin(jOwned.length + "&nbsp;owned", "unchecked", "small");
					text += "<table class='tableOwned_full'>\n\
							<thead><tr>\n\
								<th>Asset</th>\n\
								<th>Description</th>\n\
								<th>Amount</th>\n\
							</tr></thead>\n";
				}

				for (let iF = 0; iF < jOwned.length; iF++)
				{
					const jFR = jOwned[iF];
					text += "<tr>";
					text += MakeCellEx(MakeAsset(jFR[0]["value"]), " style='width:10%'");
					text += MakeCell(AddClass(jFR[1], "metadata"));
					text += MakeCellAmount(jFR[2]["value"], " style='width:40%'");
					text += "</tr>"
				}
				text += "</table>";
				if (jOwned.length < maxRows) {
					text += MakeCollapsibleEnd();
				}
			}

			text += "</td>";
			text += "</tr>\n"
		
		}
		
		text += "</table>"
		SetContent(text);
	}

	function DisplayAssetHistory()
	{
		const jData = JSON.parse(this.responseText);
		const jTblObj = jData["Asset history"];
		const jTbl = jTblObj["value"];
		
		let text = "<h2>\n"
		text += "History of Asset " + g_CurrentID;
		text += "</h2>\n"

		text += "\
		<table class='tableAssetHistory'>\n\
			<thead><tr>\n\
				<th>Height</th>\n\
				<th>Event</th>\n\
				<th>Amount</th>\n\
				<th>Total Amount</th>\n\
				<th>Extra</th>\n\
			</tr></thead>\n\
		";

		// Skip first row
		for (let iRow = 1; iRow < jTbl.length; iRow++)
		{
			const jRow = jTbl[iRow];
			text += "<tr>";

			text += MakeCell(MakeBlock(jRow[0]));
			text += MakeCell(jRow[1]);
			text += MakeCellAmount(Obj2Html(jRow[2]), "");
			text += MakeCellAmount(Obj2Html(jRow[3]), "");
			text += MakeCell(Obj2Html(jRow[4]));
			text += "</tr>";
		}
		
		text += "</table>"
		text +="<p>" + AddClassEx(MakeRef(MakeLinkToOlderBlocks(jTblObj), "Previous blocks..."),"more","title='Previous blocks'") + "</p>";

		SetContent(text);
	}
	
	function MakeTableTxos(jTbl, isInp)
	{
		let text = "\
		<table class='tableUTXO'>\n\
			<thead><tr>\n\
				<th>Commitment</th>\n";
	
		if (isInp)
			text += "<th>Height</th>\n";
		else
			text += "<th>Spent</th>\n";
		
		text += "\
				<th>Maturity</th>\n\
				<th>Extra</th>\n\
			</tr></thead>\n\
		";

		for (let i = 0; i < jTbl.length; i++)
		{
			let jRow = jTbl[i];
			text += "<tr>";

			text += MakeCell(AddClassEx(jRow["commitment"], "commitment", " title='" + jRow["commitment"] + "'"));
			delete jRow.commitment;
	
			let j = jRow[isInp ? "height" : "spent"];
	
			if (j != null)
			{
				text += MakeCellRA(MakeBlock(j));
				delete jRow.height;
			}
			else
				text += MakeCellRA("");

			j = jRow["Maturity"];
			if (j)
			{
				text += MakeCellRA(Obj2Html(j));
				delete jRow.Maturity;
			}
			else
				text += MakeCellRA("");
				
			let txtExtra = "";
	
			j = jRow["Asset"];
			if (j)
			{
				txtExtra += " CA [" + j["min"] + "-" + j["max"] + "]";
				delete jRow.Asset;
			}
				
			j = jRow["type"];
			if (j)
			{
				txtExtra += " " + Obj2Html(j);
				delete jRow.type;
			}

			j = jRow["Value"];
			if (j)
			{
				txtExtra += " " + Obj2Html(j);
				delete jRow.Value;
			}

			text += MakeCell(txtExtra);
			
			text += "</tr>";
		}
		text += "</table>"
		return text;
	}

	function MakeTblAssets(j)
	{
		let text = "\
		<table class='tableAssets'>\n\
			<thead><tr>\n\
				<th>Aid</th>\n\
				<th>Owner</th>\n\
				<th>Deposit</th>\n\
				<th>Supply</th>\n\
				<th>Lock-Height</th>\n\
				<th>Metadata</th>\n\
			</tr></thead>\n\
		";

		let jTbl = j["value"];
		
		// Skip first row
		for (let iRow = 1; iRow < jTbl.length; iRow++)
		{
			const jRow = jTbl[iRow];
			text += "<tr>";

			text += MakeCell(MakeAsset(jRow[0]["value"]));
			text += MakeCell(Obj2Html(jRow[1]));
			text += MakeCellAmount(jRow[2]["value"]);
			text += MakeCellAmount(jRow[3]["value"]);
			text += MakeCellRA(MakeBlock(jRow[4]));
			text += MakeCell(AddClass((jRow[5]), "metadata"));
			
			text += "</tr>";
		}
	
		text += "</table>"
		return text;
	}

	function MakeCAs(h)
	{
		return "<h3>" + MakeRef(UrlSelfWithID("assets", h, ""), "Confidential Assets at this block height") + "</h3>";
	}

	function DisplayBlock()
	{
		let text = "";
		
		text += "<h2 class='blockTitle'>";
		if (g_CurrentID > 0) {
			text += AddClassEx(MakeRef(UrlSelf("hdrs", "&hMax=" + g_CurrentID), "<svg width='1em' height='1em'><use href='#list_icon'/></svg>"),"listOfBlockHeaders","title='List of blocks up to this one'");
			text += "&nbsp;";
			text += "Block " + AddClass(g_CurrentID, "blockHeight");
			text += "&nbsp;";
			text += AddClassEx(MakeRef(UrlBlock(g_CurrentID - 1), "<svg width='1em' height='1em'><use href='#left_icon'/></svg>"),"previousBlock","title='Previous block'");
		}
		else {
			text += "Treasury";
			text += "&nbsp;";
			text += AddClassEx("<svg width='1em' height='1em'><use href='#left_icon'/></svg>","previousBlock off","title=''");
		}
		text += AddClassEx(MakeRef(UrlBlock(g_CurrentID - 1 + 2), "<svg width='1em' height='1em'><use href='#right_icon'/></svg>"),"nextBlock","title='Next block'");
		text += "</h2>"

		const jData = JSON.parse(this.responseText);

		let j = jData["info"];
		if (j)
		{
			text += MakeCollapsibleBegin("Block Summary");
			text += "<table class='tableSummary'>";
			text += Obj2Html_TableRows(j["value"]);
			text += "</table>";
			text += MakeCollapsibleEnd();
		}

		text += MakeCollapsibleBegin("Block content");
	
		j = jData["inputs"];
		if (j)
		{
			text += "<h3>Inputs</h3>\n";
			text += MakeTableTxos(j, true);
		}

		j = jData["outputs"];
		if (j)
		{
			text += "<h3>Outputs</h3>\n";
			text += MakeTableTxos(j, false);
		}

		let jTbl = jData["kernels"];
		if (jTbl)
		{
			text += "<h3>Kernels</h3>\n";
			text += "\
			<table class='tableKernels'>\n\
				<thead><tr>\n\
					<th>ID</th>\n\
					<th>Fee</th>\n\
					<th>Height</th>\n\
					<th>Extra</th>\n\
				</tr></thead>\n\
			";

			for (let i = 0; i < jTbl.length; i++)
			{
				let jRow = jTbl[i];
				text += "<tr>";

				text += MakeCell(AddClassEx(jRow["id"], "kernelId", " title='" + jRow["id"] + "'"));
				text += MakeCellRA(Obj2Html(jRow["fee"]));
			
				let txtH = "";
				let jH = jRow["minHeight"];
				if (jH)
				{
					txtH = MakeBlock(jH);
					delete jRow.minHeight;
				}
				else
					txtH = "*";
				
				txtH += "-";

				jH = jRow["maxHeight"];
				if (jH)
				{
					txtH += MakeBlock(jH);
					delete jRow.maxHeight;
				}
				else
					txtH += "*";

				text += MakeCell(txtH);
			
				delete jRow.id;
				delete jRow.fee;
				text += MakeCell(Obj2Html(jRow));
			
				text += "</tr>";
			}
			text += "</table>"
		}

		text += MakeCollapsibleEnd();

		j = jData["totals"];
		if (j)
		{
			text += MakeCollapsibleBegin("Totals");
			text += "<table class='tableTotals'>";
			text += Obj2Html_TableRows(j["value"]);
			text += "</table>";
			text += MakeCollapsibleEnd();
		}

		j = jData["assets"];
		if (j)
		{
			text += MakeCollapsibleBegin("Assets state");
			text += MakeTblAssets(j);
			text += MakeCollapsibleEnd();
		}
		else
			text += MakeCAs(g_CurrentID);

		SetContent(text);
	}
	
	function get_CallRows(jRow)
	{
		if (jRow["type"] != "group")
			return 1;

		const jInner = jRow["value"];
		let retVal = 0;
		
		for (let i = 0; i < jInner.length; i++)
			retVal += get_CallRows(jInner[i]);

		return retVal;
	}

	function CallHistoryAddRow(jRow, depth, numRows)
	{
		let text = "";
		
		if (jRow["type"] == "group")
		{
			const jInner = jRow["value"];
			
			for (let i = 0; i < jInner.length; i++)
			{
				text += CallHistoryAddRow(jInner[i], depth, numRows);
				if (!i)
					depth++;
			}
		}
		else
		{
			text += "<tr>";
			
			// We use empty cells for subsequent contract calls at same height
			// (all these rows are kept together within a dedicated tbody).
			if (depth == 0) {
				// Display block height for main contract call
				text += MakeCellEx(MakeBlock(jRow[0])," class='mainCall'");
			} else {
				// Use an empty cell for subsequent contract calls
				text += MakeCellEx(""," class='subCall'");
			}

			text += MakeCell(Obj2Html(jRow[1]));
			text += MakeCell(Obj2Html(jRow[2]));
			text += MakeCell(Obj2Html(jRow[3]));
			text += MakeCell(Obj2Html(jRow[4]));
			text += MakeCell(MakeFundsTbl(jRow[5]["value"]));
			text += MakeCell(MakeFundsTbl(jRow[6]["value"]));
			text += MakeCell(Obj2Html(jRow[7]));
			
			text += "</tr>";
		}
		
		return text;
	}
	
	function MakeCollapsibleBegin(title, checked="checked", variant="")
	{
		// Create a random ID (to connect the checkbox to its label)
		let someId = "id_" + Math.floor(Math.random() * 1000000);
		// Create a checkbox, its label and a div for the collapsible content
		return "<div class='collapsible'>\n\
					<input type='checkbox' id='" + someId + "' class='collapsible-checkbox' " + checked + ">\n\
					<label for='" + someId + "' class='collapsible-label " + variant + "'>" + title + "</label>\n\
					<div class='collapsible-content " + variant + "'>\n";
	}
	
	function MakeCollapsibleEnd()
	{
		// Close the opened divs
		return "</div></div>\n";
	}
	
	function MakeLinkToOlderBlocks(jTblObj) // Link to go backwards one page of older blocks
	{
		// This function uses the information given by the node explorer to move pages backwards
		const jMore = jTblObj["more"];
		if (!jMore)
			return "";
			
		let urlObj = new URL(document.location);
		let args = urlObj.searchParams;
		
		for (let key in jMore)
			args.set(key, jMore[key]);
			
		return urlObj.pathname + "?" + args;
	}

	function MakeLinkToNewerBlocks(jTblObj) // Link to go forward one page of newer blocks
	{
		// Temporary hack:
		// The node explorer does not provide (yet?) parameters to move pages forward.
		// Until then, we use the parameter given to go backwards and simply add twice nMax to it.
		// This is imperfect, temporary, and -of course- only works for the Block Headers page...
		const jMore = jTblObj["more"];
		if (!jMore)
			return "";
			
		let urlObj = new URL(document.location);
		let args = urlObj.searchParams;
		
		for (let key in jMore) {
			if (key == "hMax") {
				args.set(key, jMore[key] - 0 + nMax*2);
			} else {
				args.set(key, jMore[key]);
			}
		}
			
		return urlObj.pathname + "?" + args;
	}

	function DisplayContractState()
	{
		const jData = JSON.parse(this.responseText);
		const jTblObj = jData["Calls history"];
		const jTbl = jTblObj["value"];
		
		let text = "<h2>\n"
		text += "Contract " + AddClass(g_CurrentID, "cidTitle");
		text += "</h2>\n"

		text += MakeCollapsibleBegin("Call history") + "\
		<table class='tableCallHistory'>\n\
			<thead><tr>\n\
				<th>Height</th>\n\
				<th>Cid</th>\n\
				<th>Kind</th>\n\
				<th>Method</th>\n\
				<th>Arguments</th>\n\
				<th>Funds</th>\n\
				<th>Emisison</th>\n\
				<th>Keys</th>\n\
			</tr></thead>\n\
		";

		// Skip first row
		for (let iRow = 1; iRow < jTbl.length; iRow++)
		{
			// Multiple contract calls are grouped in dedicated tbodies (HTML tables can have multiple tbodies!)
			text += "<tbody class='contractCall'>"
			text += CallHistoryAddRow(jTbl[iRow], 0, get_CallRows(jTbl[iRow]));
			text += "</tbody>"
		}
	
		text += "</table>";
		text +="<p>" + AddClassEx(MakeRef(MakeLinkToOlderBlocks(jTblObj), "Previous blocks..."),"more","title='Previous blocks'") + "</p>";
		
		text += MakeCollapsibleEnd();

		text += MakeCollapsibleBegin("State");
		text += Obj2Html(jData["State"]);
		text += MakeCollapsibleEnd();

		text += MakeCollapsibleBegin("Locked Funds");
		text += Obj2Html(jData["Locked Funds"]);
		text += MakeCollapsibleEnd();
		
		text += MakeCollapsibleBegin("Owned assets");
		text += Obj2Html(jData["Owned assets"]);
		text += MakeCollapsibleEnd();

		text += MakeCollapsibleBegin("Version history");
		text += Obj2Html(jData["Version History"]);
		text += MakeCollapsibleEnd();
		
		SetContent(text);
	}

	function DisplayHdrs()
	{
		const jData = JSON.parse(this.responseText);
		//const jTbl = jData["value"];

		let text = "<h2>\n"
		text += "Block headers";
		text += "&nbsp;";
		text += AddClassEx(MakeRef(MakeLinkToOlderBlocks(jData), "<svg width='1em' height='1em'><use href='#double_left_icon'/></svg>"),"olderBlocks","title='Previous blocks'");
		text += AddClassEx(MakeRef(MakeLinkToNewerBlocks(jData), "<svg width='1em' height='1em'><use href='#double_right_icon'/></svg>"),"newerBlocks","title='Newer blocks'");
		text += "</h2>\n"
		text += "<div class='divTableBlocks'>";

		text += Obj2Html(jData);
		text += "</div>";
		text +="<p>" + AddClassEx(MakeRef(MakeLinkToOlderBlocks(jData), "Previous blocks..."),"more","title='Previous blocks'") + "</p>";

		SetContent(text);
	}
	
	function DisplayStatus()
	{
		const jData = JSON.parse(this.responseText);
	
		let text = "<h2>Blockchain status</h2>";
		text += "<div class='divTableStatus'>"; // Class added to avoid adding filters to these specific tables...
		text += Obj2Html(jData);
		text += "</div>"

		SetContent(text);
	}

	function DisplayAssets()
	{
		const jData = JSON.parse(this.responseText);

		let text = "<h2>\n";
		if (g_CurrentID) {
			text += "Confidential Assets at block height " + MakeBlock(g_CurrentID);
			text += "&nbsp;";
			if (g_CurrentID > 1) {
				text += AddClassEx(MakeRef(UrlSelfWithID("assets", g_CurrentID - 1, ""), "<svg width='1em' height='1em'><use href='#left_icon'/></svg>"),"previousBlock","title='Previous block'");
			} else {
				text += AddClassEx("<svg width='1em' height='1em'><use href='#left_icon'/></svg>","previousBlock off","title=''");
			}
			text += AddClassEx(MakeRef(UrlSelfWithID("assets", g_CurrentID - 1 + 2, ""), "<svg width='1em' height='1em'><use href='#right_icon'/></svg>"),"nextBlock","title='Next block'");
		} else {
			text += "Current Confidential Assets";
		}
		text += "</h2>\n";

		text += MakeTblAssets(jData);

		SetContent(text);
	}

	function DisplayHistoricalBlocks()
	{
		let text = "<h2>Special historical blocks</h2>";
		text += "<table class='tableHistoricalBlocks'>\n\
			<thead><tr>\n\
				<th>Height</th>\n\
				<th>Description</th>\n\
			</tr></thead>\n";

		for (let n in specialBlocks)
		{
			let obj = specialBlocks[n];

			text += "<tr>";

			let blocks = "";
			if ("block_list" in obj) {
				for (let i in obj.block_list) { blocks += MakeBlock(obj.block_list[i]) + "<br>" }
			}
			if ("block_range" in obj) {
				blocks += MakeBlock(obj.block_range[0]) + "<br>to " + MakeBlock(obj.block_range[1])
			}
			text += MakeCellRA(blocks);

			let desc = "";
			if (obj.title) { desc += AddClassDiv(obj.title,"specialBlock_Title") }
			if (obj.description) { desc += AddClassDiv(obj.description,"specialBlock_Description") }
			if (obj.links) {
				for (let i in obj.links) { desc += AddClassDiv(obj.links[i][0] + "&nbsp;: " + MakeRef(obj.links[i][1],obj.links[i][1],"_blank"),"specialBlock_Link") }
			}
			text += MakeCell(desc);

			text += "</tr>";
		}
		text += "</table>";

		SetContent(text);
	}

	// GLOBAL VARIABLES

	// Array of objects listing the special historical blocks.
	// Remarks:
	// - Description can (and should) contain links to interesting explorer pages.
	// - External links are provided afterwards.
	// - "block_list" is used for a one or several individual blocks, "block_range" for all blocks between two.
	// - The list shall be completed: important tokens, first atomic swap, important smart contracts (Nephrite, DEX, Oracle, etc.).
	const specialBlocks = [
		{
			block_list: [0],
			title: "Treasury",
			description: "Beam emission schedule is inspired by Bitcoin's, but with 10 times more blocks (1 block per minute). The first halving occured after 1 year, and the following ones every 4 years. The total supply is 262,800,000 Beam. <b>For the first 5 years, 20% of the block rewards were sent to a Treasury</b>, that the <b>Beam Foundation</b> used to repay investors and fund development.<br>This Treasury is represented in the explorer as a <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=0\"' title='Treasury'>pseudo-block at height 0</a>, that contains pre-allocated UTXOs. Each UTXO corresponds to a particular allocation, and has an appropriate 'maturity' (which is the block height after which it can be spent). As usual, UTXOs amounts and their owners are concealed. However those UTXOs are arranged in groups of identical validity, and the blockchain source code contains a proof that allows verifying the total value of the group. That way, it's possible to verify how much value was released at each height. Since the treasury plan lasted 5 years, with UTXOs maturing each month (i.e. every 43,800 blocks), we can see <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=0\"' title='List Treasury UTXOs'>60 such groups</a>.",
			links: [
				["Beam emission schedule","https://medium.com/beam-mw/mimblewimble-emission-schedule-215551948259"],
				["Beam Foundation","https://www.beam-foundation.org"],
				["Treasury checksum","https://github.com/BeamMW/beam/blob/master/core/block_crypt.cpp#L2120"]
			]
		},
		{
			block_list: [1],
			title: "Genesis block",
			description: "The Beam project started in March 2018 and the first medium post introducing Beam to the world was published on July 19<sup>th</sup> 2018 (exactly two years after the original MimbleWimble paper was published!). After nine and a half months of development, <b>Beam launched the first ever MimbleWimble-based confidential cryptocurrency</b> on <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=1\"' title='Genesis block'>January 3<sup>rd</sup> 2019</a> (which was also the 10-year anniversary of Bitcoin genesis block!). There was no pre-mine nor ICO, and the Beam mainnet launched with 0 coins in existence (to prove that there was no pre-mine, Beam's genesis block lists the hash of Bitcoin's block 556833, mined on 2019–01–03 12:46:37 GMT, as previous block hash).",
			links: [
				["Original MimbleWimble paper","https://download.wpsoftware.net/bitcoin/wizardry/mimblewimble.txt"],
				["First Beam Medium post","https://medium.com/beam-mw/introducing-beam-f35096a923ec"],
				["Bitcointalk announcement","https://web.archive.org/web/20200506044733/https://bitcointalk.org/index.php?topic=5052151"],
				["Mainnet launch","https://medium.com/beam-mw/mimblewimble-mainnet-release-notes-8766e49e241d"],
				["Bitcoin's hash in Beam's genesis block","https://github.com/BeamMW/beam/blob/92bbc3137dfeb186a99935c3436c03871c188234/core/block_crypt.cpp#L2045"],
			]
		},
		{
			block_range: [25709, 25820],
			title: "Blockchain Stop Event",
			description: "On January 21<sup>st</sup> 2019, the Beam blockchain stopped producing blocks at block 25709. Beam developers immediately looked into it and released a hot fix a few hours later. No blocks were produced <a href='javascript:window.location.href=window.location.pathname + \"?type=hdrs&hMax=25710&nMax=2\"'>for 2.5 hours</a>, and no transactions were processed for <a href='javascript:window.location.href=window.location.pathname + \"?type=hdrs&hMax=25822&nMax=114\"' title='Block headers over the whole period'>112 blocks</a>, until blocks <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=25820\"'>25820</a> and <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=25822\"'>25822</a> processed all the pending ones. No funds were lost.",
			links: [ ["Postmortem analysis","https://medium.com/beam-mw/mimblewimble-blockchain-stop-event-postmortem-21012019-9a7ef38b2813"] ]
		},
		{
			block_list: [321321],
			title: "First Hard-Fork",
			description: "Beam's first hard-fork was performed as announced in the roadmap. The PoW algorithm was updated from <b>BeamHash I</b> to <b>BeamHash II</b>, which are upgrades from the vanilla Equihash on which they are based. Beam's strategy with these planned changes of the mining algorithm was to give GPU miners a head start, and then allow cheap ASICs to join in without disrupting the mining ecosystem.<br>After this hard-fork, a drop in difficulty was observed as not all miners performed a timely upgrade. However, after <a href='javascript:window.location.href=window.location.pathname + \"?type=hdrs&hMax=322327&nMax=1010\"' title='Block headers of the 17 hours after the hard-fork'>less than 24 hours</a>, the hashrate had gone back to its pre-fork value.",
			links: [ ["Medium post","https://medium.com/beam-mw/mimblewimble-hard-fork-first-completed-1171f9642e51"] ]
		},
		{
			block_list: [525600,525601],
			title: "First Halving",
			description: "As planned in the emission schedule, the <b>first halving</b> happened on January 5<sup>th</sup> 2020, about one year after the mainnet launch (60 minutes x 24 hours x 365 days = 525,600 blocks). This early first halving allowed to sync with Bitcoin's halving rythnm. Until then, the block reward was of 100 BEAM (80 for the miners and 20 for the treasury). After this first halving, the block reward was cut down to 50 BEAM (40 for the miners and 10 for the treasury). The next halvings are now happenning every 4 years.",
			links: [ ["Substack post","https://beamprivacy.substack.com/p/beam-2020-week-1-happy-halving"] ]
		},
		{
			block_list: [777777],
			title: "Second Hard-Fork",
			description: "Beam's second hard-fork was performed as announced in the roadmap. The PoW algorithm was updated from <b>BeamHash II</b> to <b>BeamHash III</b>, which is the final version in the planned strategy to balance GPU and ASIC mining. This hard-fork also saw the activation of the <a href='javascript:window.location.href=window.location.pathname + \"?type=assets\"'><b>Confidential Assets</b></a> (sometimes also called 'Privacy Tokens', and which were introduced in the first hard-fork but kept inactive) and the release of the <b>Lelantus-MW protocol</b> and its associated <b>one-side payments</b> (also known as <b>offline transactions</b>).",
			links: [
				["Medium post","https://medium.com/beam-mw/hard-fork-completed-72e8f1edb10b"],
				["BeamHash III presentation","https://docs.beam.mw/Beam_Hash_III_Slides.pdf"],
				["BeanHass III video","https://www.youtube.com/watch?v=WC3aCWCWxB4"]
			]
		},
		{
			block_list: [778579],
			title: "First Lelantus-MW transaction",
			description: "<b>Lelantus</b> is an exciting protocol for private financial transactions, first published in December 2018. It was initially developed for Firo (ex-ZCoin), but Beam core dev managed to adapt it to MimbleWimble, thanks to its use of similar cryptographic primitives. Contrary to MimbleWimble's 'interactive transactions' (also called <b>online transactions</b>, because both wallets need to come online within a 12-hour window to complete the transaction), Lelantus transactions (also called <b>offline transactions</b>) send the coins to a <b>Shielded Pool</b> where they are mixed with other coins (thus creating <b>an anonymity set that can grow up to 64k!</b>), and where the receiver wallet can retreive them later on.",
			links: [
				["Lelantus paper","https://lelantus.io/lelantus.pdf"],
				["Lelantus-MW adaptation","https://github.com/BeamMW/beam/wiki/Lelantus-MW"]
			]
		},
		{
			block_list: [778857],
			title: "First input UTXO from a Shielded Pool",
			description: "After a few transactions filling the <b>Lelantus Shielded Pool</b> with UTXOs, block <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=778857\"' title='Block details'>778857</a> saw the first use of one of these UTXOs as an input to a normal MimbleWimble transaction. We cannot know which one of the shielded UTXOs it was. However, as can be seen in the <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=778857\"' title='Block details'>block details</a>, the Shielded Pool at the time only contained 8 UTXOs, so its anonymity set was still quite low. Now, as the UTXOs from the Shielded Pool are never removed from the blockchain (there is no 'cut-through' for them, contrary to the MimbleWimble ones), its anonymity set keeps increasing linearly as people use Lelantus transactions. As can be seen in block <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=2878666\"'>2878666</a>, a few years later the Lelantus-MW <b>anonymity set has reached 18,989&nbsp;!</b>",
			links: null
		},
		{
			block_list: [780219],
			title: "Creation of the first Confidential Asset",
			description: "Two days after the second hard-fork, the <b>first Confidential Asset (with id:1)</b> was <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=780219\"'>created</a>. Although it has changed named since then, and seems to be <a href='javascript:window.location.href=window.location.pathname + \"?type=aid&id=1\"'>inactive today</a>, this first Confidential Asset was actually a draft for the subsequent <a href='javascript:window.location.href=window.location.pathname + \"?type=aid&id=9\"'>Tico coin (id:9)</a> which has been quite successful as <b>the first confidential meme coin</b>, with its fair, fun and feathered initial distribution!<br>As can be seen in the <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=2893306\"' title='Example in block 2893306'>block details</a> of any block, the transactions of confidential assets are as private as Beam transactions (i.e. no amount and no addresses are visible), and are actually even undistinguishable from Beam transactions themselves (the id of the transacted asset is shown to be in a [0-63] range, with id:0 being Beam itself)!<br>Since then, <a href='javascript:window.location.href=window.location.pathname + \"?type=assets\"'>numerous confidential assets</a> have been created (including the 'AMML' ones, created by the DEX smart contract to represent the shares of its Liquidity Pools). Confidential assets have an <b>unlimited supply</b> when created through CLI (the owner wallet or contract can mint as many as needed), or a <b>hard-capped max supply</b> when created through the <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=295fe749dc12c55213d1bd16ced174dc8780c020f59cb17749e900bb0c15d868\"' title='Smart contract call history'>Beam Asset Minter</a>.",
			links: [
				//["Tico website","https://www.ticotip.me"],
				["Tico's first anniversary","https://ticotipme.substack.com/p/tico-turns-1"],
				["Tico Telegram group","https://t.me/ticotipme"]
			]
		},
		{
			block_list: [1280000],
			title: "Third Hard-Fork (and wallet v6.0)",
			description: "This hard-fork brought the addition of the <b>Beam Virtual Machine (BVM)</b> as an infrastructure to create <b>Smart Contracts</b> (a.k.a. 'Shaders'), thus making Beam <b>the first privacy coin with smart contracts capabilities!</b><br>BVM smart contracts can be written in any WebAssembly compatible language (such as C++, Rust, Go, etc.) and are composed of two elements: the blockchain side (running on Beam nodes) and the wallet side (running in Beam wallet, together with the DApp front ends). This separation of chain-side and client-side logics allows very powerful and flexible applications.<br>Beam smart contracts are <b>transparent by default</b>, which means that <a href='javascript:window.location.href=window.location.pathname + \"?type=contracts\"'>we can see their state and their activity</a>. Nevertheless, <b>the users remain anonymous</b>, as their interactions with the smart contracts are based on normal confidential Beam transactions. With this approach, Beam's DeFi manages to provide 'efficient' markets (e.g. where we can see what is bought and sold) while still protection its users' privacy (e.g. we cannot see who buys and sells!).<br>By allowing such <b>privacy-preserving smart contract capabilities</b>, this hard-fork opened the doors to Beam becoming not only <b>a powerful 'Privacy DeFi' (PriFi) platform</b> but indeed a general-purpose <b>infrastructure for anything in Confidential Web3</b>!",
			links: [
				["Medium post","https://medium.com/beam-mw/hard-fork-completed-1608eb5ce439"],
				["Beam smart contracts introduction","https://github.com/BeamMW/shader-sdk/wiki/Beam-Smart-Contracts"],
				["Smart contracts documentation","https://beamx.gitbook.io/developer-documentation/beam-shaders"],
				["Some insights on the design","https://medium.com/beam-mw/beams-smart-contract-design-insights-from-the-lead-developer-df2aeabf02c4"]
			]
		},
		{
			block_list: [1280003],
			title: "Deployment of the first Smart Contract",
			description: "A few minutes after the third hard-fork, <b>the first smart contract</b> was deployed in block <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=1280003\"' title='Block details'>1280003</a>. The contract is a simple <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=3fdd4171972875e0ac8f0131b3da047e8323cc9c2c8d53327be427c455d2a716\"' title='Smart contract call history'>faucet</a> where people can deposit Beam coins so that any wallet can then get a small amount of it. Due to Beam's low transaction fees, this small amount is already enough for several transactions. Such a faucet is intended to help newcomers discovering the wallet for the first time, even if they don't have any Beam in it yet.<br>Since then, several other smart contracts have been developed, and the list of <a href='javascript:window.location.href=window.location.pathname + \"?type=contracts\"' title='List of all deployed smart contracts'>all deployed smart contracts</a> can be seen in the explorer, with the details of the call history for each of them, including the calls to each other, in interesting and powerful sequences (like <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=b8944fd3f6a62697a89b2a55acd1cb2e3893dadece99569706efa1da847dd440\"' title='Smart contract call history'>Nephrite</a>, the confidential stable coin, interacting with both the <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=4f160f01dcc6751e61d793279b803328d5332125fe8492e93ee8f3bfe9abe13b\"' title='Smart contract call history'>Oracle</a> and the <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=0066b12078623df132b691001b25d7eb94b207b42c018020c9e58152e21ecd25\"' title='Smart contract call history'>DAO Vault</a>).",
			links: [ ["Examples of smart contracts","https://github.com/BeamMW/beam/tree/master/bvm/Shaders"] ]
		},
		{
			block_list: [1464852],
			title: "BeamX creation",
			description: "The <b>BeamX</b> confidential asset (<a href='javascript:window.location.href=window.location.pathname + \"?type=aid&id=7\"' title='See history of Confidential Asset id:7'>with id:7</a>) is <b>the governance token of the 'BeamX DAO'</b> towards which the <b>Beam Foundation</b> is now transitioning. Its 100,000,000 units were minted all at once by the <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=3f3d32e38cb27ac7b5b67343f81cf2f8bc53217eb995cc6c5d78ddc5e7b0642b\"' title='Smart contract call history'>DAO Core</a> smart contract, which would later distribute these units over a period of 4 years according to a predefined schedule. Part of the BeamX supply is reserved for liquidity incentives towards Beam's DeFi ecosystem (staking campaigns, liquidity provider rewards, etc.).",
			links: [
				["The BeamX DAO","https://www.beamxdao.org"],
				["The BeamX token","https://medium.com/beam-mw/introducing-beamx-privacy-by-default-maximum-confidentiality-defi-ecosystem-629670b905ba"]
			]
		},
		{
			block_list: [1466500],
			title: "Start of the first BeamX staking campaign",
			description: "A first 3-month (131,400 blocks) staking campaign was launched to let users <b>earn BeamX rewards by locking their Beam coins</b>. 1,000,000 BEAMX tokens (1% of the total supply) were distributed this way, and people started staking Beam right after launch, on block <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=3f3d32e38cb27ac7b5b67343f81cf2f8bc53217eb995cc6c5d78ddc5e7b0642b&hMax=1466501&nMax=200\"' title='List of deposits into the staking smart contract at block 1466501'>1466501</a>. Although the campaign ended a long time ago, we can see in the 'Locked Funds' section of the contract details that the <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=3f3d32e38cb27ac7b5b67343f81cf2f8bc53217eb995cc6c5d78ddc5e7b0642b&\"' title='Smart contract call history'>DAO Core</a> contract still holds many Beams that users have not claimed back yet!... Are they yours? ;-)",
			links: [
				["First BeamX reward campaign","https://medium.com/@beam_privacy/heres-everything-you-need-to-know-to-prepare-for-beam-staking-108eef344f7d"],
				["Details on the campaign","https://medium.com/beam-mw/beamers-hodlers-beam-staking-is-coming-513bd196af57"]
			]
		},
		{
			//block_list: [1790000],
			block_list: [1820000],
			title: "Fourth Hard-Fork (and wallet v7.0)",
			description: "This hard-fork introduced <b>'High-Frequency Transactions' (HFTX)</b> on both node and wallet sides, and <b>IPFS storage integration</b> on the wallet side. HFTX improve resistance to MEV, front-running and sandwich attacks by defining strict inclusion rules for transactions, thus protecting users from unwanted outcomes (as the submitted transactions can only be included into a block in their exact specific sequence).<br>On the wallet side, the IPFS integration allows storing data (such as NFTs) efficiently in a decentralized manner while reducing blockchain bloat. Thus, every Beam wallet today is at the same time a <b>blockchain node</b> (to submit transactions and verify blocks), an <b>SBBS node</b> (to allow secure communication between wallets), and an <b>IPFS node</b> (to allow decentralized storage, including for DApp front ends distribution).<br>This Hard Fork went smoothly and the difficulty remained fairly stable.",
			links: [
				["Medium post","https://medium.com/beam-mw/beam-hard-fork-completed-903ce2b15b51"],
				["BIP-1 and BIP-2 results","https://medium.com/beam-mw/beam-bip-1-bip-2-results-229d8289f54d"]
			]
		},
		{
			block_list: [1920000],
			title: "Fifth Hard-Fork (and wallet v7.1)",
			description: "As discussed on the Beam Forum, this hard-fork reduced the issuance cost of Confidential Assets from 3000 to 10 BEAM only. The result can be seen in <a href='javascript:window.location.href=window.location.pathname + \"?type=assets&id=1981005\"' title='List of Confidential Assets'>the CAs being created</a> (or re-created) after the fork</a>. The hard-fork also added smart contracts enhancements allowing them to verify fork heights (to support fork-dependent features). On the wallet side, DApp support for the <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=af4550f1f8a6051ffeffea06e0cb978f8076fdfc2101d2273d4e62c86540bc5e\"' title='Smart contract call history'>BANS</a> (Beam Anonymous Name System) was improved.",
			links: [
				["Announcement","https://medium.com/beam-mw/beam-hard-fork-announcement-3e999dfba178"],
				["Forum post for BIP-1","https://forum.beam.mw/t/bip-1-reduce-ca-minting-cost/116"]
			]
		},
		{
			block_list: [2272779],
			title: "Blockchain incident",
			description: "On may 2023, the Beam <b>blockchain stopped producing blocks</b> for <a href='javascript:window.location.href=window.location.pathname + \"?type=hdrs&hMax=2272781&nMax=3\"' title='Blockchain stop for 103 minutes'>103 minutes</a>. After watching carefully the blockchain activity, the core team managed to identify and correct the problem (which was due to an incorrect sorting of the kernels). All pending transactions were recorded on block <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=2272781\"' title='Blockchain stop for 103 minutes'>2272781</a>. No funds were lost.",
			links: [ ["Incident analysis","https://medium.com/beam-mw/beam-blockchain-incident-analysis-hotfix-for-minor-stoppage-cb96009b8097"] ]
		},
		{
			block_list: [2628000,2628001],
			title: "Second Halving & End of the 5-year treasury allocation",
			description: "The second halving came shortly after the <b>5-year anniversary of the Beam blockchain</b>, in January 2023. It reduced the block rewards from 50 BEAM (block <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=2628000\"'>2628000</a>) to 25 BEAM (block <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=2628001\"'>2628001</a>).<br>This halving also saw the <a href='javascript:window.location.href=window.location.pathname + \"?type=block&id=0\"' title='Treasury'>end of the 5-year treasury allocation</a>: from then on, 100% of the block rewards go to the miners. However, even without treasury allocation, the project is still funded as the <a href='javascript:window.location.href=window.location.pathname + \"?type=contract&id=0066b12078623df132b691001b25d7eb94b207b42c018020c9e58152e21ecd25\"' title='Smart contract call history'>DAO Vault</a> receives a share of fees from several DApps of the <b>BeamX ecosystem</b> (DEX, Nephrite, BANS, etc.).",
			links: [ ["The 5-year recap","https://medium.com/beam-mw/celebrating-beams-5th-anniversary-kick-off-2024-with-beam-wallet-7-5-f5f3cb54e30f"] ]
		}
	];

	// Current block, asset id or contract id
	let g_CurrentID = "";

	// URL and explorer node parameters
	const args = (new URL(document.location)).searchParams;
	const type = args.get("type");
	g_CurrentID = args.get("id");
	
	//let urlPrefix = "http://localhost:17328/";
	let urlPrefix = "http://116.203.118.51:8100/";
	
	// Request "nice" formatting from the node (timestamps will be expanded into YYYYY-MM-DD, amounts formatted as XXX,XXX,XXX.YYYYYYYY, etc.)
	let urlSuffix = "?exp_am=1";
	
	const hMax = args.get("hMax");
	if (hMax)
		urlSuffix += "&hMax=" + hMax;
	
	let nMax = args.get("nMax");
	if (!nMax)
		nMax = 100;

	// Static page
	if (type == "historical")
	{
		window.onload = DisplayHistoricalBlocks;
	}
	// Dynamic pages (explorer node requests)
	else
	{
		const xmlhttp = new XMLHttpRequest();

		if (type == "aid")
		{
			xmlhttp.onload = DisplayAssetHistory;
			xmlhttp.open("GET", urlPrefix +  "asset" + urlSuffix + "&id=" + g_CurrentID);
			xmlhttp.send();
		}
		else if (type == "block")
		{
			xmlhttp.onload = DisplayBlock;
			//if (kernel) {
			//	console.log(urlPrefix +  "block" + urlSuffix + "&kernel=" + kernel);
			//	xmlhttp.open("GET", urlPrefix +  "block" + urlSuffix + "&kernel=" + kernel);
			//} else {
			//	console.log(urlPrefix +  "block" + urlSuffix + "&height=" + g_CurrentID);
				xmlhttp.open("GET", urlPrefix +  "block" + urlSuffix + "&height=" + g_CurrentID);
			//}
			xmlhttp.send();
		}
		else if (type == "contract")
		{
			xmlhttp.onload = DisplayContractState;
			xmlhttp.open("GET", urlPrefix +  "contract" + urlSuffix + "&id=" + g_CurrentID + "&nMaxTxs=" + nMax);
			xmlhttp.send();
		}
		else if (type == "hdrs")
		{
			// Data that can be requested (lowercase if relative, uppercase if absolute):
			// H = Hash
			// T = Time
			// d = Difficulty
			// f = Fee
			// k = Kernels
			// o = MW Outputs
			// i = MW Inputs
			// u = MW Utxos
			// z = Shielded Outputs
			// y = Shielded Inputs
			// b = Active Contracts
			// p = Contract Calls
			// c = SizeCompressed
			// a = SizeArchive
			xmlhttp.onload = DisplayHdrs;
			xmlhttp.open("GET", urlPrefix +  "hdrs" + urlSuffix + "&cols=THdfkoizyp" + "&nMax=" + nMax);
			xmlhttp.send();
		}
		else if (type == "contracts")
		{
			xmlhttp.onload = DisplayContracts;
			xmlhttp.open("GET", urlPrefix +  "contracts" + urlSuffix);
			xmlhttp.send();
		}
		else if (type == "assets")
		{
			xmlhttp.onload = DisplayAssets;
			xmlhttp.open("GET", urlPrefix +  "assets" + urlSuffix + "&height=" + g_CurrentID);
			xmlhttp.send();
		}
		else
		{
			xmlhttp.onload = DisplayStatus;
			xmlhttp.open("GET", urlPrefix +  "status" + urlSuffix);
			xmlhttp.send();
		}
	}
</script>

<!-- ------------ SECTION 4 - EXTRA JS FUNCTIONS ------------ --> 
<script>

	// ADD EXPAND OPTIONS TO ALL TEXT OF TYPE HASH OR METADATA (CSS WILL DISPLAYED THEM TRUNCATED BY DEFAULT)
	function addExpandOptions() {
		// Text of type Hash (truncated/expanded)
		for (let myHash of document.querySelectorAll(".cid, .kernelId, .blob, .commitment")) {
			// Check if the text contains a link
			let myClass = (myHash.querySelector("a")) ? "truncated withLink" : "truncated";
			// Add a span to truncate the text, and another span to hold the clickable symbol
			let myHTML = myHash.innerHTML;
			myHash.innerHTML = "<span class='" + myClass + "'>" + myHTML + "</span><span class='expand' title='Toggle' hidden><svg width='1.2em' height='1.2em'><use href='#eye_icon'/></svg></span>";
			// Add event listener on the symbol
			myHash.querySelector(".expand").addEventListener("click", expandHash);
		}
		// Text of type Metadata (reduced/full)
		for (let myMetadata of document.querySelectorAll(".metadata")) {
			// Add a span to truncate the text, and another span to hold the clickable symbol
			let myHTML = myMetadata.innerHTML;
			myMetadata.innerHTML = "<span class='reduced'>" + myHTML + "</span><span class='extend' title='Toggle' hidden><svg width='1.2em' height='1.2em'><use href='#eye_icon'/></svg></span>";
			// Add event listener on the symbol
			myMetadata.querySelector(".extend").addEventListener("click", expandMetadata);
		}
	}

	function expandHash(e) {
		// Get element, table and column number of the event
		let input = e.currentTarget;
		// If item is in table, expand the whole column
		if (input.closest('table')) {
			let col = input.closest('th,td').cellIndex;
			let table = input.closest('table');
			// Loop on all cells in that column
			for (let myRow of table.rows) {
				// Remove all truncated classes in the cell
				for (let myItem of myRow.cells[col].querySelectorAll(".truncated")) {
					myItem.classList.remove("truncated");
					myItem.classList.add("expanded");
					// Switch action of the clickable symbols
					myItem.nextElementSibling.removeEventListener("click", expandHash);
					myItem.nextElementSibling.addEventListener("click", truncateHash);
				}
			}
		} else {
			// Expand only the item and its siblings
			for (let myItem of input.parentNode.querySelectorAll(".truncated")) {
				myItem.classList.remove("truncated");
				myItem.classList.add("expanded");
				// Switch action of the clickable symbols
				myItem.nextElementSibling.removeEventListener("click", expandHash);
				myItem.nextElementSibling.addEventListener("click", truncateHash);
			}
		}
	}

	function truncateHash(e) {
		// Get element, table and column number of the event
		let input = e.currentTarget;
		// If item is in table, truncate the whole column
		if (input.closest('table')) {
			let col = input.closest('th,td').cellIndex;
			let table = input.closest('table');
			// Loop on all cells in that column
			for (let myRow of table.rows) {
				// Remove all expanded classes in the cell
				for (let myItem of myRow.cells[col].querySelectorAll(".expanded")) {
					myItem.classList.remove("expanded");
					myItem.classList.add("truncated");
					// Switch action of the clickable symbols
					myItem.nextElementSibling.removeEventListener("click", truncateHash);
					myItem.nextElementSibling.addEventListener("click", expandHash);
				}
			}
		} else {
			// Expand only the item and its siblings
			for (let myItem of input.parentNode.querySelectorAll(".expanded")) {
				myItem.classList.remove("expanded");
				myItem.classList.add("truncated");
				// Switch action of the clickable symbols
				myItem.nextElementSibling.removeEventListener("click", truncateHash);
				myItem.nextElementSibling.addEventListener("click", expandHash);
			}
		}
	}

	function expandMetadata(e) {
		// Expand selected metadata only
		let input = e.currentTarget;
		for (let myItem of input.parentNode.querySelectorAll(".reduced")) {
			myItem.classList.remove("reduced");
			myItem.classList.add("full");
			// Switch action of the clickable symbols
			myItem.nextElementSibling.removeEventListener("click", expandMetadata);
			myItem.nextElementSibling.addEventListener("click", truncateMetadata);
		}
	}

	function truncateMetadata(e) {
		// Truncate selected metadata only
		let input = e.currentTarget;
		for (let myItem of input.parentNode.querySelectorAll(".full")) {
			myItem.classList.remove("full");
			myItem.classList.add("reduced");
			// Switch action of the clickable symbols
			myItem.nextElementSibling.removeEventListener("click", truncateMetadata);
			myItem.nextElementSibling.addEventListener("click", expandMetadata);
		}
	}

	function expandEverything() {
		// Expand all truncated Hashes
		for (let myItem of document.querySelectorAll(".truncated")) {
			myItem.classList.remove("truncated");
			myItem.classList.add("expanded");
			// Switch action of the clickable symbols
			myItem.nextElementSibling.removeEventListener("click", expandHash);
			myItem.nextElementSibling.addEventListener("click", truncateHash);
		}
		// Expand all truncated Metadata
		for (let myItem of document.querySelectorAll(".reduced")) {
			myItem.classList.remove("reduced");
			myItem.classList.add("full");
			// Switch action of the clickable symbols
			myItem.nextElementSibling.removeEventListener("click", expandMetadata);
			myItem.nextElementSibling.addEventListener("click", truncateMetadata);
		}
		// Expand all small collapsible blocks
		for (let myItem of document.querySelectorAll(".collapsible-checkbox")) {
			if (myItem.nextElementSibling.classList.contains("small")) {
				myItem.checked = true;
			}
		}
		// Switch action of the main clickable symbol
		let icon = document.querySelector("#ExpandAll");
		icon.setAttribute("href", "javascript:truncateEverything();");
		icon.setAttribute("title", "Collapse everything");
	}

	function truncateEverything() {
		// Truncate all Hashes
		for (let myItem of document.querySelectorAll(".expanded")) {
			myItem.classList.remove("expanded");
			myItem.classList.add("truncated");
			// Switch action of the clickable symbols
			myItem.nextElementSibling.removeEventListener("click", truncateHash);
			myItem.nextElementSibling.addEventListener("click", expandHash);
		}
		// Truncate all Metadata
		for (let myItem of document.querySelectorAll(".full")) {
			myItem.classList.remove("full");
			myItem.classList.add("reduced");
			// Switch action of the clickable symbols
			myItem.nextElementSibling.removeEventListener("click", truncateMetadata);
			myItem.nextElementSibling.addEventListener("click", expandMetadata);
		}
		// Collapse all small collapsible blocks
		for (let myItem of document.querySelectorAll(".collapsible-checkbox")) {
			if (myItem.nextElementSibling.classList.contains("small")) {
				myItem.checked = false;
			}
		}
		// Switch action of the main clickable symbol
		let icon = document.querySelector("#ExpandAll");
		icon.setAttribute("href", "javascript:expandEverything();");
		icon.setAttribute("title", "Expand everything");
	}

	// ALLOW ADDING FILTERS TO FIRST ROW OF ALL LONG TABLES
	function addFilterOption() {
		for (let myTable of document.getElementsByTagName("table")) {
			// Ignore tables of certain specific classes
			if (!myTable.classList.contains("tableTotals") && !myTable.classList.contains("tableSummary") && !myTable.closest('.divTableStatus')) {
				let myRow = myTable.rows[0];
				// If all cells of the first row are <th> or have a span with a "th" class, then mark the row as header.
				// We also enforce the use of <thead> to ensure that the row won't be included in the tbodies that will be filtered and sorted.
				// And since Chrome 83 (as in Beam Wallet) can only do 'sticky' on 'th' elements, we also change all its 'td' into 'th'.
				if ((myRow.querySelectorAll("td > span.th").length + myRow.querySelectorAll("th").length) == myRow.cells.length) {
					// If that first row is not already inside a thead (which means it's implicitely inside a tbody), then create a thead and move the row inside it.
					if (myRow.parentNode.nodeName != "THEAD") {
						let myTHead = myTable.createTHead();
						myTHead.appendChild(myRow);
					}
					// Mark the row as header
					myRow.classList.add("headerRow");
					// Define all cells in this first row as 'th' (remark: any attribute of those cells are lost, but we don't care)
					for (let myTd of myRow.cells) {
						let myTh = document.createElement("th");
						myTh.innerHTML = myTd.innerHTML;
						myTd.replaceWith(myTh);
					}
					// Add filters only to tables with more than a 5 lines
					if (myTable.rows.length > 5) {
						myRow.classList.add("filtersOff");
						myRow.addEventListener("click", addSortAndSearch);
						myRow.title = "Click to activate filters"; // This is for the tooltip
					} else {
						myRow.classList.add("filtersNot");
					}
				}
			}
		}
	}

	// ADD SORT AND SEARCH FILTERS TO FIRST ROW OF A GIVEN TABLE
	function addSortAndSearch(e)
	{
		// Get element of the event (the first row)
		let myRow = e.currentTarget;

		// Replace previous class and remove event and title (tooltip)
		myRow.classList.remove("filtersOff");
		myRow.classList.add("filtersOn");
		myRow.removeEventListener("click", addSortAndSearch);
		myRow.removeAttribute("title");

		// Apply to each cell of the first row (whether 'th' or 'td', it doesn't matter)
		for (let myHeader of myRow.cells) {
			// Wrap each header text into a div (will be clickable for sorting),
			// and then add a search input field below it.
			let myHTML = myHeader.innerHTML;
			myHeader.innerHTML = "\
				<div class='headerCell'>\n\
					<div class='sortable' title='Sort column'>" + myHTML + "</div>\n\
					<div class='searchable'><input type='text' class='search' title='Enter search term' size='5' placeholder='&#x1F50E;&#xFE0E;&nbsp;' autocomplete='off'></div>\n\
				</div>\n";
			// Add event listeners to all elements
			myHeader.querySelector(".sortable").addEventListener("click", sortTable);
			myHeader.querySelector(".search").addEventListener("keyup", filterTable);
		}
	}

	// SORT ROWS BY CLICKING ON HEADERS (first ascending, then descending)
	function sortTable(e) {
		// Declare variables
		let input, col, headRow, table, nbr_tbodies, dir, items, switching, i, x, y, xVal, yVal, shouldSwitch, switchcount = 0;

		// Get element, table and column number of the event
		input = e.currentTarget;
		col = input.closest('th,td').cellIndex;
		headRow = input.closest('tr');
		table = input.closest('table');
		nbr_tbodies = table.tBodies.length;

		// Set the default sorting direction as descending
		// (or switch to ascending if already sorted descending)
		dir = (input.classList.contains("desc")) ? "asc" : "desc";

		// Reset sorting classes and titles in all headers of this table
		for (let myHeader of headRow.getElementsByClassName("sortable")) {
			myHeader.classList.remove("asc");
			myHeader.classList.remove("desc");
			myHeader.title = "Sort column";
		}

		// Get the list of rows or tbodies to be sorted
		// (Remark: There is always at least one tbody, even if not explictely defined)
		items = (nbr_tbodies > 1) ? table.tBodies : table.tBodies[0].rows;
		// Make an array with the items to be sorted
		let itemsArray = Array.from(items);

		// Make an array from the content of the cells in the selected column
		let colArray = itemsArray.map(function(item, index) {
			// Get the content of the cell in the column being sorted
			// (for tbodies with multiple lines, we concatenate the content of their cells in that column)
			let val = "";
			let myCell;
			if (nbr_tbodies > 1) {
				// Loop on all rows of the tbody
				for (let trow of item.rows) {
					// Concatenate content of each cell
					if (val != "") {val += "\n"};
					val += trow.cells[col].innerText;
				}
			} else {
				// Get content of the cell
				val = item.cells[col].innerText;
			}
			// Remove comas (just for numbers to be recognized as such).
			// And add its initial index (it will allow reordering the actual table rows or tbodies).
			let valArray = [val.replace(/,/g,''), index];
			return valArray;
		});

		// We initialise two collators for sorting:
		// One for "alphabetical sorting" (character by character, insensitive to case and accents).
		// One for "natural sorting" (same, except numbers are treated numerically: "Asset-1" < "Asset-2" < "Asset-10").
		let collator1 = Intl.Collator("en-US", {numeric: false, sensitivity: "base", usage: "sort", ignorePunctuation: "false"});
		let collator2 = Intl.Collator("en-US", {numeric: true, sensitivity: "base", usage: "sort", ignorePunctuation: "false"});

		// Sort the array (in ascending order by default)
		colArray.sort(function([a,b],[c,d]) {
			// Compare as numbers
			if (!isNaN(a) && !isNaN(c)) {return a - c}
			// Compare as address
			else if (/^[a-fA-F0-9]*$/.test(a) && /^[a-fA-F0-9]*$/.test(c)) {return collator1.compare(a,c)}
			// Compare as other strings
			else {return collator2.compare(a,c)}
		});
		// Reverse the array for descending order
		if (dir == "desc") {colArray.reverse();}

		// Get the 'parent' of the sorted items (i.e. the tbody in the case of rows, or the table in the case of tbodies)
		// Remark: The parent of a row is always a tbody, even if not explictely defined.
		let parent = items[0].parentNode;
		// Loop through the array of sorted cells to reorder the table rows or tbodies
		for (let sortedCol of colArray) {
			// Move each corresponding row or tbody to the end of the table.
			parent.appendChild(itemsArray[sortedCol[1]]);
		}

		// Update class and title in header by adding the sorting direction
		input.classList.add(dir);
		input.title = (dir == "desc") ? "Sort ascending" : "Sort descending";
	}

	// FILTER ROWS (OR GROUPS OF ROWS)
	function filterTable(e) {
		// Declare variables
		let table, tbodies, rows, trows, headers, input, filter, i, ii, j, k, td, txtValue, status;
		
		// Get tbodies and rows
		table = e.currentTarget.closest('table');
		tbodies = table.tBodies;
		rows = table.rows;
		headers = rows[0].cells;

		// If multiple tbodies are present, filtering will be done by tbodies instead of rows
		// (the inner rows in each tbody thus always being kept together)

		// Initialize results arrays with all 1 (i.e. all rows or tbodies are visible)
		let results_tbodies = new Array(tbodies.length).fill(1);
		let results_rows = new Array(rows.length).fill(1);

		// Always check again all header cells (so that filters on multiple columns can be combined!)
		for (j = 0; j < (headers.length); j++) {
			// Get search input field
			input = headers[j].querySelector(".search");
			// Get search query (we use toUpperCase() to perform a case-insensitive search)
			filter = input.value.toUpperCase();
			// Apply search query only if it's non-empty
			if (filter != "") {
				// Loop on all rows within all tbodies
				for (k = 0; k < (tbodies.length); k++) {
					// Only test cells if the tbody is not already marked as hidden
					if (results_tbodies[k] != 0) {
						// In case of multiple tbodies, start by hidding the tbody
						// (it will be displayed back if at least one of its rows matches the search query)
						if (tbodies.length > 1) { results_tbodies[k] = 0 }
						// Loop on all rows of the tbody
						trows = tbodies[k].rows;
						for (i = 0; i < (trows.length); i++) {
							// Get the overall index of the row in the table (independent of tbodies)
							// Remark: i and ii will be equal in the case of one single tbody
							ii = trows[i].rowIndex;
							// Only test the cell if the row is not already marked as hidden
							if (results_rows[ii] != 0) {
								// Get cell
								td = trows[i].cells[j];
								if (td) {
									// Get cell content
									txtValue = td.textContent || td.innerText;
									// If there are multiple tbodies, then filter by tbodies
									if (tbodies.length > 1) {
										// Mark tbody back as visible as soon as one of its rows matches
										// (and then stop looping on its rows)
										if (txtValue.toUpperCase().indexOf(filter) != -1) {
											results_tbodies[k] = 1;
											break;
										}
									// If there is only one tbody, then filter by rows
									} else {
										// Hide row if there is no match
										if (txtValue.toUpperCase().indexOf(filter) == -1) {
											results_rows[ii] = 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		// Special hack to avoid a display bug on Chrome 83 (when used as Beam Wallet DApp):
		// If a tbody is hidden, then each of its rows must also be hidden!
		if (tbodies.length > 1) {
			// Loop on all tbodies
			for (k = 0; k < (tbodies.length); k++) {
				// Loop on all rows of the tbody
				trows = tbodies[k].rows;
				for (i = 0; i < (trows.length); i++) {
					// Get the overall index of the row in the table (independent of tbodies)
					ii = trows[i].rowIndex;
					// Set status of the row identical to the tbody it belongs to
					results_rows[ii] = results_tbodies[k];
				}
			}
		}
		// Apply final results by setting the visibility of all tbodies and rows
		for (k = 0; k < (tbodies.length); k++) {
			status = (results_tbodies[k] == 0) ? "collapse" : "visible";
			tbodies[k].style.visibility = status;
		}
		for (ii = 1; ii < (rows.length); ii++) {
			status = (results_rows[ii] == 0) ? "collapse" : "visible";
			rows[ii].style.visibility = status;
		}
	}

	// SCROLL DOWN TO BOTTOM OR BACK TO TOP
	window.onscroll = function() {scrollFunction()};
	// When the user scrolls away 40px from top or bottom of the page, show the up or down buttons
	function scrollFunction() {
		let myTopButton = document.getElementById("TopButton");
		if (document.body.scrollTop > 40 || document.documentElement.scrollTop > 40) {
			myTopButton.style.display = "block";
		} else {
			myTopButton.style.display = "none";
		}
		let myBottomButton = document.getElementById("BottomButton");
		if (Math.abs(document.body.scrollHeight - document.body.scrollTop - document.body.clientHeight) > 40 || Math.abs(document.documentElement.scrollHeight - document.documentElement.scrollTop - document.documentElement.clientHeight) > 40) {
			myBottomButton.style.display = "block";
		} else {
			myBottomButton.style.display = "none";
		}
	}
	// Scroll to the top of the document
	function topFunction() {
		document.body.scrollTop = 0; // For Safari
		document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
	} 
	// Scroll to the bottom of the document
	function bottomFunction() {
		document.body.scrollTop = Math.abs(document.body.scrollHeight - document.body.clientHeight); // For Safari
		document.documentElement.scrollTop = Math.abs(document.documentElement.scrollHeight - document.documentElement.clientHeight); // For Chrome, Firefox, IE and Opera
	} 

</script>

</body>
</html>
