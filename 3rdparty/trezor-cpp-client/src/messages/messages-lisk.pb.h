// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-lisk.proto

#ifndef PROTOBUF_INCLUDED_messages_2dlisk_2eproto
#define PROTOBUF_INCLUDED_messages_2dlisk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2dlisk_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2dlisk_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messages_2dlisk_2eproto();
namespace hw {
namespace trezor {
namespace messages {
namespace lisk {
class LiskAddress;
class LiskAddressDefaultTypeInternal;
extern LiskAddressDefaultTypeInternal _LiskAddress_default_instance_;
class LiskGetAddress;
class LiskGetAddressDefaultTypeInternal;
extern LiskGetAddressDefaultTypeInternal _LiskGetAddress_default_instance_;
class LiskGetPublicKey;
class LiskGetPublicKeyDefaultTypeInternal;
extern LiskGetPublicKeyDefaultTypeInternal _LiskGetPublicKey_default_instance_;
class LiskMessageSignature;
class LiskMessageSignatureDefaultTypeInternal;
extern LiskMessageSignatureDefaultTypeInternal _LiskMessageSignature_default_instance_;
class LiskPublicKey;
class LiskPublicKeyDefaultTypeInternal;
extern LiskPublicKeyDefaultTypeInternal _LiskPublicKey_default_instance_;
class LiskSignMessage;
class LiskSignMessageDefaultTypeInternal;
extern LiskSignMessageDefaultTypeInternal _LiskSignMessage_default_instance_;
class LiskSignTx;
class LiskSignTxDefaultTypeInternal;
extern LiskSignTxDefaultTypeInternal _LiskSignTx_default_instance_;
class LiskSignTx_LiskTransactionCommon;
class LiskSignTx_LiskTransactionCommonDefaultTypeInternal;
extern LiskSignTx_LiskTransactionCommonDefaultTypeInternal _LiskSignTx_LiskTransactionCommon_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAssetDefaultTypeInternal;
extern LiskSignTx_LiskTransactionCommon_LiskTransactionAssetDefaultTypeInternal _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateTypeDefaultTypeInternal;
extern LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateTypeDefaultTypeInternal _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureTypeDefaultTypeInternal;
extern LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureTypeDefaultTypeInternal _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_default_instance_;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType;
class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureTypeDefaultTypeInternal;
extern LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureTypeDefaultTypeInternal _LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_default_instance_;
class LiskSignedTx;
class LiskSignedTxDefaultTypeInternal;
extern LiskSignedTxDefaultTypeInternal _LiskSignedTx_default_instance_;
class LiskVerifyMessage;
class LiskVerifyMessageDefaultTypeInternal;
extern LiskVerifyMessageDefaultTypeInternal _LiskVerifyMessage_default_instance_;
}  // namespace lisk
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> ::hw::trezor::messages::lisk::LiskAddress* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskAddress>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskGetAddress* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskGetAddress>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskGetPublicKey* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskGetPublicKey>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskMessageSignature* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskMessageSignature>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskPublicKey* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskPublicKey>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignMessage>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignTx* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskSignedTx* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignedTx>(Arena*);
template<> ::hw::trezor::messages::lisk::LiskVerifyMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::lisk::LiskVerifyMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hw {
namespace trezor {
namespace messages {
namespace lisk {

enum LiskSignTx_LiskTransactionCommon_LiskTransactionType {
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_Transfer = 0,
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_RegisterSecondPassphrase = 1,
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_RegisterDelegate = 2,
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_CastVotes = 3,
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_RegisterMultisignatureAccount = 4,
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_CreateDapp = 5,
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_TransferIntoDapp = 6,
  LiskSignTx_LiskTransactionCommon_LiskTransactionType_TransferOutOfDapp = 7
};
bool LiskSignTx_LiskTransactionCommon_LiskTransactionType_IsValid(int value);
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon_LiskTransactionType_LiskTransactionType_MIN = LiskSignTx_LiskTransactionCommon_LiskTransactionType_Transfer;
const LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon_LiskTransactionType_LiskTransactionType_MAX = LiskSignTx_LiskTransactionCommon_LiskTransactionType_TransferOutOfDapp;
const int LiskSignTx_LiskTransactionCommon_LiskTransactionType_LiskTransactionType_ARRAYSIZE = LiskSignTx_LiskTransactionCommon_LiskTransactionType_LiskTransactionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LiskSignTx_LiskTransactionCommon_LiskTransactionType_descriptor();
inline const ::std::string& LiskSignTx_LiskTransactionCommon_LiskTransactionType_Name(LiskSignTx_LiskTransactionCommon_LiskTransactionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_descriptor(), value);
}
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionType_Parse(
    const ::std::string& name, LiskSignTx_LiskTransactionCommon_LiskTransactionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LiskSignTx_LiskTransactionCommon_LiskTransactionType>(
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_descriptor(), name, value);
}
// ===================================================================

class LiskGetAddress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskGetAddress) */ {
 public:
  LiskGetAddress();
  virtual ~LiskGetAddress();

  LiskGetAddress(const LiskGetAddress& from);

  inline LiskGetAddress& operator=(const LiskGetAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskGetAddress(LiskGetAddress&& from) noexcept
    : LiskGetAddress() {
    *this = ::std::move(from);
  }

  inline LiskGetAddress& operator=(LiskGetAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskGetAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskGetAddress* internal_default_instance() {
    return reinterpret_cast<const LiskGetAddress*>(
               &_LiskGetAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LiskGetAddress* other);
  friend void swap(LiskGetAddress& a, LiskGetAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskGetAddress* New() const final {
    return CreateMaybeMessage<LiskGetAddress>(nullptr);
  }

  LiskGetAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskGetAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskGetAddress& from);
  void MergeFrom(const LiskGetAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskGetAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional bool show_display = 2;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 2;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskGetAddress)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskAddress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskAddress) */ {
 public:
  LiskAddress();
  virtual ~LiskAddress();

  LiskAddress(const LiskAddress& from);

  inline LiskAddress& operator=(const LiskAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskAddress(LiskAddress&& from) noexcept
    : LiskAddress() {
    *this = ::std::move(from);
  }

  inline LiskAddress& operator=(LiskAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskAddress* internal_default_instance() {
    return reinterpret_cast<const LiskAddress*>(
               &_LiskAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LiskAddress* other);
  friend void swap(LiskAddress& a, LiskAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskAddress* New() const final {
    return CreateMaybeMessage<LiskAddress>(nullptr);
  }

  LiskAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskAddress& from);
  void MergeFrom(const LiskAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskAddress)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskGetPublicKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskGetPublicKey) */ {
 public:
  LiskGetPublicKey();
  virtual ~LiskGetPublicKey();

  LiskGetPublicKey(const LiskGetPublicKey& from);

  inline LiskGetPublicKey& operator=(const LiskGetPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskGetPublicKey(LiskGetPublicKey&& from) noexcept
    : LiskGetPublicKey() {
    *this = ::std::move(from);
  }

  inline LiskGetPublicKey& operator=(LiskGetPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskGetPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskGetPublicKey* internal_default_instance() {
    return reinterpret_cast<const LiskGetPublicKey*>(
               &_LiskGetPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LiskGetPublicKey* other);
  friend void swap(LiskGetPublicKey& a, LiskGetPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskGetPublicKey* New() const final {
    return CreateMaybeMessage<LiskGetPublicKey>(nullptr);
  }

  LiskGetPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskGetPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskGetPublicKey& from);
  void MergeFrom(const LiskGetPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskGetPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional bool show_display = 2;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 2;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskGetPublicKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskPublicKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskPublicKey) */ {
 public:
  LiskPublicKey();
  virtual ~LiskPublicKey();

  LiskPublicKey(const LiskPublicKey& from);

  inline LiskPublicKey& operator=(const LiskPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskPublicKey(LiskPublicKey&& from) noexcept
    : LiskPublicKey() {
    *this = ::std::move(from);
  }

  inline LiskPublicKey& operator=(LiskPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskPublicKey* internal_default_instance() {
    return reinterpret_cast<const LiskPublicKey*>(
               &_LiskPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LiskPublicKey* other);
  friend void swap(LiskPublicKey& a, LiskPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskPublicKey* New() const final {
    return CreateMaybeMessage<LiskPublicKey>(nullptr);
  }

  LiskPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskPublicKey& from);
  void MergeFrom(const LiskPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_key = 1;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskPublicKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType) */ {
 public:
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType();
  virtual ~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType();

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& from);

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& operator=(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType&& from) noexcept
    : LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType() {
    *this = ::std::move(from);
  }

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& operator=(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* internal_default_instance() {
    return reinterpret_cast<const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType*>(
               &_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* other);
  friend void swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& a, LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* New() const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>(nullptr);
  }

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& from);
  void MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_key = 1;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType) */ {
 public:
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType();
  virtual ~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType();

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& from);

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& operator=(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType&& from) noexcept
    : LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType() {
    *this = ::std::move(from);
  }

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& operator=(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* internal_default_instance() {
    return reinterpret_cast<const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType*>(
               &_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* other);
  friend void swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& a, LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* New() const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>(nullptr);
  }

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& from);
  void MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType) */ {
 public:
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType();
  virtual ~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType();

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& from);

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& operator=(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType&& from) noexcept
    : LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType() {
    *this = ::std::move(from);
  }

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& operator=(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* internal_default_instance() {
    return reinterpret_cast<const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType*>(
               &_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* other);
  friend void swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& a, LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* New() const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>(nullptr);
  }

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& from);
  void MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys_group = 3;
  int keys_group_size() const;
  void clear_keys_group();
  static const int kKeysGroupFieldNumber = 3;
  const ::std::string& keys_group(int index) const;
  ::std::string* mutable_keys_group(int index);
  void set_keys_group(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys_group(int index, ::std::string&& value);
  #endif
  void set_keys_group(int index, const char* value);
  void set_keys_group(int index, const char* value, size_t size);
  ::std::string* add_keys_group();
  void add_keys_group(const ::std::string& value);
  #if LANG_CXX11
  void add_keys_group(::std::string&& value);
  #endif
  void add_keys_group(const char* value);
  void add_keys_group(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& keys_group() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_keys_group();

  // optional uint32 min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // optional uint32 life_time = 2;
  bool has_life_time() const;
  void clear_life_time();
  static const int kLifeTimeFieldNumber = 2;
  ::google::protobuf::uint32 life_time() const;
  void set_life_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> keys_group_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 life_time_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignTx_LiskTransactionCommon_LiskTransactionAsset final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset) */ {
 public:
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset();
  virtual ~LiskSignTx_LiskTransactionCommon_LiskTransactionAsset();

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& from);

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& operator=(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset&& from) noexcept
    : LiskSignTx_LiskTransactionCommon_LiskTransactionAsset() {
    *this = ::std::move(from);
  }

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& operator=(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* internal_default_instance() {
    return reinterpret_cast<const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset*>(
               &_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* other);
  friend void swap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& a, LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* New() const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>(nullptr);
  }

  LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& from);
  void MergeFrom(const LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType LiskSignatureType;
  typedef LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType LiskDelegateType;
  typedef LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType LiskMultisignatureType;

  // accessors -------------------------------------------------------

  // repeated string votes = 3;
  int votes_size() const;
  void clear_votes();
  static const int kVotesFieldNumber = 3;
  const ::std::string& votes(int index) const;
  ::std::string* mutable_votes(int index);
  void set_votes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_votes(int index, ::std::string&& value);
  #endif
  void set_votes(int index, const char* value);
  void set_votes(int index, const char* value, size_t size);
  ::std::string* add_votes();
  void add_votes(const ::std::string& value);
  #if LANG_CXX11
  void add_votes(::std::string&& value);
  #endif
  void add_votes(const char* value);
  void add_votes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& votes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_votes();

  // optional string data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& signature() const;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* release_signature();
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* mutable_signature();
  void set_allocated_signature(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* signature);

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;
  bool has_delegate() const;
  void clear_delegate();
  static const int kDelegateFieldNumber = 2;
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& delegate() const;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* release_delegate();
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* mutable_delegate();
  void set_allocated_delegate(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* delegate);

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;
  bool has_multisignature() const;
  void clear_multisignature();
  static const int kMultisignatureFieldNumber = 4;
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& multisignature() const;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* release_multisignature();
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* mutable_multisignature();
  void set_allocated_multisignature(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* multisignature);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> votes_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* signature_;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* delegate_;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* multisignature_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignTx_LiskTransactionCommon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon) */ {
 public:
  LiskSignTx_LiskTransactionCommon();
  virtual ~LiskSignTx_LiskTransactionCommon();

  LiskSignTx_LiskTransactionCommon(const LiskSignTx_LiskTransactionCommon& from);

  inline LiskSignTx_LiskTransactionCommon& operator=(const LiskSignTx_LiskTransactionCommon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignTx_LiskTransactionCommon(LiskSignTx_LiskTransactionCommon&& from) noexcept
    : LiskSignTx_LiskTransactionCommon() {
    *this = ::std::move(from);
  }

  inline LiskSignTx_LiskTransactionCommon& operator=(LiskSignTx_LiskTransactionCommon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignTx_LiskTransactionCommon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignTx_LiskTransactionCommon* internal_default_instance() {
    return reinterpret_cast<const LiskSignTx_LiskTransactionCommon*>(
               &_LiskSignTx_LiskTransactionCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LiskSignTx_LiskTransactionCommon* other);
  friend void swap(LiskSignTx_LiskTransactionCommon& a, LiskSignTx_LiskTransactionCommon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignTx_LiskTransactionCommon* New() const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon>(nullptr);
  }

  LiskSignTx_LiskTransactionCommon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignTx_LiskTransactionCommon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignTx_LiskTransactionCommon& from);
  void MergeFrom(const LiskSignTx_LiskTransactionCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignTx_LiskTransactionCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LiskSignTx_LiskTransactionCommon_LiskTransactionAsset LiskTransactionAsset;

  typedef LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskTransactionType;
  static const LiskTransactionType Transfer =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_Transfer;
  static const LiskTransactionType RegisterSecondPassphrase =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_RegisterSecondPassphrase;
  static const LiskTransactionType RegisterDelegate =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_RegisterDelegate;
  static const LiskTransactionType CastVotes =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_CastVotes;
  static const LiskTransactionType RegisterMultisignatureAccount =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_RegisterMultisignatureAccount;
  static const LiskTransactionType CreateDapp =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_CreateDapp;
  static const LiskTransactionType TransferIntoDapp =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_TransferIntoDapp;
  static const LiskTransactionType TransferOutOfDapp =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_TransferOutOfDapp;
  static inline bool LiskTransactionType_IsValid(int value) {
    return LiskSignTx_LiskTransactionCommon_LiskTransactionType_IsValid(value);
  }
  static const LiskTransactionType LiskTransactionType_MIN =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_LiskTransactionType_MIN;
  static const LiskTransactionType LiskTransactionType_MAX =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_LiskTransactionType_MAX;
  static const int LiskTransactionType_ARRAYSIZE =
    LiskSignTx_LiskTransactionCommon_LiskTransactionType_LiskTransactionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LiskTransactionType_descriptor() {
    return LiskSignTx_LiskTransactionCommon_LiskTransactionType_descriptor();
  }
  static inline const ::std::string& LiskTransactionType_Name(LiskTransactionType value) {
    return LiskSignTx_LiskTransactionCommon_LiskTransactionType_Name(value);
  }
  static inline bool LiskTransactionType_Parse(const ::std::string& name,
      LiskTransactionType* value) {
    return LiskSignTx_LiskTransactionCommon_LiskTransactionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string recipient_id = 4;
  bool has_recipient_id() const;
  void clear_recipient_id();
  static const int kRecipientIdFieldNumber = 4;
  const ::std::string& recipient_id() const;
  void set_recipient_id(const ::std::string& value);
  #if LANG_CXX11
  void set_recipient_id(::std::string&& value);
  #endif
  void set_recipient_id(const char* value);
  void set_recipient_id(const char* value, size_t size);
  ::std::string* mutable_recipient_id();
  ::std::string* release_recipient_id();
  void set_allocated_recipient_id(::std::string* recipient_id);

  // optional bytes sender_public_key = 5;
  bool has_sender_public_key() const;
  void clear_sender_public_key();
  static const int kSenderPublicKeyFieldNumber = 5;
  const ::std::string& sender_public_key() const;
  void set_sender_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_public_key(::std::string&& value);
  #endif
  void set_sender_public_key(const char* value);
  void set_sender_public_key(const void* value, size_t size);
  ::std::string* mutable_sender_public_key();
  ::std::string* release_sender_public_key();
  void set_allocated_sender_public_key(::std::string* sender_public_key);

  // optional bytes requester_public_key = 6;
  bool has_requester_public_key() const;
  void clear_requester_public_key();
  static const int kRequesterPublicKeyFieldNumber = 6;
  const ::std::string& requester_public_key() const;
  void set_requester_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_requester_public_key(::std::string&& value);
  #endif
  void set_requester_public_key(const char* value);
  void set_requester_public_key(const void* value, size_t size);
  ::std::string* mutable_requester_public_key();
  ::std::string* release_requester_public_key();
  void set_allocated_requester_public_key(::std::string* requester_public_key);

  // optional bytes signature = 7;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;
  bool has_asset() const;
  void clear_asset();
  static const int kAssetFieldNumber = 9;
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& asset() const;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* release_asset();
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* mutable_asset();
  void set_allocated_asset(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* asset);

  // optional uint64 amount = 2 [default = 0];
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint64 fee = 3;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  ::google::protobuf::uint64 fee() const;
  void set_fee(::google::protobuf::uint64 value);

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType type() const;
  void set_type(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType value);

  // optional uint32 timestamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 8;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr recipient_id_;
  ::google::protobuf::internal::ArenaStringPtr sender_public_key_;
  ::google::protobuf::internal::ArenaStringPtr requester_public_key_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* asset_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 fee_;
  int type_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignTx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignTx) */ {
 public:
  LiskSignTx();
  virtual ~LiskSignTx();

  LiskSignTx(const LiskSignTx& from);

  inline LiskSignTx& operator=(const LiskSignTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignTx(LiskSignTx&& from) noexcept
    : LiskSignTx() {
    *this = ::std::move(from);
  }

  inline LiskSignTx& operator=(LiskSignTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignTx* internal_default_instance() {
    return reinterpret_cast<const LiskSignTx*>(
               &_LiskSignTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(LiskSignTx* other);
  friend void swap(LiskSignTx& a, LiskSignTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignTx* New() const final {
    return CreateMaybeMessage<LiskSignTx>(nullptr);
  }

  LiskSignTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignTx& from);
  void MergeFrom(const LiskSignTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LiskSignTx_LiskTransactionCommon LiskTransactionCommon;

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;
  bool has_transaction() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 2;
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon& transaction() const;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* release_transaction();
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* mutable_transaction();
  void set_allocated_transaction(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* transaction);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* transaction_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignedTx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignedTx) */ {
 public:
  LiskSignedTx();
  virtual ~LiskSignedTx();

  LiskSignedTx(const LiskSignedTx& from);

  inline LiskSignedTx& operator=(const LiskSignedTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignedTx(LiskSignedTx&& from) noexcept
    : LiskSignedTx() {
    *this = ::std::move(from);
  }

  inline LiskSignedTx& operator=(LiskSignedTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignedTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignedTx* internal_default_instance() {
    return reinterpret_cast<const LiskSignedTx*>(
               &_LiskSignedTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LiskSignedTx* other);
  friend void swap(LiskSignedTx& a, LiskSignedTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignedTx* New() const final {
    return CreateMaybeMessage<LiskSignedTx>(nullptr);
  }

  LiskSignedTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignedTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignedTx& from);
  void MergeFrom(const LiskSignedTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignedTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignedTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskSignMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskSignMessage) */ {
 public:
  LiskSignMessage();
  virtual ~LiskSignMessage();

  LiskSignMessage(const LiskSignMessage& from);

  inline LiskSignMessage& operator=(const LiskSignMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskSignMessage(LiskSignMessage&& from) noexcept
    : LiskSignMessage() {
    *this = ::std::move(from);
  }

  inline LiskSignMessage& operator=(LiskSignMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskSignMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskSignMessage* internal_default_instance() {
    return reinterpret_cast<const LiskSignMessage*>(
               &_LiskSignMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(LiskSignMessage* other);
  friend void swap(LiskSignMessage& a, LiskSignMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskSignMessage* New() const final {
    return CreateMaybeMessage<LiskSignMessage>(nullptr);
  }

  LiskSignMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskSignMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskSignMessage& from);
  void MergeFrom(const LiskSignMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskSignMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional bytes message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskSignMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskMessageSignature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskMessageSignature) */ {
 public:
  LiskMessageSignature();
  virtual ~LiskMessageSignature();

  LiskMessageSignature(const LiskMessageSignature& from);

  inline LiskMessageSignature& operator=(const LiskMessageSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskMessageSignature(LiskMessageSignature&& from) noexcept
    : LiskMessageSignature() {
    *this = ::std::move(from);
  }

  inline LiskMessageSignature& operator=(LiskMessageSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskMessageSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskMessageSignature* internal_default_instance() {
    return reinterpret_cast<const LiskMessageSignature*>(
               &_LiskMessageSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(LiskMessageSignature* other);
  friend void swap(LiskMessageSignature& a, LiskMessageSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskMessageSignature* New() const final {
    return CreateMaybeMessage<LiskMessageSignature>(nullptr);
  }

  LiskMessageSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskMessageSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskMessageSignature& from);
  void MergeFrom(const LiskMessageSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskMessageSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_key = 1;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional bytes signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskMessageSignature)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// -------------------------------------------------------------------

class LiskVerifyMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.lisk.LiskVerifyMessage) */ {
 public:
  LiskVerifyMessage();
  virtual ~LiskVerifyMessage();

  LiskVerifyMessage(const LiskVerifyMessage& from);

  inline LiskVerifyMessage& operator=(const LiskVerifyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiskVerifyMessage(LiskVerifyMessage&& from) noexcept
    : LiskVerifyMessage() {
    *this = ::std::move(from);
  }

  inline LiskVerifyMessage& operator=(LiskVerifyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LiskVerifyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiskVerifyMessage* internal_default_instance() {
    return reinterpret_cast<const LiskVerifyMessage*>(
               &_LiskVerifyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(LiskVerifyMessage* other);
  friend void swap(LiskVerifyMessage& a, LiskVerifyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiskVerifyMessage* New() const final {
    return CreateMaybeMessage<LiskVerifyMessage>(nullptr);
  }

  LiskVerifyMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LiskVerifyMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LiskVerifyMessage& from);
  void MergeFrom(const LiskVerifyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiskVerifyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_key = 1;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional bytes signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional bytes message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.lisk.LiskVerifyMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_messages_2dlisk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LiskGetAddress

// repeated uint32 address_n = 1;
inline int LiskGetAddress::address_n_size() const {
  return address_n_.size();
}
inline void LiskGetAddress::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 LiskGetAddress::address_n(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskGetAddress.address_n)
  return address_n_.Get(index);
}
inline void LiskGetAddress::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskGetAddress.address_n)
}
inline void LiskGetAddress::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskGetAddress.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LiskGetAddress::address_n() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.lisk.LiskGetAddress.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LiskGetAddress::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.lisk.LiskGetAddress.address_n)
  return &address_n_;
}

// optional bool show_display = 2;
inline bool LiskGetAddress::has_show_display() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskGetAddress::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LiskGetAddress::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskGetAddress.show_display)
  return show_display_;
}
inline void LiskGetAddress::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskGetAddress.show_display)
}

// -------------------------------------------------------------------

// LiskAddress

// optional string address = 1;
inline bool LiskAddress::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskAddress::address() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskAddress.address)
  return address_.GetNoArena();
}
inline void LiskAddress::set_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskAddress.address)
}
#if LANG_CXX11
inline void LiskAddress::set_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskAddress.address)
}
#endif
inline void LiskAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskAddress.address)
}
inline void LiskAddress::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskAddress.address)
}
inline ::std::string* LiskAddress::mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskAddress::release_address() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskAddress.address)
  if (!has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskAddress::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskAddress.address)
}

// -------------------------------------------------------------------

// LiskGetPublicKey

// repeated uint32 address_n = 1;
inline int LiskGetPublicKey::address_n_size() const {
  return address_n_.size();
}
inline void LiskGetPublicKey::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 LiskGetPublicKey::address_n(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskGetPublicKey.address_n)
  return address_n_.Get(index);
}
inline void LiskGetPublicKey::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskGetPublicKey.address_n)
}
inline void LiskGetPublicKey::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskGetPublicKey.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LiskGetPublicKey::address_n() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.lisk.LiskGetPublicKey.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LiskGetPublicKey::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.lisk.LiskGetPublicKey.address_n)
  return &address_n_;
}

// optional bool show_display = 2;
inline bool LiskGetPublicKey::has_show_display() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskGetPublicKey::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LiskGetPublicKey::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskGetPublicKey.show_display)
  return show_display_;
}
inline void LiskGetPublicKey::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskGetPublicKey.show_display)
}

// -------------------------------------------------------------------

// LiskPublicKey

// optional bytes public_key = 1;
inline bool LiskPublicKey::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskPublicKey::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskPublicKey::public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskPublicKey.public_key)
  return public_key_.GetNoArena();
}
inline void LiskPublicKey::set_public_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskPublicKey.public_key)
}
#if LANG_CXX11
inline void LiskPublicKey::set_public_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskPublicKey.public_key)
}
#endif
inline void LiskPublicKey::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskPublicKey.public_key)
}
inline void LiskPublicKey::set_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskPublicKey.public_key)
}
inline ::std::string* LiskPublicKey::mutable_public_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskPublicKey.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskPublicKey::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskPublicKey.public_key)
  if (!has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskPublicKey::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskPublicKey.public_key)
}

// -------------------------------------------------------------------

// LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType

// optional bytes public_key = 1;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
  return public_key_.GetNoArena();
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::set_public_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::set_public_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
}
#endif
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::set_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::mutable_public_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
  if (!has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
}

// -------------------------------------------------------------------

// LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType

// optional string username = 1;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::username() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
  return username_.GetNoArena();
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::set_username(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::set_username(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
}
#endif
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::release_username() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
}

// -------------------------------------------------------------------

// LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType

// optional uint32 min = 1;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::clear_min() {
  min_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::min() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.min)
  return min_;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::set_min(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.min)
}

// optional uint32 life_time = 2;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::has_life_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::clear_life_time() {
  life_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::life_time() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.life_time)
  return life_time_;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::set_life_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  life_time_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.life_time)
}

// repeated string keys_group = 3;
inline int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::keys_group_size() const {
  return keys_group_.size();
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::clear_keys_group() {
  keys_group_.Clear();
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::keys_group(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
  return keys_group_.Get(index);
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::mutable_keys_group(int index) {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
  return keys_group_.Mutable(index);
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::set_keys_group(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
  keys_group_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::set_keys_group(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
  keys_group_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::set_keys_group(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_group_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::set_keys_group(int index, const char* value, size_t size) {
  keys_group_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::add_keys_group() {
  // @@protoc_insertion_point(field_add_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
  return keys_group_.Add();
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::add_keys_group(const ::std::string& value) {
  keys_group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::add_keys_group(::std::string&& value) {
  keys_group_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
}
#endif
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::add_keys_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::add_keys_group(const char* value, size_t size) {
  keys_group_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::keys_group() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
  return keys_group_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType::mutable_keys_group() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
  return &keys_group_;
}

// -------------------------------------------------------------------

// LiskSignTx_LiskTransactionCommon_LiskTransactionAsset

// optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType signature = 1;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::signature() const {
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* p = signature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType*>(
      &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType_default_instance_);
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.signature)
  return signature_;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_allocated_signature(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskSignatureType* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.signature)
}

// optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType delegate = 2;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::has_delegate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::clear_delegate() {
  if (delegate_ != nullptr) delegate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::delegate() const {
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* p = delegate_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.delegate)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType*>(
      &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType_default_instance_);
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::release_delegate() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.delegate)
  _has_bits_[0] &= ~0x00000004u;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* temp = delegate_;
  delegate_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::mutable_delegate() {
  _has_bits_[0] |= 0x00000004u;
  if (delegate_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType>(GetArenaNoVirtual());
    delegate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.delegate)
  return delegate_;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_allocated_delegate(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskDelegateType* delegate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete delegate_;
  }
  if (delegate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delegate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delegate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  delegate_ = delegate;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.delegate)
}

// repeated string votes = 3;
inline int LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::votes_size() const {
  return votes_.size();
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::clear_votes() {
  votes_.Clear();
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::votes(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
  return votes_.Get(index);
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
  return votes_.Mutable(index);
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_votes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
  votes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_votes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
  votes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_votes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  votes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_votes(int index, const char* value, size_t size) {
  votes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::add_votes() {
  // @@protoc_insertion_point(field_add_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
  return votes_.Add();
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::add_votes(const ::std::string& value) {
  votes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::add_votes(::std::string&& value) {
  votes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
}
#endif
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::add_votes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  votes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::add_votes(const char* value, size_t size) {
  votes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::votes() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
  return votes_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
  return &votes_;
}

// optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType multisignature = 4;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::has_multisignature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::clear_multisignature() {
  if (multisignature_ != nullptr) multisignature_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::multisignature() const {
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* p = multisignature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.multisignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType*>(
      &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType_default_instance_);
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::release_multisignature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.multisignature)
  _has_bits_[0] &= ~0x00000008u;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* temp = multisignature_;
  multisignature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::mutable_multisignature() {
  _has_bits_[0] |= 0x00000008u;
  if (multisignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType>(GetArenaNoVirtual());
    multisignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.multisignature)
  return multisignature_;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_allocated_multisignature(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_LiskMultisignatureType* multisignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete multisignature_;
  }
  if (multisignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multisignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multisignature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  multisignature_ = multisignature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.multisignature)
}

// optional string data = 5;
inline bool LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::data() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
  return data_.GetNoArena();
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
}
#endif
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::release_data() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignTx_LiskTransactionCommon_LiskTransactionAsset::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
}

// -------------------------------------------------------------------

// LiskSignTx_LiskTransactionCommon

// optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;
inline bool LiskSignTx_LiskTransactionCommon::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType LiskSignTx_LiskTransactionCommon::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.type)
  return static_cast< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType >(type_);
}
inline void LiskSignTx_LiskTransactionCommon::set_type(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType value) {
  assert(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.type)
}

// optional uint64 amount = 2 [default = 0];
inline bool LiskSignTx_LiskTransactionCommon::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 LiskSignTx_LiskTransactionCommon::amount() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.amount)
  return amount_;
}
inline void LiskSignTx_LiskTransactionCommon::set_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.amount)
}

// optional uint64 fee = 3;
inline bool LiskSignTx_LiskTransactionCommon::has_fee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 LiskSignTx_LiskTransactionCommon::fee() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.fee)
  return fee_;
}
inline void LiskSignTx_LiskTransactionCommon::set_fee(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  fee_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.fee)
}

// optional string recipient_id = 4;
inline bool LiskSignTx_LiskTransactionCommon::has_recipient_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_recipient_id() {
  recipient_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon::recipient_id() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
  return recipient_id_.GetNoArena();
}
inline void LiskSignTx_LiskTransactionCommon::set_recipient_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  recipient_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon::set_recipient_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  recipient_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
}
#endif
inline void LiskSignTx_LiskTransactionCommon::set_recipient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  recipient_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
}
inline void LiskSignTx_LiskTransactionCommon::set_recipient_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  recipient_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::mutable_recipient_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
  return recipient_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::release_recipient_id() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
  if (!has_recipient_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return recipient_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignTx_LiskTransactionCommon::set_allocated_recipient_id(::std::string* recipient_id) {
  if (recipient_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  recipient_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient_id);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
}

// optional bytes sender_public_key = 5;
inline bool LiskSignTx_LiskTransactionCommon::has_sender_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_sender_public_key() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon::sender_public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
  return sender_public_key_.GetNoArena();
}
inline void LiskSignTx_LiskTransactionCommon::set_sender_public_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon::set_sender_public_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sender_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
}
#endif
inline void LiskSignTx_LiskTransactionCommon::set_sender_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
}
inline void LiskSignTx_LiskTransactionCommon::set_sender_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::mutable_sender_public_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
  return sender_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::release_sender_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
  if (!has_sender_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sender_public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignTx_LiskTransactionCommon::set_allocated_sender_public_key(::std::string* sender_public_key) {
  if (sender_public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sender_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_public_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
}

// optional bytes requester_public_key = 6;
inline bool LiskSignTx_LiskTransactionCommon::has_requester_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_requester_public_key() {
  requester_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon::requester_public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
  return requester_public_key_.GetNoArena();
}
inline void LiskSignTx_LiskTransactionCommon::set_requester_public_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  requester_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon::set_requester_public_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  requester_public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
}
#endif
inline void LiskSignTx_LiskTransactionCommon::set_requester_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  requester_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
}
inline void LiskSignTx_LiskTransactionCommon::set_requester_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  requester_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::mutable_requester_public_key() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
  return requester_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::release_requester_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
  if (!has_requester_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return requester_public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignTx_LiskTransactionCommon::set_allocated_requester_public_key(::std::string* requester_public_key) {
  if (requester_public_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  requester_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requester_public_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
}

// optional bytes signature = 7;
inline bool LiskSignTx_LiskTransactionCommon::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& LiskSignTx_LiskTransactionCommon::signature() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
  return signature_.GetNoArena();
}
inline void LiskSignTx_LiskTransactionCommon::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
}
#if LANG_CXX11
inline void LiskSignTx_LiskTransactionCommon::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
}
#endif
inline void LiskSignTx_LiskTransactionCommon::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
}
inline void LiskSignTx_LiskTransactionCommon::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::mutable_signature() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignTx_LiskTransactionCommon::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignTx_LiskTransactionCommon::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
}

// optional uint32 timestamp = 8;
inline bool LiskSignTx_LiskTransactionCommon::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 LiskSignTx_LiskTransactionCommon::timestamp() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.timestamp)
  return timestamp_;
}
inline void LiskSignTx_LiskTransactionCommon::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.timestamp)
}

// optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset asset = 9;
inline bool LiskSignTx_LiskTransactionCommon::has_asset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LiskSignTx_LiskTransactionCommon::clear_asset() {
  if (asset_ != nullptr) asset_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset& LiskSignTx_LiskTransactionCommon::asset() const {
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* p = asset_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.asset)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset*>(
      &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_LiskTransactionAsset_default_instance_);
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* LiskSignTx_LiskTransactionCommon::release_asset() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.asset)
  _has_bits_[0] &= ~0x00000010u;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* LiskSignTx_LiskTransactionCommon::mutable_asset() {
  _has_bits_[0] |= 0x00000010u;
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset>(GetArenaNoVirtual());
    asset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.asset)
  return asset_;
}
inline void LiskSignTx_LiskTransactionCommon::set_allocated_asset(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionAsset* asset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.asset)
}

// -------------------------------------------------------------------

// LiskSignTx

// repeated uint32 address_n = 1;
inline int LiskSignTx::address_n_size() const {
  return address_n_.size();
}
inline void LiskSignTx::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 LiskSignTx::address_n(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.address_n)
  return address_n_.Get(index);
}
inline void LiskSignTx::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignTx.address_n)
}
inline void LiskSignTx::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskSignTx.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LiskSignTx::address_n() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.lisk.LiskSignTx.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LiskSignTx::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.lisk.LiskSignTx.address_n)
  return &address_n_;
}

// optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon transaction = 2;
inline bool LiskSignTx::has_transaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignTx::clear_transaction() {
  if (transaction_ != nullptr) transaction_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon& LiskSignTx::transaction() const {
  const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* p = transaction_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignTx.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon*>(
      &::hw::trezor::messages::lisk::_LiskSignTx_LiskTransactionCommon_default_instance_);
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* LiskSignTx::release_transaction() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignTx.transaction)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* LiskSignTx::mutable_transaction() {
  _has_bits_[0] |= 0x00000001u;
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignTx.transaction)
  return transaction_;
}
inline void LiskSignTx::set_allocated_transaction(::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon* transaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignTx.transaction)
}

// -------------------------------------------------------------------

// LiskSignedTx

// optional bytes signature = 1;
inline bool LiskSignedTx::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignedTx::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskSignedTx::signature() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignedTx.signature)
  return signature_.GetNoArena();
}
inline void LiskSignedTx::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignedTx.signature)
}
#if LANG_CXX11
inline void LiskSignedTx::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignedTx.signature)
}
#endif
inline void LiskSignedTx::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignedTx.signature)
}
inline void LiskSignedTx::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignedTx.signature)
}
inline ::std::string* LiskSignedTx::mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignedTx.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignedTx::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignedTx.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignedTx::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignedTx.signature)
}

// -------------------------------------------------------------------

// LiskSignMessage

// repeated uint32 address_n = 1;
inline int LiskSignMessage::address_n_size() const {
  return address_n_.size();
}
inline void LiskSignMessage::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 LiskSignMessage::address_n(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignMessage.address_n)
  return address_n_.Get(index);
}
inline void LiskSignMessage::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignMessage.address_n)
}
inline void LiskSignMessage::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.lisk.LiskSignMessage.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LiskSignMessage::address_n() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.lisk.LiskSignMessage.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LiskSignMessage::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.lisk.LiskSignMessage.address_n)
  return &address_n_;
}

// optional bytes message = 2;
inline bool LiskSignMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskSignMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskSignMessage::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskSignMessage.message)
  return message_.GetNoArena();
}
inline void LiskSignMessage::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskSignMessage.message)
}
#if LANG_CXX11
inline void LiskSignMessage::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskSignMessage.message)
}
#endif
inline void LiskSignMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskSignMessage.message)
}
inline void LiskSignMessage::set_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskSignMessage.message)
}
inline ::std::string* LiskSignMessage::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskSignMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskSignMessage::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskSignMessage.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskSignMessage::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskSignMessage.message)
}

// -------------------------------------------------------------------

// LiskMessageSignature

// optional bytes public_key = 1;
inline bool LiskMessageSignature::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskMessageSignature::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskMessageSignature::public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
  return public_key_.GetNoArena();
}
inline void LiskMessageSignature::set_public_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
}
#if LANG_CXX11
inline void LiskMessageSignature::set_public_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
}
#endif
inline void LiskMessageSignature::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
}
inline void LiskMessageSignature::set_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
}
inline ::std::string* LiskMessageSignature::mutable_public_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskMessageSignature::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
  if (!has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskMessageSignature::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
}

// optional bytes signature = 2;
inline bool LiskMessageSignature::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiskMessageSignature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& LiskMessageSignature::signature() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskMessageSignature.signature)
  return signature_.GetNoArena();
}
inline void LiskMessageSignature::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskMessageSignature.signature)
}
#if LANG_CXX11
inline void LiskMessageSignature::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskMessageSignature.signature)
}
#endif
inline void LiskMessageSignature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskMessageSignature.signature)
}
inline void LiskMessageSignature::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskMessageSignature.signature)
}
inline ::std::string* LiskMessageSignature::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskMessageSignature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskMessageSignature::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskMessageSignature.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskMessageSignature::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskMessageSignature.signature)
}

// -------------------------------------------------------------------

// LiskVerifyMessage

// optional bytes public_key = 1;
inline bool LiskVerifyMessage::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiskVerifyMessage::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& LiskVerifyMessage::public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
  return public_key_.GetNoArena();
}
inline void LiskVerifyMessage::set_public_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
}
#if LANG_CXX11
inline void LiskVerifyMessage::set_public_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
}
#endif
inline void LiskVerifyMessage::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
}
inline void LiskVerifyMessage::set_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
}
inline ::std::string* LiskVerifyMessage::mutable_public_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskVerifyMessage::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
  if (!has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskVerifyMessage::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
}

// optional bytes signature = 2;
inline bool LiskVerifyMessage::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiskVerifyMessage::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& LiskVerifyMessage::signature() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
  return signature_.GetNoArena();
}
inline void LiskVerifyMessage::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
}
#if LANG_CXX11
inline void LiskVerifyMessage::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
}
#endif
inline void LiskVerifyMessage::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
}
inline void LiskVerifyMessage::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
}
inline ::std::string* LiskVerifyMessage::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskVerifyMessage::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskVerifyMessage::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
}

// optional bytes message = 3;
inline bool LiskVerifyMessage::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiskVerifyMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& LiskVerifyMessage::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.lisk.LiskVerifyMessage.message)
  return message_.GetNoArena();
}
inline void LiskVerifyMessage::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.lisk.LiskVerifyMessage.message)
}
#if LANG_CXX11
inline void LiskVerifyMessage::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.lisk.LiskVerifyMessage.message)
}
#endif
inline void LiskVerifyMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.lisk.LiskVerifyMessage.message)
}
inline void LiskVerifyMessage::set_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.lisk.LiskVerifyMessage.message)
}
inline ::std::string* LiskVerifyMessage::mutable_message() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.lisk.LiskVerifyMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiskVerifyMessage::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.lisk.LiskVerifyMessage.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiskVerifyMessage::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.lisk.LiskVerifyMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lisk
}  // namespace messages
}  // namespace trezor
}  // namespace hw

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType>() {
  return ::hw::trezor::messages::lisk::LiskSignTx_LiskTransactionCommon_LiskTransactionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messages_2dlisk_2eproto
