// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-tron.proto

#ifndef PROTOBUF_INCLUDED_messages_2dtron_2eproto
#define PROTOBUF_INCLUDED_messages_2dtron_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2dtron_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2dtron_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messages_2dtron_2eproto();
class TronAddress;
class TronAddressDefaultTypeInternal;
extern TronAddressDefaultTypeInternal _TronAddress_default_instance_;
class TronGetAddress;
class TronGetAddressDefaultTypeInternal;
extern TronGetAddressDefaultTypeInternal _TronGetAddress_default_instance_;
class TronSignTx;
class TronSignTxDefaultTypeInternal;
extern TronSignTxDefaultTypeInternal _TronSignTx_default_instance_;
class TronSignTx_TronContract;
class TronSignTx_TronContractDefaultTypeInternal;
extern TronSignTx_TronContractDefaultTypeInternal _TronSignTx_TronContract_default_instance_;
class TronSignTx_TronContract_TronAccountUpdateContract;
class TronSignTx_TronContract_TronAccountUpdateContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronAccountUpdateContractDefaultTypeInternal _TronSignTx_TronContract_TronAccountUpdateContract_default_instance_;
class TronSignTx_TronContract_TronAssetIssueContract;
class TronSignTx_TronContract_TronAssetIssueContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronAssetIssueContractDefaultTypeInternal _TronSignTx_TronContract_TronAssetIssueContract_default_instance_;
class TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply;
class TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupplyDefaultTypeInternal;
extern TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupplyDefaultTypeInternal _TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_default_instance_;
class TronSignTx_TronContract_TronFreezeBalanceContract;
class TronSignTx_TronContract_TronFreezeBalanceContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronFreezeBalanceContractDefaultTypeInternal _TronSignTx_TronContract_TronFreezeBalanceContract_default_instance_;
class TronSignTx_TronContract_TronParticipateAssetIssueContract;
class TronSignTx_TronContract_TronParticipateAssetIssueContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronParticipateAssetIssueContractDefaultTypeInternal _TronSignTx_TronContract_TronParticipateAssetIssueContract_default_instance_;
class TronSignTx_TronContract_TronProposalApproveContract;
class TronSignTx_TronContract_TronProposalApproveContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronProposalApproveContractDefaultTypeInternal _TronSignTx_TronContract_TronProposalApproveContract_default_instance_;
class TronSignTx_TronContract_TronProposalCreateContract;
class TronSignTx_TronContract_TronProposalCreateContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronProposalCreateContractDefaultTypeInternal _TronSignTx_TronContract_TronProposalCreateContract_default_instance_;
class TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters;
class TronSignTx_TronContract_TronProposalCreateContract_TronProposalParametersDefaultTypeInternal;
extern TronSignTx_TronContract_TronProposalCreateContract_TronProposalParametersDefaultTypeInternal _TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_default_instance_;
class TronSignTx_TronContract_TronProposalDeleteContract;
class TronSignTx_TronContract_TronProposalDeleteContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronProposalDeleteContractDefaultTypeInternal _TronSignTx_TronContract_TronProposalDeleteContract_default_instance_;
class TronSignTx_TronContract_TronTransferAssetContract;
class TronSignTx_TronContract_TronTransferAssetContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronTransferAssetContractDefaultTypeInternal _TronSignTx_TronContract_TronTransferAssetContract_default_instance_;
class TronSignTx_TronContract_TronTransferContract;
class TronSignTx_TronContract_TronTransferContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronTransferContractDefaultTypeInternal _TronSignTx_TronContract_TronTransferContract_default_instance_;
class TronSignTx_TronContract_TronUnfreezeAssetContract;
class TronSignTx_TronContract_TronUnfreezeAssetContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronUnfreezeAssetContractDefaultTypeInternal _TronSignTx_TronContract_TronUnfreezeAssetContract_default_instance_;
class TronSignTx_TronContract_TronUnfreezeBalanceContract;
class TronSignTx_TronContract_TronUnfreezeBalanceContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronUnfreezeBalanceContractDefaultTypeInternal _TronSignTx_TronContract_TronUnfreezeBalanceContract_default_instance_;
class TronSignTx_TronContract_TronUpdateAssetContract;
class TronSignTx_TronContract_TronUpdateAssetContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronUpdateAssetContractDefaultTypeInternal _TronSignTx_TronContract_TronUpdateAssetContract_default_instance_;
class TronSignTx_TronContract_TronVoteWitnessContract;
class TronSignTx_TronContract_TronVoteWitnessContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronVoteWitnessContractDefaultTypeInternal _TronSignTx_TronContract_TronVoteWitnessContract_default_instance_;
class TronSignTx_TronContract_TronVoteWitnessContract_TronVote;
class TronSignTx_TronContract_TronVoteWitnessContract_TronVoteDefaultTypeInternal;
extern TronSignTx_TronContract_TronVoteWitnessContract_TronVoteDefaultTypeInternal _TronSignTx_TronContract_TronVoteWitnessContract_TronVote_default_instance_;
class TronSignTx_TronContract_TronWithdrawBalanceContract;
class TronSignTx_TronContract_TronWithdrawBalanceContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronWithdrawBalanceContractDefaultTypeInternal _TronSignTx_TronContract_TronWithdrawBalanceContract_default_instance_;
class TronSignTx_TronContract_TronWitnessCreateContract;
class TronSignTx_TronContract_TronWitnessCreateContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronWitnessCreateContractDefaultTypeInternal _TronSignTx_TronContract_TronWitnessCreateContract_default_instance_;
class TronSignTx_TronContract_TronWitnessUpdateContract;
class TronSignTx_TronContract_TronWitnessUpdateContractDefaultTypeInternal;
extern TronSignTx_TronContract_TronWitnessUpdateContractDefaultTypeInternal _TronSignTx_TronContract_TronWitnessUpdateContract_default_instance_;
class TronSignedTx;
class TronSignedTxDefaultTypeInternal;
extern TronSignedTxDefaultTypeInternal _TronSignedTx_default_instance_;
namespace google {
namespace protobuf {
template<> ::TronAddress* Arena::CreateMaybeMessage<::TronAddress>(Arena*);
template<> ::TronGetAddress* Arena::CreateMaybeMessage<::TronGetAddress>(Arena*);
template<> ::TronSignTx* Arena::CreateMaybeMessage<::TronSignTx>(Arena*);
template<> ::TronSignTx_TronContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract>(Arena*);
template<> ::TronSignTx_TronContract_TronAccountUpdateContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronAccountUpdateContract>(Arena*);
template<> ::TronSignTx_TronContract_TronAssetIssueContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronAssetIssueContract>(Arena*);
template<> ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply>(Arena*);
template<> ::TronSignTx_TronContract_TronFreezeBalanceContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronFreezeBalanceContract>(Arena*);
template<> ::TronSignTx_TronContract_TronParticipateAssetIssueContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronParticipateAssetIssueContract>(Arena*);
template<> ::TronSignTx_TronContract_TronProposalApproveContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronProposalApproveContract>(Arena*);
template<> ::TronSignTx_TronContract_TronProposalCreateContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronProposalCreateContract>(Arena*);
template<> ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters>(Arena*);
template<> ::TronSignTx_TronContract_TronProposalDeleteContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronProposalDeleteContract>(Arena*);
template<> ::TronSignTx_TronContract_TronTransferAssetContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronTransferAssetContract>(Arena*);
template<> ::TronSignTx_TronContract_TronTransferContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronTransferContract>(Arena*);
template<> ::TronSignTx_TronContract_TronUnfreezeAssetContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronUnfreezeAssetContract>(Arena*);
template<> ::TronSignTx_TronContract_TronUnfreezeBalanceContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronUnfreezeBalanceContract>(Arena*);
template<> ::TronSignTx_TronContract_TronUpdateAssetContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronUpdateAssetContract>(Arena*);
template<> ::TronSignTx_TronContract_TronVoteWitnessContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronVoteWitnessContract>(Arena*);
template<> ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronVoteWitnessContract_TronVote>(Arena*);
template<> ::TronSignTx_TronContract_TronWithdrawBalanceContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronWithdrawBalanceContract>(Arena*);
template<> ::TronSignTx_TronContract_TronWitnessCreateContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronWitnessCreateContract>(Arena*);
template<> ::TronSignTx_TronContract_TronWitnessUpdateContract* Arena::CreateMaybeMessage<::TronSignTx_TronContract_TronWitnessUpdateContract>(Arena*);
template<> ::TronSignedTx* Arena::CreateMaybeMessage<::TronSignedTx>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TronGetAddress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronGetAddress) */ {
 public:
  TronGetAddress();
  virtual ~TronGetAddress();

  TronGetAddress(const TronGetAddress& from);

  inline TronGetAddress& operator=(const TronGetAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronGetAddress(TronGetAddress&& from) noexcept
    : TronGetAddress() {
    *this = ::std::move(from);
  }

  inline TronGetAddress& operator=(TronGetAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronGetAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronGetAddress* internal_default_instance() {
    return reinterpret_cast<const TronGetAddress*>(
               &_TronGetAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TronGetAddress* other);
  friend void swap(TronGetAddress& a, TronGetAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronGetAddress* New() const final {
    return CreateMaybeMessage<TronGetAddress>(nullptr);
  }

  TronGetAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronGetAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronGetAddress& from);
  void MergeFrom(const TronGetAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronGetAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional bool show_display = 2;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 2;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:TronGetAddress)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronAddress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronAddress) */ {
 public:
  TronAddress();
  virtual ~TronAddress();

  TronAddress(const TronAddress& from);

  inline TronAddress& operator=(const TronAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronAddress(TronAddress&& from) noexcept
    : TronAddress() {
    *this = ::std::move(from);
  }

  inline TronAddress& operator=(TronAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronAddress* internal_default_instance() {
    return reinterpret_cast<const TronAddress*>(
               &_TronAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TronAddress* other);
  friend void swap(TronAddress& a, TronAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronAddress* New() const final {
    return CreateMaybeMessage<TronAddress>(nullptr);
  }

  TronAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronAddress& from);
  void MergeFrom(const TronAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:TronAddress)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronAccountUpdateContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronAccountUpdateContract) */ {
 public:
  TronSignTx_TronContract_TronAccountUpdateContract();
  virtual ~TronSignTx_TronContract_TronAccountUpdateContract();

  TronSignTx_TronContract_TronAccountUpdateContract(const TronSignTx_TronContract_TronAccountUpdateContract& from);

  inline TronSignTx_TronContract_TronAccountUpdateContract& operator=(const TronSignTx_TronContract_TronAccountUpdateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronAccountUpdateContract(TronSignTx_TronContract_TronAccountUpdateContract&& from) noexcept
    : TronSignTx_TronContract_TronAccountUpdateContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronAccountUpdateContract& operator=(TronSignTx_TronContract_TronAccountUpdateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronAccountUpdateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronAccountUpdateContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronAccountUpdateContract*>(
               &_TronSignTx_TronContract_TronAccountUpdateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TronSignTx_TronContract_TronAccountUpdateContract* other);
  friend void swap(TronSignTx_TronContract_TronAccountUpdateContract& a, TronSignTx_TronContract_TronAccountUpdateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronAccountUpdateContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronAccountUpdateContract>(nullptr);
  }

  TronSignTx_TronContract_TronAccountUpdateContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronAccountUpdateContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronAccountUpdateContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronAccountUpdateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronAccountUpdateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account_name = 1;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronAccountUpdateContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronTransferContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronTransferContract) */ {
 public:
  TronSignTx_TronContract_TronTransferContract();
  virtual ~TronSignTx_TronContract_TronTransferContract();

  TronSignTx_TronContract_TronTransferContract(const TronSignTx_TronContract_TronTransferContract& from);

  inline TronSignTx_TronContract_TronTransferContract& operator=(const TronSignTx_TronContract_TronTransferContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronTransferContract(TronSignTx_TronContract_TronTransferContract&& from) noexcept
    : TronSignTx_TronContract_TronTransferContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronTransferContract& operator=(TronSignTx_TronContract_TronTransferContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronTransferContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronTransferContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronTransferContract*>(
               &_TronSignTx_TronContract_TronTransferContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TronSignTx_TronContract_TronTransferContract* other);
  friend void swap(TronSignTx_TronContract_TronTransferContract& a, TronSignTx_TronContract_TronTransferContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronTransferContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronTransferContract>(nullptr);
  }

  TronSignTx_TronContract_TronTransferContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronTransferContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronTransferContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronTransferContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronTransferContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes to_address = 1;
  bool has_to_address() const;
  void clear_to_address();
  static const int kToAddressFieldNumber = 1;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  #if LANG_CXX11
  void set_to_address(::std::string&& value);
  #endif
  void set_to_address(const char* value);
  void set_to_address(const void* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // optional uint64 amount = 2;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronTransferContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::uint64 amount_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronTransferAssetContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronTransferAssetContract) */ {
 public:
  TronSignTx_TronContract_TronTransferAssetContract();
  virtual ~TronSignTx_TronContract_TronTransferAssetContract();

  TronSignTx_TronContract_TronTransferAssetContract(const TronSignTx_TronContract_TronTransferAssetContract& from);

  inline TronSignTx_TronContract_TronTransferAssetContract& operator=(const TronSignTx_TronContract_TronTransferAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronTransferAssetContract(TronSignTx_TronContract_TronTransferAssetContract&& from) noexcept
    : TronSignTx_TronContract_TronTransferAssetContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronTransferAssetContract& operator=(TronSignTx_TronContract_TronTransferAssetContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronTransferAssetContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronTransferAssetContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronTransferAssetContract*>(
               &_TronSignTx_TronContract_TronTransferAssetContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TronSignTx_TronContract_TronTransferAssetContract* other);
  friend void swap(TronSignTx_TronContract_TronTransferAssetContract& a, TronSignTx_TronContract_TronTransferAssetContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronTransferAssetContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronTransferAssetContract>(nullptr);
  }

  TronSignTx_TronContract_TronTransferAssetContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronTransferAssetContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronTransferAssetContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronTransferAssetContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronTransferAssetContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string asset_name = 1;
  bool has_asset_name() const;
  void clear_asset_name();
  static const int kAssetNameFieldNumber = 1;
  const ::std::string& asset_name() const;
  void set_asset_name(const ::std::string& value);
  #if LANG_CXX11
  void set_asset_name(::std::string&& value);
  #endif
  void set_asset_name(const char* value);
  void set_asset_name(const char* value, size_t size);
  ::std::string* mutable_asset_name();
  ::std::string* release_asset_name();
  void set_allocated_asset_name(::std::string* asset_name);

  // optional bytes to_address = 2;
  bool has_to_address() const;
  void clear_to_address();
  static const int kToAddressFieldNumber = 2;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  #if LANG_CXX11
  void set_to_address(::std::string&& value);
  #endif
  void set_to_address(const char* value);
  void set_to_address(const void* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // optional uint64 amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronTransferAssetContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr asset_name_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::uint64 amount_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronVoteWitnessContract_TronVote final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronVoteWitnessContract.TronVote) */ {
 public:
  TronSignTx_TronContract_TronVoteWitnessContract_TronVote();
  virtual ~TronSignTx_TronContract_TronVoteWitnessContract_TronVote();

  TronSignTx_TronContract_TronVoteWitnessContract_TronVote(const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& from);

  inline TronSignTx_TronContract_TronVoteWitnessContract_TronVote& operator=(const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronVoteWitnessContract_TronVote(TronSignTx_TronContract_TronVoteWitnessContract_TronVote&& from) noexcept
    : TronSignTx_TronContract_TronVoteWitnessContract_TronVote() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronVoteWitnessContract_TronVote& operator=(TronSignTx_TronContract_TronVoteWitnessContract_TronVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronVoteWitnessContract_TronVote* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronVoteWitnessContract_TronVote*>(
               &_TronSignTx_TronContract_TronVoteWitnessContract_TronVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TronSignTx_TronContract_TronVoteWitnessContract_TronVote* other);
  friend void swap(TronSignTx_TronContract_TronVoteWitnessContract_TronVote& a, TronSignTx_TronContract_TronVoteWitnessContract_TronVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronVoteWitnessContract_TronVote* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronVoteWitnessContract_TronVote>(nullptr);
  }

  TronSignTx_TronContract_TronVoteWitnessContract_TronVote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronVoteWitnessContract_TronVote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& from);
  void MergeFrom(const TronSignTx_TronContract_TronVoteWitnessContract_TronVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronVoteWitnessContract_TronVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes vote_address = 1;
  bool has_vote_address() const;
  void clear_vote_address();
  static const int kVoteAddressFieldNumber = 1;
  const ::std::string& vote_address() const;
  void set_vote_address(const ::std::string& value);
  #if LANG_CXX11
  void set_vote_address(::std::string&& value);
  #endif
  void set_vote_address(const char* value);
  void set_vote_address(const void* value, size_t size);
  ::std::string* mutable_vote_address();
  ::std::string* release_vote_address();
  void set_allocated_vote_address(::std::string* vote_address);

  // optional uint64 vote_count = 2;
  bool has_vote_count() const;
  void clear_vote_count();
  static const int kVoteCountFieldNumber = 2;
  ::google::protobuf::uint64 vote_count() const;
  void set_vote_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vote_address_;
  ::google::protobuf::uint64 vote_count_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronVoteWitnessContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronVoteWitnessContract) */ {
 public:
  TronSignTx_TronContract_TronVoteWitnessContract();
  virtual ~TronSignTx_TronContract_TronVoteWitnessContract();

  TronSignTx_TronContract_TronVoteWitnessContract(const TronSignTx_TronContract_TronVoteWitnessContract& from);

  inline TronSignTx_TronContract_TronVoteWitnessContract& operator=(const TronSignTx_TronContract_TronVoteWitnessContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronVoteWitnessContract(TronSignTx_TronContract_TronVoteWitnessContract&& from) noexcept
    : TronSignTx_TronContract_TronVoteWitnessContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronVoteWitnessContract& operator=(TronSignTx_TronContract_TronVoteWitnessContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronVoteWitnessContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronVoteWitnessContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronVoteWitnessContract*>(
               &_TronSignTx_TronContract_TronVoteWitnessContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TronSignTx_TronContract_TronVoteWitnessContract* other);
  friend void swap(TronSignTx_TronContract_TronVoteWitnessContract& a, TronSignTx_TronContract_TronVoteWitnessContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronVoteWitnessContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronVoteWitnessContract>(nullptr);
  }

  TronSignTx_TronContract_TronVoteWitnessContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronVoteWitnessContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronVoteWitnessContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronVoteWitnessContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronVoteWitnessContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TronSignTx_TronContract_TronVoteWitnessContract_TronVote TronVote;

  // accessors -------------------------------------------------------

  // repeated .TronSignTx.TronContract.TronVoteWitnessContract.TronVote votes = 1;
  int votes_size() const;
  void clear_votes();
  static const int kVotesFieldNumber = 1;
  ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote* mutable_votes(int index);
  ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote >*
      mutable_votes();
  const ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote& votes(int index) const;
  ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote* add_votes();
  const ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronVoteWitnessContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote > votes_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronWitnessCreateContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronWitnessCreateContract) */ {
 public:
  TronSignTx_TronContract_TronWitnessCreateContract();
  virtual ~TronSignTx_TronContract_TronWitnessCreateContract();

  TronSignTx_TronContract_TronWitnessCreateContract(const TronSignTx_TronContract_TronWitnessCreateContract& from);

  inline TronSignTx_TronContract_TronWitnessCreateContract& operator=(const TronSignTx_TronContract_TronWitnessCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronWitnessCreateContract(TronSignTx_TronContract_TronWitnessCreateContract&& from) noexcept
    : TronSignTx_TronContract_TronWitnessCreateContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronWitnessCreateContract& operator=(TronSignTx_TronContract_TronWitnessCreateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronWitnessCreateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronWitnessCreateContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronWitnessCreateContract*>(
               &_TronSignTx_TronContract_TronWitnessCreateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TronSignTx_TronContract_TronWitnessCreateContract* other);
  friend void swap(TronSignTx_TronContract_TronWitnessCreateContract& a, TronSignTx_TronContract_TronWitnessCreateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronWitnessCreateContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronWitnessCreateContract>(nullptr);
  }

  TronSignTx_TronContract_TronWitnessCreateContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronWitnessCreateContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronWitnessCreateContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronWitnessCreateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronWitnessCreateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronWitnessCreateContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronWitnessUpdateContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronWitnessUpdateContract) */ {
 public:
  TronSignTx_TronContract_TronWitnessUpdateContract();
  virtual ~TronSignTx_TronContract_TronWitnessUpdateContract();

  TronSignTx_TronContract_TronWitnessUpdateContract(const TronSignTx_TronContract_TronWitnessUpdateContract& from);

  inline TronSignTx_TronContract_TronWitnessUpdateContract& operator=(const TronSignTx_TronContract_TronWitnessUpdateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronWitnessUpdateContract(TronSignTx_TronContract_TronWitnessUpdateContract&& from) noexcept
    : TronSignTx_TronContract_TronWitnessUpdateContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronWitnessUpdateContract& operator=(TronSignTx_TronContract_TronWitnessUpdateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronWitnessUpdateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronWitnessUpdateContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronWitnessUpdateContract*>(
               &_TronSignTx_TronContract_TronWitnessUpdateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TronSignTx_TronContract_TronWitnessUpdateContract* other);
  friend void swap(TronSignTx_TronContract_TronWitnessUpdateContract& a, TronSignTx_TronContract_TronWitnessUpdateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronWitnessUpdateContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronWitnessUpdateContract>(nullptr);
  }

  TronSignTx_TronContract_TronWitnessUpdateContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronWitnessUpdateContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronWitnessUpdateContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronWitnessUpdateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronWitnessUpdateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string update_url = 2;
  bool has_update_url() const;
  void clear_update_url();
  static const int kUpdateUrlFieldNumber = 2;
  const ::std::string& update_url() const;
  void set_update_url(const ::std::string& value);
  #if LANG_CXX11
  void set_update_url(::std::string&& value);
  #endif
  void set_update_url(const char* value);
  void set_update_url(const char* value, size_t size);
  ::std::string* mutable_update_url();
  ::std::string* release_update_url();
  void set_allocated_update_url(::std::string* update_url);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronWitnessUpdateContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr update_url_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply) */ {
 public:
  TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply();
  virtual ~TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply();

  TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply(const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& from);

  inline TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& operator=(const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply&& from) noexcept
    : TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& operator=(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply*>(
               &_TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* other);
  friend void swap(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& a, TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply>(nullptr);
  }

  TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& from);
  void MergeFrom(const TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 frozen_amount = 1;
  bool has_frozen_amount() const;
  void clear_frozen_amount();
  static const int kFrozenAmountFieldNumber = 1;
  ::google::protobuf::uint64 frozen_amount() const;
  void set_frozen_amount(::google::protobuf::uint64 value);

  // optional uint64 frozen_days = 2;
  bool has_frozen_days() const;
  void clear_frozen_days();
  static const int kFrozenDaysFieldNumber = 2;
  ::google::protobuf::uint64 frozen_days() const;
  void set_frozen_days(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 frozen_amount_;
  ::google::protobuf::uint64 frozen_days_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronAssetIssueContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronAssetIssueContract) */ {
 public:
  TronSignTx_TronContract_TronAssetIssueContract();
  virtual ~TronSignTx_TronContract_TronAssetIssueContract();

  TronSignTx_TronContract_TronAssetIssueContract(const TronSignTx_TronContract_TronAssetIssueContract& from);

  inline TronSignTx_TronContract_TronAssetIssueContract& operator=(const TronSignTx_TronContract_TronAssetIssueContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronAssetIssueContract(TronSignTx_TronContract_TronAssetIssueContract&& from) noexcept
    : TronSignTx_TronContract_TronAssetIssueContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronAssetIssueContract& operator=(TronSignTx_TronContract_TronAssetIssueContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronAssetIssueContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronAssetIssueContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronAssetIssueContract*>(
               &_TronSignTx_TronContract_TronAssetIssueContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TronSignTx_TronContract_TronAssetIssueContract* other);
  friend void swap(TronSignTx_TronContract_TronAssetIssueContract& a, TronSignTx_TronContract_TronAssetIssueContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronAssetIssueContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronAssetIssueContract>(nullptr);
  }

  TronSignTx_TronContract_TronAssetIssueContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronAssetIssueContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronAssetIssueContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronAssetIssueContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronAssetIssueContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply TronFrozenSupply;

  // accessors -------------------------------------------------------

  // repeated .TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply frozen_supply = 5;
  int frozen_supply_size() const;
  void clear_frozen_supply();
  static const int kFrozenSupplyFieldNumber = 5;
  ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* mutable_frozen_supply(int index);
  ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply >*
      mutable_frozen_supply();
  const ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& frozen_supply(int index) const;
  ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* add_frozen_supply();
  const ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply >&
      frozen_supply() const;

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string abbr = 3;
  bool has_abbr() const;
  void clear_abbr();
  static const int kAbbrFieldNumber = 3;
  const ::std::string& abbr() const;
  void set_abbr(const ::std::string& value);
  #if LANG_CXX11
  void set_abbr(::std::string&& value);
  #endif
  void set_abbr(const char* value);
  void set_abbr(const char* value, size_t size);
  ::std::string* mutable_abbr();
  ::std::string* release_abbr();
  void set_allocated_abbr(::std::string* abbr);

  // optional string description = 10;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 10;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string url = 11;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 11;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional uint64 total_supply = 4;
  bool has_total_supply() const;
  void clear_total_supply();
  static const int kTotalSupplyFieldNumber = 4;
  ::google::protobuf::uint64 total_supply() const;
  void set_total_supply(::google::protobuf::uint64 value);

  // optional uint32 trx_num = 6;
  bool has_trx_num() const;
  void clear_trx_num();
  static const int kTrxNumFieldNumber = 6;
  ::google::protobuf::uint32 trx_num() const;
  void set_trx_num(::google::protobuf::uint32 value);

  // optional uint32 num = 7;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 7;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // optional uint64 start_time = 8;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 8;
  ::google::protobuf::uint64 start_time() const;
  void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 9;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 9;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronAssetIssueContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply > frozen_supply_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr abbr_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 total_supply_;
  ::google::protobuf::uint32 trx_num_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 end_time_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronParticipateAssetIssueContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronParticipateAssetIssueContract) */ {
 public:
  TronSignTx_TronContract_TronParticipateAssetIssueContract();
  virtual ~TronSignTx_TronContract_TronParticipateAssetIssueContract();

  TronSignTx_TronContract_TronParticipateAssetIssueContract(const TronSignTx_TronContract_TronParticipateAssetIssueContract& from);

  inline TronSignTx_TronContract_TronParticipateAssetIssueContract& operator=(const TronSignTx_TronContract_TronParticipateAssetIssueContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronParticipateAssetIssueContract(TronSignTx_TronContract_TronParticipateAssetIssueContract&& from) noexcept
    : TronSignTx_TronContract_TronParticipateAssetIssueContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronParticipateAssetIssueContract& operator=(TronSignTx_TronContract_TronParticipateAssetIssueContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronParticipateAssetIssueContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronParticipateAssetIssueContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronParticipateAssetIssueContract*>(
               &_TronSignTx_TronContract_TronParticipateAssetIssueContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TronSignTx_TronContract_TronParticipateAssetIssueContract* other);
  friend void swap(TronSignTx_TronContract_TronParticipateAssetIssueContract& a, TronSignTx_TronContract_TronParticipateAssetIssueContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronParticipateAssetIssueContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronParticipateAssetIssueContract>(nullptr);
  }

  TronSignTx_TronContract_TronParticipateAssetIssueContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronParticipateAssetIssueContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronParticipateAssetIssueContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronParticipateAssetIssueContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronParticipateAssetIssueContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes to_address = 1;
  bool has_to_address() const;
  void clear_to_address();
  static const int kToAddressFieldNumber = 1;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  #if LANG_CXX11
  void set_to_address(::std::string&& value);
  #endif
  void set_to_address(const char* value);
  void set_to_address(const void* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // optional string asset_name = 2;
  bool has_asset_name() const;
  void clear_asset_name();
  static const int kAssetNameFieldNumber = 2;
  const ::std::string& asset_name() const;
  void set_asset_name(const ::std::string& value);
  #if LANG_CXX11
  void set_asset_name(::std::string&& value);
  #endif
  void set_asset_name(const char* value);
  void set_asset_name(const char* value, size_t size);
  ::std::string* mutable_asset_name();
  ::std::string* release_asset_name();
  void set_allocated_asset_name(::std::string* asset_name);

  // optional uint64 amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronParticipateAssetIssueContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::internal::ArenaStringPtr asset_name_;
  ::google::protobuf::uint64 amount_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronFreezeBalanceContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronFreezeBalanceContract) */ {
 public:
  TronSignTx_TronContract_TronFreezeBalanceContract();
  virtual ~TronSignTx_TronContract_TronFreezeBalanceContract();

  TronSignTx_TronContract_TronFreezeBalanceContract(const TronSignTx_TronContract_TronFreezeBalanceContract& from);

  inline TronSignTx_TronContract_TronFreezeBalanceContract& operator=(const TronSignTx_TronContract_TronFreezeBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronFreezeBalanceContract(TronSignTx_TronContract_TronFreezeBalanceContract&& from) noexcept
    : TronSignTx_TronContract_TronFreezeBalanceContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronFreezeBalanceContract& operator=(TronSignTx_TronContract_TronFreezeBalanceContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronFreezeBalanceContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronFreezeBalanceContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronFreezeBalanceContract*>(
               &_TronSignTx_TronContract_TronFreezeBalanceContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TronSignTx_TronContract_TronFreezeBalanceContract* other);
  friend void swap(TronSignTx_TronContract_TronFreezeBalanceContract& a, TronSignTx_TronContract_TronFreezeBalanceContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronFreezeBalanceContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronFreezeBalanceContract>(nullptr);
  }

  TronSignTx_TronContract_TronFreezeBalanceContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronFreezeBalanceContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronFreezeBalanceContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronFreezeBalanceContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronFreezeBalanceContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 frozen_balance = 1;
  bool has_frozen_balance() const;
  void clear_frozen_balance();
  static const int kFrozenBalanceFieldNumber = 1;
  ::google::protobuf::uint64 frozen_balance() const;
  void set_frozen_balance(::google::protobuf::uint64 value);

  // optional uint64 frozen_duration = 2;
  bool has_frozen_duration() const;
  void clear_frozen_duration();
  static const int kFrozenDurationFieldNumber = 2;
  ::google::protobuf::uint64 frozen_duration() const;
  void set_frozen_duration(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronFreezeBalanceContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 frozen_balance_;
  ::google::protobuf::uint64 frozen_duration_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronUnfreezeBalanceContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronUnfreezeBalanceContract) */ {
 public:
  TronSignTx_TronContract_TronUnfreezeBalanceContract();
  virtual ~TronSignTx_TronContract_TronUnfreezeBalanceContract();

  TronSignTx_TronContract_TronUnfreezeBalanceContract(const TronSignTx_TronContract_TronUnfreezeBalanceContract& from);

  inline TronSignTx_TronContract_TronUnfreezeBalanceContract& operator=(const TronSignTx_TronContract_TronUnfreezeBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronUnfreezeBalanceContract(TronSignTx_TronContract_TronUnfreezeBalanceContract&& from) noexcept
    : TronSignTx_TronContract_TronUnfreezeBalanceContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronUnfreezeBalanceContract& operator=(TronSignTx_TronContract_TronUnfreezeBalanceContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronUnfreezeBalanceContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronUnfreezeBalanceContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronUnfreezeBalanceContract*>(
               &_TronSignTx_TronContract_TronUnfreezeBalanceContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TronSignTx_TronContract_TronUnfreezeBalanceContract* other);
  friend void swap(TronSignTx_TronContract_TronUnfreezeBalanceContract& a, TronSignTx_TronContract_TronUnfreezeBalanceContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronUnfreezeBalanceContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronUnfreezeBalanceContract>(nullptr);
  }

  TronSignTx_TronContract_TronUnfreezeBalanceContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronUnfreezeBalanceContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronUnfreezeBalanceContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronUnfreezeBalanceContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronUnfreezeBalanceContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronUnfreezeBalanceContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronUnfreezeAssetContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronUnfreezeAssetContract) */ {
 public:
  TronSignTx_TronContract_TronUnfreezeAssetContract();
  virtual ~TronSignTx_TronContract_TronUnfreezeAssetContract();

  TronSignTx_TronContract_TronUnfreezeAssetContract(const TronSignTx_TronContract_TronUnfreezeAssetContract& from);

  inline TronSignTx_TronContract_TronUnfreezeAssetContract& operator=(const TronSignTx_TronContract_TronUnfreezeAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronUnfreezeAssetContract(TronSignTx_TronContract_TronUnfreezeAssetContract&& from) noexcept
    : TronSignTx_TronContract_TronUnfreezeAssetContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronUnfreezeAssetContract& operator=(TronSignTx_TronContract_TronUnfreezeAssetContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronUnfreezeAssetContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronUnfreezeAssetContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronUnfreezeAssetContract*>(
               &_TronSignTx_TronContract_TronUnfreezeAssetContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TronSignTx_TronContract_TronUnfreezeAssetContract* other);
  friend void swap(TronSignTx_TronContract_TronUnfreezeAssetContract& a, TronSignTx_TronContract_TronUnfreezeAssetContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronUnfreezeAssetContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronUnfreezeAssetContract>(nullptr);
  }

  TronSignTx_TronContract_TronUnfreezeAssetContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronUnfreezeAssetContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronUnfreezeAssetContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronUnfreezeAssetContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronUnfreezeAssetContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronUnfreezeAssetContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronWithdrawBalanceContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronWithdrawBalanceContract) */ {
 public:
  TronSignTx_TronContract_TronWithdrawBalanceContract();
  virtual ~TronSignTx_TronContract_TronWithdrawBalanceContract();

  TronSignTx_TronContract_TronWithdrawBalanceContract(const TronSignTx_TronContract_TronWithdrawBalanceContract& from);

  inline TronSignTx_TronContract_TronWithdrawBalanceContract& operator=(const TronSignTx_TronContract_TronWithdrawBalanceContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronWithdrawBalanceContract(TronSignTx_TronContract_TronWithdrawBalanceContract&& from) noexcept
    : TronSignTx_TronContract_TronWithdrawBalanceContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronWithdrawBalanceContract& operator=(TronSignTx_TronContract_TronWithdrawBalanceContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronWithdrawBalanceContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronWithdrawBalanceContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronWithdrawBalanceContract*>(
               &_TronSignTx_TronContract_TronWithdrawBalanceContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(TronSignTx_TronContract_TronWithdrawBalanceContract* other);
  friend void swap(TronSignTx_TronContract_TronWithdrawBalanceContract& a, TronSignTx_TronContract_TronWithdrawBalanceContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronWithdrawBalanceContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronWithdrawBalanceContract>(nullptr);
  }

  TronSignTx_TronContract_TronWithdrawBalanceContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronWithdrawBalanceContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronWithdrawBalanceContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronWithdrawBalanceContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronWithdrawBalanceContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronWithdrawBalanceContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronUpdateAssetContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronUpdateAssetContract) */ {
 public:
  TronSignTx_TronContract_TronUpdateAssetContract();
  virtual ~TronSignTx_TronContract_TronUpdateAssetContract();

  TronSignTx_TronContract_TronUpdateAssetContract(const TronSignTx_TronContract_TronUpdateAssetContract& from);

  inline TronSignTx_TronContract_TronUpdateAssetContract& operator=(const TronSignTx_TronContract_TronUpdateAssetContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronUpdateAssetContract(TronSignTx_TronContract_TronUpdateAssetContract&& from) noexcept
    : TronSignTx_TronContract_TronUpdateAssetContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronUpdateAssetContract& operator=(TronSignTx_TronContract_TronUpdateAssetContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronUpdateAssetContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronUpdateAssetContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronUpdateAssetContract*>(
               &_TronSignTx_TronContract_TronUpdateAssetContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TronSignTx_TronContract_TronUpdateAssetContract* other);
  friend void swap(TronSignTx_TronContract_TronUpdateAssetContract& a, TronSignTx_TronContract_TronUpdateAssetContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronUpdateAssetContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronUpdateAssetContract>(nullptr);
  }

  TronSignTx_TronContract_TronUpdateAssetContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronUpdateAssetContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronUpdateAssetContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronUpdateAssetContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronUpdateAssetContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 1;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronUpdateAssetContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters) */ {
 public:
  TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters();
  virtual ~TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters();

  TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters(const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& from);

  inline TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& operator=(const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters&& from) noexcept
    : TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& operator=(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters*>(
               &_TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* other);
  friend void swap(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& a, TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters>(nullptr);
  }

  TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& from);
  void MergeFrom(const TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::uint64 key() const;
  void set_key(::google::protobuf::uint64 value);

  // optional uint64 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::uint64 value_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronProposalCreateContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronProposalCreateContract) */ {
 public:
  TronSignTx_TronContract_TronProposalCreateContract();
  virtual ~TronSignTx_TronContract_TronProposalCreateContract();

  TronSignTx_TronContract_TronProposalCreateContract(const TronSignTx_TronContract_TronProposalCreateContract& from);

  inline TronSignTx_TronContract_TronProposalCreateContract& operator=(const TronSignTx_TronContract_TronProposalCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronProposalCreateContract(TronSignTx_TronContract_TronProposalCreateContract&& from) noexcept
    : TronSignTx_TronContract_TronProposalCreateContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronProposalCreateContract& operator=(TronSignTx_TronContract_TronProposalCreateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronProposalCreateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronProposalCreateContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronProposalCreateContract*>(
               &_TronSignTx_TronContract_TronProposalCreateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(TronSignTx_TronContract_TronProposalCreateContract* other);
  friend void swap(TronSignTx_TronContract_TronProposalCreateContract& a, TronSignTx_TronContract_TronProposalCreateContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronProposalCreateContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalCreateContract>(nullptr);
  }

  TronSignTx_TronContract_TronProposalCreateContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalCreateContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronProposalCreateContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronProposalCreateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronProposalCreateContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters TronProposalParameters;

  // accessors -------------------------------------------------------

  // repeated .TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters parameters = 1;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* mutable_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters >*
      mutable_parameters();
  const ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& parameters(int index) const;
  ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* add_parameters();
  const ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters >&
      parameters() const;

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronProposalCreateContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters > parameters_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronProposalApproveContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronProposalApproveContract) */ {
 public:
  TronSignTx_TronContract_TronProposalApproveContract();
  virtual ~TronSignTx_TronContract_TronProposalApproveContract();

  TronSignTx_TronContract_TronProposalApproveContract(const TronSignTx_TronContract_TronProposalApproveContract& from);

  inline TronSignTx_TronContract_TronProposalApproveContract& operator=(const TronSignTx_TronContract_TronProposalApproveContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronProposalApproveContract(TronSignTx_TronContract_TronProposalApproveContract&& from) noexcept
    : TronSignTx_TronContract_TronProposalApproveContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronProposalApproveContract& operator=(TronSignTx_TronContract_TronProposalApproveContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronProposalApproveContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronProposalApproveContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronProposalApproveContract*>(
               &_TronSignTx_TronContract_TronProposalApproveContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(TronSignTx_TronContract_TronProposalApproveContract* other);
  friend void swap(TronSignTx_TronContract_TronProposalApproveContract& a, TronSignTx_TronContract_TronProposalApproveContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronProposalApproveContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalApproveContract>(nullptr);
  }

  TronSignTx_TronContract_TronProposalApproveContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalApproveContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronProposalApproveContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronProposalApproveContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronProposalApproveContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 proposal_id = 1;
  bool has_proposal_id() const;
  void clear_proposal_id();
  static const int kProposalIdFieldNumber = 1;
  ::google::protobuf::uint64 proposal_id() const;
  void set_proposal_id(::google::protobuf::uint64 value);

  // optional bool is_add_approval = 2;
  bool has_is_add_approval() const;
  void clear_is_add_approval();
  static const int kIsAddApprovalFieldNumber = 2;
  bool is_add_approval() const;
  void set_is_add_approval(bool value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronProposalApproveContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 proposal_id_;
  bool is_add_approval_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract_TronProposalDeleteContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract.TronProposalDeleteContract) */ {
 public:
  TronSignTx_TronContract_TronProposalDeleteContract();
  virtual ~TronSignTx_TronContract_TronProposalDeleteContract();

  TronSignTx_TronContract_TronProposalDeleteContract(const TronSignTx_TronContract_TronProposalDeleteContract& from);

  inline TronSignTx_TronContract_TronProposalDeleteContract& operator=(const TronSignTx_TronContract_TronProposalDeleteContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract_TronProposalDeleteContract(TronSignTx_TronContract_TronProposalDeleteContract&& from) noexcept
    : TronSignTx_TronContract_TronProposalDeleteContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract_TronProposalDeleteContract& operator=(TronSignTx_TronContract_TronProposalDeleteContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract_TronProposalDeleteContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract_TronProposalDeleteContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract_TronProposalDeleteContract*>(
               &_TronSignTx_TronContract_TronProposalDeleteContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(TronSignTx_TronContract_TronProposalDeleteContract* other);
  friend void swap(TronSignTx_TronContract_TronProposalDeleteContract& a, TronSignTx_TronContract_TronProposalDeleteContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract_TronProposalDeleteContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalDeleteContract>(nullptr);
  }

  TronSignTx_TronContract_TronProposalDeleteContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract_TronProposalDeleteContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract_TronProposalDeleteContract& from);
  void MergeFrom(const TronSignTx_TronContract_TronProposalDeleteContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract_TronProposalDeleteContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 proposal_id = 1;
  bool has_proposal_id() const;
  void clear_proposal_id();
  static const int kProposalIdFieldNumber = 1;
  ::google::protobuf::uint64 proposal_id() const;
  void set_proposal_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract.TronProposalDeleteContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 proposal_id_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx_TronContract final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx.TronContract) */ {
 public:
  TronSignTx_TronContract();
  virtual ~TronSignTx_TronContract();

  TronSignTx_TronContract(const TronSignTx_TronContract& from);

  inline TronSignTx_TronContract& operator=(const TronSignTx_TronContract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx_TronContract(TronSignTx_TronContract&& from) noexcept
    : TronSignTx_TronContract() {
    *this = ::std::move(from);
  }

  inline TronSignTx_TronContract& operator=(TronSignTx_TronContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx_TronContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx_TronContract* internal_default_instance() {
    return reinterpret_cast<const TronSignTx_TronContract*>(
               &_TronSignTx_TronContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(TronSignTx_TronContract* other);
  friend void swap(TronSignTx_TronContract& a, TronSignTx_TronContract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx_TronContract* New() const final {
    return CreateMaybeMessage<TronSignTx_TronContract>(nullptr);
  }

  TronSignTx_TronContract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx_TronContract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx_TronContract& from);
  void MergeFrom(const TronSignTx_TronContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx_TronContract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TronSignTx_TronContract_TronAccountUpdateContract TronAccountUpdateContract;
  typedef TronSignTx_TronContract_TronTransferContract TronTransferContract;
  typedef TronSignTx_TronContract_TronTransferAssetContract TronTransferAssetContract;
  typedef TronSignTx_TronContract_TronVoteWitnessContract TronVoteWitnessContract;
  typedef TronSignTx_TronContract_TronWitnessCreateContract TronWitnessCreateContract;
  typedef TronSignTx_TronContract_TronWitnessUpdateContract TronWitnessUpdateContract;
  typedef TronSignTx_TronContract_TronAssetIssueContract TronAssetIssueContract;
  typedef TronSignTx_TronContract_TronParticipateAssetIssueContract TronParticipateAssetIssueContract;
  typedef TronSignTx_TronContract_TronFreezeBalanceContract TronFreezeBalanceContract;
  typedef TronSignTx_TronContract_TronUnfreezeBalanceContract TronUnfreezeBalanceContract;
  typedef TronSignTx_TronContract_TronUnfreezeAssetContract TronUnfreezeAssetContract;
  typedef TronSignTx_TronContract_TronWithdrawBalanceContract TronWithdrawBalanceContract;
  typedef TronSignTx_TronContract_TronUpdateAssetContract TronUpdateAssetContract;
  typedef TronSignTx_TronContract_TronProposalCreateContract TronProposalCreateContract;
  typedef TronSignTx_TronContract_TronProposalApproveContract TronProposalApproveContract;
  typedef TronSignTx_TronContract_TronProposalDeleteContract TronProposalDeleteContract;

  // accessors -------------------------------------------------------

  // optional .TronSignTx.TronContract.TronTransferContract transfer_contract = 1;
  bool has_transfer_contract() const;
  void clear_transfer_contract();
  static const int kTransferContractFieldNumber = 1;
  const ::TronSignTx_TronContract_TronTransferContract& transfer_contract() const;
  ::TronSignTx_TronContract_TronTransferContract* release_transfer_contract();
  ::TronSignTx_TronContract_TronTransferContract* mutable_transfer_contract();
  void set_allocated_transfer_contract(::TronSignTx_TronContract_TronTransferContract* transfer_contract);

  // optional .TronSignTx.TronContract.TronTransferAssetContract transfer_asset_contract = 2;
  bool has_transfer_asset_contract() const;
  void clear_transfer_asset_contract();
  static const int kTransferAssetContractFieldNumber = 2;
  const ::TronSignTx_TronContract_TronTransferAssetContract& transfer_asset_contract() const;
  ::TronSignTx_TronContract_TronTransferAssetContract* release_transfer_asset_contract();
  ::TronSignTx_TronContract_TronTransferAssetContract* mutable_transfer_asset_contract();
  void set_allocated_transfer_asset_contract(::TronSignTx_TronContract_TronTransferAssetContract* transfer_asset_contract);

  // optional .TronSignTx.TronContract.TronVoteWitnessContract vote_witness_contract = 4;
  bool has_vote_witness_contract() const;
  void clear_vote_witness_contract();
  static const int kVoteWitnessContractFieldNumber = 4;
  const ::TronSignTx_TronContract_TronVoteWitnessContract& vote_witness_contract() const;
  ::TronSignTx_TronContract_TronVoteWitnessContract* release_vote_witness_contract();
  ::TronSignTx_TronContract_TronVoteWitnessContract* mutable_vote_witness_contract();
  void set_allocated_vote_witness_contract(::TronSignTx_TronContract_TronVoteWitnessContract* vote_witness_contract);

  // optional .TronSignTx.TronContract.TronWitnessCreateContract witness_create_contract = 5;
  bool has_witness_create_contract() const;
  void clear_witness_create_contract();
  static const int kWitnessCreateContractFieldNumber = 5;
  const ::TronSignTx_TronContract_TronWitnessCreateContract& witness_create_contract() const;
  ::TronSignTx_TronContract_TronWitnessCreateContract* release_witness_create_contract();
  ::TronSignTx_TronContract_TronWitnessCreateContract* mutable_witness_create_contract();
  void set_allocated_witness_create_contract(::TronSignTx_TronContract_TronWitnessCreateContract* witness_create_contract);

  // optional .TronSignTx.TronContract.TronAssetIssueContract asset_issue_contract = 6;
  bool has_asset_issue_contract() const;
  void clear_asset_issue_contract();
  static const int kAssetIssueContractFieldNumber = 6;
  const ::TronSignTx_TronContract_TronAssetIssueContract& asset_issue_contract() const;
  ::TronSignTx_TronContract_TronAssetIssueContract* release_asset_issue_contract();
  ::TronSignTx_TronContract_TronAssetIssueContract* mutable_asset_issue_contract();
  void set_allocated_asset_issue_contract(::TronSignTx_TronContract_TronAssetIssueContract* asset_issue_contract);

  // optional .TronSignTx.TronContract.TronWitnessUpdateContract witness_update_contract = 8;
  bool has_witness_update_contract() const;
  void clear_witness_update_contract();
  static const int kWitnessUpdateContractFieldNumber = 8;
  const ::TronSignTx_TronContract_TronWitnessUpdateContract& witness_update_contract() const;
  ::TronSignTx_TronContract_TronWitnessUpdateContract* release_witness_update_contract();
  ::TronSignTx_TronContract_TronWitnessUpdateContract* mutable_witness_update_contract();
  void set_allocated_witness_update_contract(::TronSignTx_TronContract_TronWitnessUpdateContract* witness_update_contract);

  // optional .TronSignTx.TronContract.TronParticipateAssetIssueContract participate_asset_issue_contract = 9;
  bool has_participate_asset_issue_contract() const;
  void clear_participate_asset_issue_contract();
  static const int kParticipateAssetIssueContractFieldNumber = 9;
  const ::TronSignTx_TronContract_TronParticipateAssetIssueContract& participate_asset_issue_contract() const;
  ::TronSignTx_TronContract_TronParticipateAssetIssueContract* release_participate_asset_issue_contract();
  ::TronSignTx_TronContract_TronParticipateAssetIssueContract* mutable_participate_asset_issue_contract();
  void set_allocated_participate_asset_issue_contract(::TronSignTx_TronContract_TronParticipateAssetIssueContract* participate_asset_issue_contract);

  // optional .TronSignTx.TronContract.TronAccountUpdateContract account_update_contract = 10;
  bool has_account_update_contract() const;
  void clear_account_update_contract();
  static const int kAccountUpdateContractFieldNumber = 10;
  const ::TronSignTx_TronContract_TronAccountUpdateContract& account_update_contract() const;
  ::TronSignTx_TronContract_TronAccountUpdateContract* release_account_update_contract();
  ::TronSignTx_TronContract_TronAccountUpdateContract* mutable_account_update_contract();
  void set_allocated_account_update_contract(::TronSignTx_TronContract_TronAccountUpdateContract* account_update_contract);

  // optional .TronSignTx.TronContract.TronFreezeBalanceContract freeze_balance_contract = 11;
  bool has_freeze_balance_contract() const;
  void clear_freeze_balance_contract();
  static const int kFreezeBalanceContractFieldNumber = 11;
  const ::TronSignTx_TronContract_TronFreezeBalanceContract& freeze_balance_contract() const;
  ::TronSignTx_TronContract_TronFreezeBalanceContract* release_freeze_balance_contract();
  ::TronSignTx_TronContract_TronFreezeBalanceContract* mutable_freeze_balance_contract();
  void set_allocated_freeze_balance_contract(::TronSignTx_TronContract_TronFreezeBalanceContract* freeze_balance_contract);

  // optional .TronSignTx.TronContract.TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
  bool has_unfreeze_balance_contract() const;
  void clear_unfreeze_balance_contract();
  static const int kUnfreezeBalanceContractFieldNumber = 12;
  const ::TronSignTx_TronContract_TronUnfreezeBalanceContract& unfreeze_balance_contract() const;
  ::TronSignTx_TronContract_TronUnfreezeBalanceContract* release_unfreeze_balance_contract();
  ::TronSignTx_TronContract_TronUnfreezeBalanceContract* mutable_unfreeze_balance_contract();
  void set_allocated_unfreeze_balance_contract(::TronSignTx_TronContract_TronUnfreezeBalanceContract* unfreeze_balance_contract);

  // optional .TronSignTx.TronContract.TronWithdrawBalanceContract withdraw_balance_contract = 13;
  bool has_withdraw_balance_contract() const;
  void clear_withdraw_balance_contract();
  static const int kWithdrawBalanceContractFieldNumber = 13;
  const ::TronSignTx_TronContract_TronWithdrawBalanceContract& withdraw_balance_contract() const;
  ::TronSignTx_TronContract_TronWithdrawBalanceContract* release_withdraw_balance_contract();
  ::TronSignTx_TronContract_TronWithdrawBalanceContract* mutable_withdraw_balance_contract();
  void set_allocated_withdraw_balance_contract(::TronSignTx_TronContract_TronWithdrawBalanceContract* withdraw_balance_contract);

  // optional .TronSignTx.TronContract.TronUnfreezeAssetContract unfreeze_asset_contract = 14;
  bool has_unfreeze_asset_contract() const;
  void clear_unfreeze_asset_contract();
  static const int kUnfreezeAssetContractFieldNumber = 14;
  const ::TronSignTx_TronContract_TronUnfreezeAssetContract& unfreeze_asset_contract() const;
  ::TronSignTx_TronContract_TronUnfreezeAssetContract* release_unfreeze_asset_contract();
  ::TronSignTx_TronContract_TronUnfreezeAssetContract* mutable_unfreeze_asset_contract();
  void set_allocated_unfreeze_asset_contract(::TronSignTx_TronContract_TronUnfreezeAssetContract* unfreeze_asset_contract);

  // optional .TronSignTx.TronContract.TronUpdateAssetContract update_asset_contract = 15;
  bool has_update_asset_contract() const;
  void clear_update_asset_contract();
  static const int kUpdateAssetContractFieldNumber = 15;
  const ::TronSignTx_TronContract_TronUpdateAssetContract& update_asset_contract() const;
  ::TronSignTx_TronContract_TronUpdateAssetContract* release_update_asset_contract();
  ::TronSignTx_TronContract_TronUpdateAssetContract* mutable_update_asset_contract();
  void set_allocated_update_asset_contract(::TronSignTx_TronContract_TronUpdateAssetContract* update_asset_contract);

  // optional .TronSignTx.TronContract.TronProposalCreateContract proposal_create_contract = 16;
  bool has_proposal_create_contract() const;
  void clear_proposal_create_contract();
  static const int kProposalCreateContractFieldNumber = 16;
  const ::TronSignTx_TronContract_TronProposalCreateContract& proposal_create_contract() const;
  ::TronSignTx_TronContract_TronProposalCreateContract* release_proposal_create_contract();
  ::TronSignTx_TronContract_TronProposalCreateContract* mutable_proposal_create_contract();
  void set_allocated_proposal_create_contract(::TronSignTx_TronContract_TronProposalCreateContract* proposal_create_contract);

  // optional .TronSignTx.TronContract.TronProposalApproveContract proposal_approve_contract = 17;
  bool has_proposal_approve_contract() const;
  void clear_proposal_approve_contract();
  static const int kProposalApproveContractFieldNumber = 17;
  const ::TronSignTx_TronContract_TronProposalApproveContract& proposal_approve_contract() const;
  ::TronSignTx_TronContract_TronProposalApproveContract* release_proposal_approve_contract();
  ::TronSignTx_TronContract_TronProposalApproveContract* mutable_proposal_approve_contract();
  void set_allocated_proposal_approve_contract(::TronSignTx_TronContract_TronProposalApproveContract* proposal_approve_contract);

  // optional .TronSignTx.TronContract.TronProposalDeleteContract proposal_delete_contract = 18;
  bool has_proposal_delete_contract() const;
  void clear_proposal_delete_contract();
  static const int kProposalDeleteContractFieldNumber = 18;
  const ::TronSignTx_TronContract_TronProposalDeleteContract& proposal_delete_contract() const;
  ::TronSignTx_TronContract_TronProposalDeleteContract* release_proposal_delete_contract();
  ::TronSignTx_TronContract_TronProposalDeleteContract* mutable_proposal_delete_contract();
  void set_allocated_proposal_delete_contract(::TronSignTx_TronContract_TronProposalDeleteContract* proposal_delete_contract);

  // @@protoc_insertion_point(class_scope:TronSignTx.TronContract)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::TronSignTx_TronContract_TronTransferContract* transfer_contract_;
  ::TronSignTx_TronContract_TronTransferAssetContract* transfer_asset_contract_;
  ::TronSignTx_TronContract_TronVoteWitnessContract* vote_witness_contract_;
  ::TronSignTx_TronContract_TronWitnessCreateContract* witness_create_contract_;
  ::TronSignTx_TronContract_TronAssetIssueContract* asset_issue_contract_;
  ::TronSignTx_TronContract_TronWitnessUpdateContract* witness_update_contract_;
  ::TronSignTx_TronContract_TronParticipateAssetIssueContract* participate_asset_issue_contract_;
  ::TronSignTx_TronContract_TronAccountUpdateContract* account_update_contract_;
  ::TronSignTx_TronContract_TronFreezeBalanceContract* freeze_balance_contract_;
  ::TronSignTx_TronContract_TronUnfreezeBalanceContract* unfreeze_balance_contract_;
  ::TronSignTx_TronContract_TronWithdrawBalanceContract* withdraw_balance_contract_;
  ::TronSignTx_TronContract_TronUnfreezeAssetContract* unfreeze_asset_contract_;
  ::TronSignTx_TronContract_TronUpdateAssetContract* update_asset_contract_;
  ::TronSignTx_TronContract_TronProposalCreateContract* proposal_create_contract_;
  ::TronSignTx_TronContract_TronProposalApproveContract* proposal_approve_contract_;
  ::TronSignTx_TronContract_TronProposalDeleteContract* proposal_delete_contract_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignTx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignTx) */ {
 public:
  TronSignTx();
  virtual ~TronSignTx();

  TronSignTx(const TronSignTx& from);

  inline TronSignTx& operator=(const TronSignTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignTx(TronSignTx&& from) noexcept
    : TronSignTx() {
    *this = ::std::move(from);
  }

  inline TronSignTx& operator=(TronSignTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignTx* internal_default_instance() {
    return reinterpret_cast<const TronSignTx*>(
               &_TronSignTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(TronSignTx* other);
  friend void swap(TronSignTx& a, TronSignTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignTx* New() const final {
    return CreateMaybeMessage<TronSignTx>(nullptr);
  }

  TronSignTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignTx& from);
  void MergeFrom(const TronSignTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TronSignTx_TronContract TronContract;

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional bytes ref_block_bytes = 2;
  bool has_ref_block_bytes() const;
  void clear_ref_block_bytes();
  static const int kRefBlockBytesFieldNumber = 2;
  const ::std::string& ref_block_bytes() const;
  void set_ref_block_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_ref_block_bytes(::std::string&& value);
  #endif
  void set_ref_block_bytes(const char* value);
  void set_ref_block_bytes(const void* value, size_t size);
  ::std::string* mutable_ref_block_bytes();
  ::std::string* release_ref_block_bytes();
  void set_allocated_ref_block_bytes(::std::string* ref_block_bytes);

  // optional bytes ref_block_hash = 3;
  bool has_ref_block_hash() const;
  void clear_ref_block_hash();
  static const int kRefBlockHashFieldNumber = 3;
  const ::std::string& ref_block_hash() const;
  void set_ref_block_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_ref_block_hash(::std::string&& value);
  #endif
  void set_ref_block_hash(const char* value);
  void set_ref_block_hash(const void* value, size_t size);
  ::std::string* mutable_ref_block_hash();
  ::std::string* release_ref_block_hash();
  void set_allocated_ref_block_hash(::std::string* ref_block_hash);

  // optional string data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .TronSignTx.TronContract contract = 6;
  bool has_contract() const;
  void clear_contract();
  static const int kContractFieldNumber = 6;
  const ::TronSignTx_TronContract& contract() const;
  ::TronSignTx_TronContract* release_contract();
  ::TronSignTx_TronContract* mutable_contract();
  void set_allocated_contract(::TronSignTx_TronContract* contract);

  // optional uint64 expiration = 4;
  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 4;
  ::google::protobuf::uint64 expiration() const;
  void set_expiration(::google::protobuf::uint64 value);

  // optional uint64 timestamp = 7;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TronSignTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  ::google::protobuf::internal::ArenaStringPtr ref_block_bytes_;
  ::google::protobuf::internal::ArenaStringPtr ref_block_hash_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::TronSignTx_TronContract* contract_;
  ::google::protobuf::uint64 expiration_;
  ::google::protobuf::uint64 timestamp_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// -------------------------------------------------------------------

class TronSignedTx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TronSignedTx) */ {
 public:
  TronSignedTx();
  virtual ~TronSignedTx();

  TronSignedTx(const TronSignedTx& from);

  inline TronSignedTx& operator=(const TronSignedTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TronSignedTx(TronSignedTx&& from) noexcept
    : TronSignedTx() {
    *this = ::std::move(from);
  }

  inline TronSignedTx& operator=(TronSignedTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TronSignedTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TronSignedTx* internal_default_instance() {
    return reinterpret_cast<const TronSignedTx*>(
               &_TronSignedTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(TronSignedTx* other);
  friend void swap(TronSignedTx& a, TronSignedTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TronSignedTx* New() const final {
    return CreateMaybeMessage<TronSignedTx>(nullptr);
  }

  TronSignedTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TronSignedTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TronSignedTx& from);
  void MergeFrom(const TronSignedTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TronSignedTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional bytes serialized_tx = 2;
  bool has_serialized_tx() const;
  void clear_serialized_tx();
  static const int kSerializedTxFieldNumber = 2;
  const ::std::string& serialized_tx() const;
  void set_serialized_tx(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_tx(::std::string&& value);
  #endif
  void set_serialized_tx(const char* value);
  void set_serialized_tx(const void* value, size_t size);
  ::std::string* mutable_serialized_tx();
  ::std::string* release_serialized_tx();
  void set_allocated_serialized_tx(::std::string* serialized_tx);

  // @@protoc_insertion_point(class_scope:TronSignedTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr serialized_tx_;
  friend struct ::TableStruct_messages_2dtron_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TronGetAddress

// repeated uint32 address_n = 1;
inline int TronGetAddress::address_n_size() const {
  return address_n_.size();
}
inline void TronGetAddress::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 TronGetAddress::address_n(int index) const {
  // @@protoc_insertion_point(field_get:TronGetAddress.address_n)
  return address_n_.Get(index);
}
inline void TronGetAddress::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:TronGetAddress.address_n)
}
inline void TronGetAddress::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:TronGetAddress.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TronGetAddress::address_n() const {
  // @@protoc_insertion_point(field_list:TronGetAddress.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TronGetAddress::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:TronGetAddress.address_n)
  return &address_n_;
}

// optional bool show_display = 2;
inline bool TronGetAddress::has_show_display() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronGetAddress::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TronGetAddress::show_display() const {
  // @@protoc_insertion_point(field_get:TronGetAddress.show_display)
  return show_display_;
}
inline void TronGetAddress::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:TronGetAddress.show_display)
}

// -------------------------------------------------------------------

// TronAddress

// optional string address = 1;
inline bool TronAddress::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronAddress::address() const {
  // @@protoc_insertion_point(field_get:TronAddress.address)
  return address_.GetNoArena();
}
inline void TronAddress::set_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronAddress.address)
}
#if LANG_CXX11
inline void TronAddress::set_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronAddress.address)
}
#endif
inline void TronAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronAddress.address)
}
inline void TronAddress::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronAddress.address)
}
inline ::std::string* TronAddress::mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronAddress::release_address() {
  // @@protoc_insertion_point(field_release:TronAddress.address)
  if (!has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronAddress::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:TronAddress.address)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronAccountUpdateContract

// optional string account_name = 1;
inline bool TronSignTx_TronContract_TronAccountUpdateContract::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronAccountUpdateContract::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronAccountUpdateContract::account_name() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
  return account_name_.GetNoArena();
}
inline void TronSignTx_TronContract_TronAccountUpdateContract::set_account_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronAccountUpdateContract::set_account_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
}
#endif
inline void TronSignTx_TronContract_TronAccountUpdateContract::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
}
inline void TronSignTx_TronContract_TronAccountUpdateContract::set_account_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
}
inline ::std::string* TronSignTx_TronContract_TronAccountUpdateContract::mutable_account_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronAccountUpdateContract::release_account_name() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
  if (!has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return account_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronAccountUpdateContract::set_allocated_account_name(::std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronTransferContract

// optional bytes to_address = 1;
inline bool TronSignTx_TronContract_TronTransferContract::has_to_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronTransferContract::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronTransferContract::to_address() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronTransferContract.to_address)
  return to_address_.GetNoArena();
}
inline void TronSignTx_TronContract_TronTransferContract::set_to_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronTransferContract.to_address)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronTransferContract::set_to_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronTransferContract.to_address)
}
#endif
inline void TronSignTx_TronContract_TronTransferContract::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronTransferContract.to_address)
}
inline void TronSignTx_TronContract_TronTransferContract::set_to_address(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronTransferContract.to_address)
}
inline ::std::string* TronSignTx_TronContract_TronTransferContract::mutable_to_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronTransferContract.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronTransferContract::release_to_address() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronTransferContract.to_address)
  if (!has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return to_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronTransferContract::set_allocated_to_address(::std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronTransferContract.to_address)
}

// optional uint64 amount = 2;
inline bool TronSignTx_TronContract_TronTransferContract::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronTransferContract::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronTransferContract::amount() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronTransferContract.amount)
  return amount_;
}
inline void TronSignTx_TronContract_TronTransferContract::set_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronTransferContract.amount)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronTransferAssetContract

// optional string asset_name = 1;
inline bool TronSignTx_TronContract_TronTransferAssetContract::has_asset_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronTransferAssetContract::clear_asset_name() {
  asset_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronTransferAssetContract::asset_name() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
  return asset_name_.GetNoArena();
}
inline void TronSignTx_TronContract_TronTransferAssetContract::set_asset_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronTransferAssetContract::set_asset_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  asset_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
}
#endif
inline void TronSignTx_TronContract_TronTransferAssetContract::set_asset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
}
inline void TronSignTx_TronContract_TronTransferAssetContract::set_asset_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
}
inline ::std::string* TronSignTx_TronContract_TronTransferAssetContract::mutable_asset_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
  return asset_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronTransferAssetContract::release_asset_name() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
  if (!has_asset_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return asset_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronTransferAssetContract::set_allocated_asset_name(::std::string* asset_name) {
  if (asset_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  asset_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_name);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
}

// optional bytes to_address = 2;
inline bool TronSignTx_TronContract_TronTransferAssetContract::has_to_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronTransferAssetContract::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TronSignTx_TronContract_TronTransferAssetContract::to_address() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronTransferAssetContract.to_address)
  return to_address_.GetNoArena();
}
inline void TronSignTx_TronContract_TronTransferAssetContract::set_to_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronTransferAssetContract.to_address)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronTransferAssetContract::set_to_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronTransferAssetContract.to_address)
}
#endif
inline void TronSignTx_TronContract_TronTransferAssetContract::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronTransferAssetContract.to_address)
}
inline void TronSignTx_TronContract_TronTransferAssetContract::set_to_address(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronTransferAssetContract.to_address)
}
inline ::std::string* TronSignTx_TronContract_TronTransferAssetContract::mutable_to_address() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronTransferAssetContract.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronTransferAssetContract::release_to_address() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronTransferAssetContract.to_address)
  if (!has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return to_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronTransferAssetContract::set_allocated_to_address(::std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronTransferAssetContract.to_address)
}

// optional uint64 amount = 3;
inline bool TronSignTx_TronContract_TronTransferAssetContract::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TronSignTx_TronContract_TronTransferAssetContract::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronTransferAssetContract::amount() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronTransferAssetContract.amount)
  return amount_;
}
inline void TronSignTx_TronContract_TronTransferAssetContract::set_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronTransferAssetContract.amount)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronVoteWitnessContract_TronVote

// optional bytes vote_address = 1;
inline bool TronSignTx_TronContract_TronVoteWitnessContract_TronVote::has_vote_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::clear_vote_address() {
  vote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronVoteWitnessContract_TronVote::vote_address() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
  return vote_address_.GetNoArena();
}
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::set_vote_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::set_vote_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vote_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
}
#endif
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::set_vote_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
}
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::set_vote_address(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
}
inline ::std::string* TronSignTx_TronContract_TronVoteWitnessContract_TronVote::mutable_vote_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
  return vote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronVoteWitnessContract_TronVote::release_vote_address() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
  if (!has_vote_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vote_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::set_allocated_vote_address(::std::string* vote_address) {
  if (vote_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vote_address);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
}

// optional uint64 vote_count = 2;
inline bool TronSignTx_TronContract_TronVoteWitnessContract_TronVote::has_vote_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::clear_vote_count() {
  vote_count_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronVoteWitnessContract_TronVote::vote_count() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_count)
  return vote_count_;
}
inline void TronSignTx_TronContract_TronVoteWitnessContract_TronVote::set_vote_count(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  vote_count_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_count)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronVoteWitnessContract

// repeated .TronSignTx.TronContract.TronVoteWitnessContract.TronVote votes = 1;
inline int TronSignTx_TronContract_TronVoteWitnessContract::votes_size() const {
  return votes_.size();
}
inline void TronSignTx_TronContract_TronVoteWitnessContract::clear_votes() {
  votes_.Clear();
}
inline ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote* TronSignTx_TronContract_TronVoteWitnessContract::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronVoteWitnessContract.votes)
  return votes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote >*
TronSignTx_TronContract_TronVoteWitnessContract::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:TronSignTx.TronContract.TronVoteWitnessContract.votes)
  return &votes_;
}
inline const ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote& TronSignTx_TronContract_TronVoteWitnessContract::votes(int index) const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronVoteWitnessContract.votes)
  return votes_.Get(index);
}
inline ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote* TronSignTx_TronContract_TronVoteWitnessContract::add_votes() {
  // @@protoc_insertion_point(field_add:TronSignTx.TronContract.TronVoteWitnessContract.votes)
  return votes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronVoteWitnessContract_TronVote >&
TronSignTx_TronContract_TronVoteWitnessContract::votes() const {
  // @@protoc_insertion_point(field_list:TronSignTx.TronContract.TronVoteWitnessContract.votes)
  return votes_;
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronWitnessCreateContract

// optional string url = 1;
inline bool TronSignTx_TronContract_TronWitnessCreateContract::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronWitnessCreateContract::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronWitnessCreateContract::url() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronWitnessCreateContract.url)
  return url_.GetNoArena();
}
inline void TronSignTx_TronContract_TronWitnessCreateContract::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronWitnessCreateContract.url)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronWitnessCreateContract::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronWitnessCreateContract.url)
}
#endif
inline void TronSignTx_TronContract_TronWitnessCreateContract::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronWitnessCreateContract.url)
}
inline void TronSignTx_TronContract_TronWitnessCreateContract::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronWitnessCreateContract.url)
}
inline ::std::string* TronSignTx_TronContract_TronWitnessCreateContract::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronWitnessCreateContract.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronWitnessCreateContract::release_url() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronWitnessCreateContract.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronWitnessCreateContract::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronWitnessCreateContract.url)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronWitnessUpdateContract

// optional string update_url = 2;
inline bool TronSignTx_TronContract_TronWitnessUpdateContract::has_update_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronWitnessUpdateContract::clear_update_url() {
  update_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronWitnessUpdateContract::update_url() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
  return update_url_.GetNoArena();
}
inline void TronSignTx_TronContract_TronWitnessUpdateContract::set_update_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronWitnessUpdateContract::set_update_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  update_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
}
#endif
inline void TronSignTx_TronContract_TronWitnessUpdateContract::set_update_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
}
inline void TronSignTx_TronContract_TronWitnessUpdateContract::set_update_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  update_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
}
inline ::std::string* TronSignTx_TronContract_TronWitnessUpdateContract::mutable_update_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
  return update_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronWitnessUpdateContract::release_update_url() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
  if (!has_update_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return update_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronWitnessUpdateContract::set_allocated_update_url(::std::string* update_url) {
  if (update_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_url);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply

// optional uint64 frozen_amount = 1;
inline bool TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::has_frozen_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::clear_frozen_amount() {
  frozen_amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::frozen_amount() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply.frozen_amount)
  return frozen_amount_;
}
inline void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::set_frozen_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  frozen_amount_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply.frozen_amount)
}

// optional uint64 frozen_days = 2;
inline bool TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::has_frozen_days() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::clear_frozen_days() {
  frozen_days_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::frozen_days() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply.frozen_days)
  return frozen_days_;
}
inline void TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply::set_frozen_days(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  frozen_days_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply.frozen_days)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronAssetIssueContract

// optional string name = 2;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronAssetIssueContract::name() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.name)
  return name_.GetNoArena();
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.name)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronAssetIssueContract::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronAssetIssueContract.name)
}
#endif
inline void TronSignTx_TronContract_TronAssetIssueContract::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronAssetIssueContract.name)
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronAssetIssueContract.name)
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronAssetIssueContract.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::release_name() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronAssetIssueContract.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronAssetIssueContract.name)
}

// optional string abbr = 3;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_abbr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_abbr() {
  abbr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TronSignTx_TronContract_TronAssetIssueContract::abbr() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.abbr)
  return abbr_.GetNoArena();
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_abbr(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  abbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.abbr)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronAssetIssueContract::set_abbr(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  abbr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronAssetIssueContract.abbr)
}
#endif
inline void TronSignTx_TronContract_TronAssetIssueContract::set_abbr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  abbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronAssetIssueContract.abbr)
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_abbr(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  abbr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronAssetIssueContract.abbr)
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::mutable_abbr() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronAssetIssueContract.abbr)
  return abbr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::release_abbr() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronAssetIssueContract.abbr)
  if (!has_abbr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return abbr_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_allocated_abbr(::std::string* abbr) {
  if (abbr != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  abbr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abbr);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronAssetIssueContract.abbr)
}

// optional uint64 total_supply = 4;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_total_supply() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_total_supply() {
  total_supply_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronAssetIssueContract::total_supply() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.total_supply)
  return total_supply_;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_total_supply(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  total_supply_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.total_supply)
}

// repeated .TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply frozen_supply = 5;
inline int TronSignTx_TronContract_TronAssetIssueContract::frozen_supply_size() const {
  return frozen_supply_.size();
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_frozen_supply() {
  frozen_supply_.Clear();
}
inline ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* TronSignTx_TronContract_TronAssetIssueContract::mutable_frozen_supply(int index) {
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronAssetIssueContract.frozen_supply)
  return frozen_supply_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply >*
TronSignTx_TronContract_TronAssetIssueContract::mutable_frozen_supply() {
  // @@protoc_insertion_point(field_mutable_list:TronSignTx.TronContract.TronAssetIssueContract.frozen_supply)
  return &frozen_supply_;
}
inline const ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply& TronSignTx_TronContract_TronAssetIssueContract::frozen_supply(int index) const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.frozen_supply)
  return frozen_supply_.Get(index);
}
inline ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply* TronSignTx_TronContract_TronAssetIssueContract::add_frozen_supply() {
  // @@protoc_insertion_point(field_add:TronSignTx.TronContract.TronAssetIssueContract.frozen_supply)
  return frozen_supply_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronAssetIssueContract_TronFrozenSupply >&
TronSignTx_TronContract_TronAssetIssueContract::frozen_supply() const {
  // @@protoc_insertion_point(field_list:TronSignTx.TronContract.TronAssetIssueContract.frozen_supply)
  return frozen_supply_;
}

// optional uint32 trx_num = 6;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_trx_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_trx_num() {
  trx_num_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 TronSignTx_TronContract_TronAssetIssueContract::trx_num() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.trx_num)
  return trx_num_;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_trx_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  trx_num_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.trx_num)
}

// optional uint32 num = 7;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_num() {
  num_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint32 TronSignTx_TronContract_TronAssetIssueContract::num() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.num)
  return num_;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.num)
}

// optional uint64 start_time = 8;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronAssetIssueContract::start_time() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.start_time)
  return start_time_;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_start_time(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  start_time_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.start_time)
}

// optional uint64 end_time = 9;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronAssetIssueContract::end_time() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.end_time)
  return end_time_;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_end_time(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  end_time_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.end_time)
}

// optional string description = 10;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& TronSignTx_TronContract_TronAssetIssueContract::description() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.description)
  return description_.GetNoArena();
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_description(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.description)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronAssetIssueContract::set_description(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronAssetIssueContract.description)
}
#endif
inline void TronSignTx_TronContract_TronAssetIssueContract::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronAssetIssueContract.description)
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronAssetIssueContract.description)
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronAssetIssueContract.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::release_description() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronAssetIssueContract.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronAssetIssueContract.description)
}

// optional string url = 11;
inline bool TronSignTx_TronContract_TronAssetIssueContract::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TronSignTx_TronContract_TronAssetIssueContract::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& TronSignTx_TronContract_TronAssetIssueContract::url() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronAssetIssueContract.url)
  return url_.GetNoArena();
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronAssetIssueContract.url)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronAssetIssueContract::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronAssetIssueContract.url)
}
#endif
inline void TronSignTx_TronContract_TronAssetIssueContract::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronAssetIssueContract.url)
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronAssetIssueContract.url)
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::mutable_url() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronAssetIssueContract.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronAssetIssueContract::release_url() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronAssetIssueContract.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronAssetIssueContract::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronAssetIssueContract.url)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronParticipateAssetIssueContract

// optional bytes to_address = 1;
inline bool TronSignTx_TronContract_TronParticipateAssetIssueContract::has_to_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronParticipateAssetIssueContract::to_address() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
  return to_address_.GetNoArena();
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_to_address(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_to_address(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
}
#endif
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_to_address(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
}
inline ::std::string* TronSignTx_TronContract_TronParticipateAssetIssueContract::mutable_to_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronParticipateAssetIssueContract::release_to_address() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
  if (!has_to_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return to_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_allocated_to_address(::std::string* to_address) {
  if (to_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
}

// optional string asset_name = 2;
inline bool TronSignTx_TronContract_TronParticipateAssetIssueContract::has_asset_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::clear_asset_name() {
  asset_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TronSignTx_TronContract_TronParticipateAssetIssueContract::asset_name() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
  return asset_name_.GetNoArena();
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_asset_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_asset_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  asset_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
}
#endif
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_asset_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_asset_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  asset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
}
inline ::std::string* TronSignTx_TronContract_TronParticipateAssetIssueContract::mutable_asset_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
  return asset_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronParticipateAssetIssueContract::release_asset_name() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
  if (!has_asset_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return asset_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_allocated_asset_name(::std::string* asset_name) {
  if (asset_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  asset_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), asset_name);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
}

// optional uint64 amount = 3;
inline bool TronSignTx_TronContract_TronParticipateAssetIssueContract::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronParticipateAssetIssueContract::amount() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronParticipateAssetIssueContract.amount)
  return amount_;
}
inline void TronSignTx_TronContract_TronParticipateAssetIssueContract::set_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronParticipateAssetIssueContract.amount)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronFreezeBalanceContract

// optional uint64 frozen_balance = 1;
inline bool TronSignTx_TronContract_TronFreezeBalanceContract::has_frozen_balance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronFreezeBalanceContract::clear_frozen_balance() {
  frozen_balance_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronFreezeBalanceContract::frozen_balance() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronFreezeBalanceContract.frozen_balance)
  return frozen_balance_;
}
inline void TronSignTx_TronContract_TronFreezeBalanceContract::set_frozen_balance(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  frozen_balance_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronFreezeBalanceContract.frozen_balance)
}

// optional uint64 frozen_duration = 2;
inline bool TronSignTx_TronContract_TronFreezeBalanceContract::has_frozen_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronFreezeBalanceContract::clear_frozen_duration() {
  frozen_duration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronFreezeBalanceContract::frozen_duration() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronFreezeBalanceContract.frozen_duration)
  return frozen_duration_;
}
inline void TronSignTx_TronContract_TronFreezeBalanceContract::set_frozen_duration(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  frozen_duration_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronFreezeBalanceContract.frozen_duration)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronUnfreezeBalanceContract

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronUnfreezeAssetContract

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronWithdrawBalanceContract

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronUpdateAssetContract

// optional string description = 1;
inline bool TronSignTx_TronContract_TronUpdateAssetContract::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx_TronContract_TronUpdateAssetContract::description() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronUpdateAssetContract.description)
  return description_.GetNoArena();
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_description(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronUpdateAssetContract.description)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_description(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronUpdateAssetContract.description)
}
#endif
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronUpdateAssetContract.description)
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronUpdateAssetContract.description)
}
inline ::std::string* TronSignTx_TronContract_TronUpdateAssetContract::mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronUpdateAssetContract.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronUpdateAssetContract::release_description() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronUpdateAssetContract.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronUpdateAssetContract.description)
}

// optional string url = 2;
inline bool TronSignTx_TronContract_TronUpdateAssetContract::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TronSignTx_TronContract_TronUpdateAssetContract::url() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronUpdateAssetContract.url)
  return url_.GetNoArena();
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronUpdateAssetContract.url)
}
#if LANG_CXX11
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.TronContract.TronUpdateAssetContract.url)
}
#endif
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.TronContract.TronUpdateAssetContract.url)
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.TronContract.TronUpdateAssetContract.url)
}
inline ::std::string* TronSignTx_TronContract_TronUpdateAssetContract::mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronUpdateAssetContract.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx_TronContract_TronUpdateAssetContract::release_url() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.TronUpdateAssetContract.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx_TronContract_TronUpdateAssetContract::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.TronUpdateAssetContract.url)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters

// optional uint64 key = 1;
inline bool TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::key() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters.key)
  return key_;
}
inline void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::set_key(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  key_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters.key)
}

// optional uint64 value = 2;
inline bool TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::value() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters.value)
  return value_;
}
inline void TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters::set_value(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters.value)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronProposalCreateContract

// repeated .TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters parameters = 1;
inline int TronSignTx_TronContract_TronProposalCreateContract::parameters_size() const {
  return parameters_.size();
}
inline void TronSignTx_TronContract_TronProposalCreateContract::clear_parameters() {
  parameters_.Clear();
}
inline ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* TronSignTx_TronContract_TronProposalCreateContract::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.TronProposalCreateContract.parameters)
  return parameters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters >*
TronSignTx_TronContract_TronProposalCreateContract::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:TronSignTx.TronContract.TronProposalCreateContract.parameters)
  return &parameters_;
}
inline const ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters& TronSignTx_TronContract_TronProposalCreateContract::parameters(int index) const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronProposalCreateContract.parameters)
  return parameters_.Get(index);
}
inline ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters* TronSignTx_TronContract_TronProposalCreateContract::add_parameters() {
  // @@protoc_insertion_point(field_add:TronSignTx.TronContract.TronProposalCreateContract.parameters)
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TronSignTx_TronContract_TronProposalCreateContract_TronProposalParameters >&
TronSignTx_TronContract_TronProposalCreateContract::parameters() const {
  // @@protoc_insertion_point(field_list:TronSignTx.TronContract.TronProposalCreateContract.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronProposalApproveContract

// optional uint64 proposal_id = 1;
inline bool TronSignTx_TronContract_TronProposalApproveContract::has_proposal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronProposalApproveContract::clear_proposal_id() {
  proposal_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronProposalApproveContract::proposal_id() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronProposalApproveContract.proposal_id)
  return proposal_id_;
}
inline void TronSignTx_TronContract_TronProposalApproveContract::set_proposal_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  proposal_id_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronProposalApproveContract.proposal_id)
}

// optional bool is_add_approval = 2;
inline bool TronSignTx_TronContract_TronProposalApproveContract::has_is_add_approval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract_TronProposalApproveContract::clear_is_add_approval() {
  is_add_approval_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TronSignTx_TronContract_TronProposalApproveContract::is_add_approval() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronProposalApproveContract.is_add_approval)
  return is_add_approval_;
}
inline void TronSignTx_TronContract_TronProposalApproveContract::set_is_add_approval(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_add_approval_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronProposalApproveContract.is_add_approval)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract_TronProposalDeleteContract

// optional uint64 proposal_id = 1;
inline bool TronSignTx_TronContract_TronProposalDeleteContract::has_proposal_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract_TronProposalDeleteContract::clear_proposal_id() {
  proposal_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 TronSignTx_TronContract_TronProposalDeleteContract::proposal_id() const {
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.TronProposalDeleteContract.proposal_id)
  return proposal_id_;
}
inline void TronSignTx_TronContract_TronProposalDeleteContract::set_proposal_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  proposal_id_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.TronContract.TronProposalDeleteContract.proposal_id)
}

// -------------------------------------------------------------------

// TronSignTx_TronContract

// optional .TronSignTx.TronContract.TronTransferContract transfer_contract = 1;
inline bool TronSignTx_TronContract::has_transfer_contract() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx_TronContract::clear_transfer_contract() {
  if (transfer_contract_ != nullptr) transfer_contract_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TronSignTx_TronContract_TronTransferContract& TronSignTx_TronContract::transfer_contract() const {
  const ::TronSignTx_TronContract_TronTransferContract* p = transfer_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.transfer_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronTransferContract*>(
      &::_TronSignTx_TronContract_TronTransferContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronTransferContract* TronSignTx_TronContract::release_transfer_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.transfer_contract)
  _has_bits_[0] &= ~0x00000001u;
  ::TronSignTx_TronContract_TronTransferContract* temp = transfer_contract_;
  transfer_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronTransferContract* TronSignTx_TronContract::mutable_transfer_contract() {
  _has_bits_[0] |= 0x00000001u;
  if (transfer_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronTransferContract>(GetArenaNoVirtual());
    transfer_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.transfer_contract)
  return transfer_contract_;
}
inline void TronSignTx_TronContract::set_allocated_transfer_contract(::TronSignTx_TronContract_TronTransferContract* transfer_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transfer_contract_;
  }
  if (transfer_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transfer_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transfer_contract_ = transfer_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.transfer_contract)
}

// optional .TronSignTx.TronContract.TronTransferAssetContract transfer_asset_contract = 2;
inline bool TronSignTx_TronContract::has_transfer_asset_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx_TronContract::clear_transfer_asset_contract() {
  if (transfer_asset_contract_ != nullptr) transfer_asset_contract_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TronSignTx_TronContract_TronTransferAssetContract& TronSignTx_TronContract::transfer_asset_contract() const {
  const ::TronSignTx_TronContract_TronTransferAssetContract* p = transfer_asset_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.transfer_asset_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronTransferAssetContract*>(
      &::_TronSignTx_TronContract_TronTransferAssetContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronTransferAssetContract* TronSignTx_TronContract::release_transfer_asset_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.transfer_asset_contract)
  _has_bits_[0] &= ~0x00000002u;
  ::TronSignTx_TronContract_TronTransferAssetContract* temp = transfer_asset_contract_;
  transfer_asset_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronTransferAssetContract* TronSignTx_TronContract::mutable_transfer_asset_contract() {
  _has_bits_[0] |= 0x00000002u;
  if (transfer_asset_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronTransferAssetContract>(GetArenaNoVirtual());
    transfer_asset_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.transfer_asset_contract)
  return transfer_asset_contract_;
}
inline void TronSignTx_TronContract::set_allocated_transfer_asset_contract(::TronSignTx_TronContract_TronTransferAssetContract* transfer_asset_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transfer_asset_contract_;
  }
  if (transfer_asset_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transfer_asset_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer_asset_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transfer_asset_contract_ = transfer_asset_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.transfer_asset_contract)
}

// optional .TronSignTx.TronContract.TronVoteWitnessContract vote_witness_contract = 4;
inline bool TronSignTx_TronContract::has_vote_witness_contract() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TronSignTx_TronContract::clear_vote_witness_contract() {
  if (vote_witness_contract_ != nullptr) vote_witness_contract_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TronSignTx_TronContract_TronVoteWitnessContract& TronSignTx_TronContract::vote_witness_contract() const {
  const ::TronSignTx_TronContract_TronVoteWitnessContract* p = vote_witness_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.vote_witness_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronVoteWitnessContract*>(
      &::_TronSignTx_TronContract_TronVoteWitnessContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronVoteWitnessContract* TronSignTx_TronContract::release_vote_witness_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.vote_witness_contract)
  _has_bits_[0] &= ~0x00000004u;
  ::TronSignTx_TronContract_TronVoteWitnessContract* temp = vote_witness_contract_;
  vote_witness_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronVoteWitnessContract* TronSignTx_TronContract::mutable_vote_witness_contract() {
  _has_bits_[0] |= 0x00000004u;
  if (vote_witness_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronVoteWitnessContract>(GetArenaNoVirtual());
    vote_witness_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.vote_witness_contract)
  return vote_witness_contract_;
}
inline void TronSignTx_TronContract::set_allocated_vote_witness_contract(::TronSignTx_TronContract_TronVoteWitnessContract* vote_witness_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vote_witness_contract_;
  }
  if (vote_witness_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vote_witness_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vote_witness_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vote_witness_contract_ = vote_witness_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.vote_witness_contract)
}

// optional .TronSignTx.TronContract.TronWitnessCreateContract witness_create_contract = 5;
inline bool TronSignTx_TronContract::has_witness_create_contract() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TronSignTx_TronContract::clear_witness_create_contract() {
  if (witness_create_contract_ != nullptr) witness_create_contract_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TronSignTx_TronContract_TronWitnessCreateContract& TronSignTx_TronContract::witness_create_contract() const {
  const ::TronSignTx_TronContract_TronWitnessCreateContract* p = witness_create_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.witness_create_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronWitnessCreateContract*>(
      &::_TronSignTx_TronContract_TronWitnessCreateContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronWitnessCreateContract* TronSignTx_TronContract::release_witness_create_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.witness_create_contract)
  _has_bits_[0] &= ~0x00000008u;
  ::TronSignTx_TronContract_TronWitnessCreateContract* temp = witness_create_contract_;
  witness_create_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronWitnessCreateContract* TronSignTx_TronContract::mutable_witness_create_contract() {
  _has_bits_[0] |= 0x00000008u;
  if (witness_create_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronWitnessCreateContract>(GetArenaNoVirtual());
    witness_create_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.witness_create_contract)
  return witness_create_contract_;
}
inline void TronSignTx_TronContract::set_allocated_witness_create_contract(::TronSignTx_TronContract_TronWitnessCreateContract* witness_create_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete witness_create_contract_;
  }
  if (witness_create_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      witness_create_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, witness_create_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  witness_create_contract_ = witness_create_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.witness_create_contract)
}

// optional .TronSignTx.TronContract.TronAssetIssueContract asset_issue_contract = 6;
inline bool TronSignTx_TronContract::has_asset_issue_contract() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TronSignTx_TronContract::clear_asset_issue_contract() {
  if (asset_issue_contract_ != nullptr) asset_issue_contract_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::TronSignTx_TronContract_TronAssetIssueContract& TronSignTx_TronContract::asset_issue_contract() const {
  const ::TronSignTx_TronContract_TronAssetIssueContract* p = asset_issue_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.asset_issue_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronAssetIssueContract*>(
      &::_TronSignTx_TronContract_TronAssetIssueContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronAssetIssueContract* TronSignTx_TronContract::release_asset_issue_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.asset_issue_contract)
  _has_bits_[0] &= ~0x00000010u;
  ::TronSignTx_TronContract_TronAssetIssueContract* temp = asset_issue_contract_;
  asset_issue_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronAssetIssueContract* TronSignTx_TronContract::mutable_asset_issue_contract() {
  _has_bits_[0] |= 0x00000010u;
  if (asset_issue_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronAssetIssueContract>(GetArenaNoVirtual());
    asset_issue_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.asset_issue_contract)
  return asset_issue_contract_;
}
inline void TronSignTx_TronContract::set_allocated_asset_issue_contract(::TronSignTx_TronContract_TronAssetIssueContract* asset_issue_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asset_issue_contract_;
  }
  if (asset_issue_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asset_issue_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, asset_issue_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  asset_issue_contract_ = asset_issue_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.asset_issue_contract)
}

// optional .TronSignTx.TronContract.TronWitnessUpdateContract witness_update_contract = 8;
inline bool TronSignTx_TronContract::has_witness_update_contract() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TronSignTx_TronContract::clear_witness_update_contract() {
  if (witness_update_contract_ != nullptr) witness_update_contract_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TronSignTx_TronContract_TronWitnessUpdateContract& TronSignTx_TronContract::witness_update_contract() const {
  const ::TronSignTx_TronContract_TronWitnessUpdateContract* p = witness_update_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.witness_update_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronWitnessUpdateContract*>(
      &::_TronSignTx_TronContract_TronWitnessUpdateContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronWitnessUpdateContract* TronSignTx_TronContract::release_witness_update_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.witness_update_contract)
  _has_bits_[0] &= ~0x00000020u;
  ::TronSignTx_TronContract_TronWitnessUpdateContract* temp = witness_update_contract_;
  witness_update_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronWitnessUpdateContract* TronSignTx_TronContract::mutable_witness_update_contract() {
  _has_bits_[0] |= 0x00000020u;
  if (witness_update_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronWitnessUpdateContract>(GetArenaNoVirtual());
    witness_update_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.witness_update_contract)
  return witness_update_contract_;
}
inline void TronSignTx_TronContract::set_allocated_witness_update_contract(::TronSignTx_TronContract_TronWitnessUpdateContract* witness_update_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete witness_update_contract_;
  }
  if (witness_update_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      witness_update_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, witness_update_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  witness_update_contract_ = witness_update_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.witness_update_contract)
}

// optional .TronSignTx.TronContract.TronParticipateAssetIssueContract participate_asset_issue_contract = 9;
inline bool TronSignTx_TronContract::has_participate_asset_issue_contract() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TronSignTx_TronContract::clear_participate_asset_issue_contract() {
  if (participate_asset_issue_contract_ != nullptr) participate_asset_issue_contract_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TronSignTx_TronContract_TronParticipateAssetIssueContract& TronSignTx_TronContract::participate_asset_issue_contract() const {
  const ::TronSignTx_TronContract_TronParticipateAssetIssueContract* p = participate_asset_issue_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.participate_asset_issue_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronParticipateAssetIssueContract*>(
      &::_TronSignTx_TronContract_TronParticipateAssetIssueContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronParticipateAssetIssueContract* TronSignTx_TronContract::release_participate_asset_issue_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.participate_asset_issue_contract)
  _has_bits_[0] &= ~0x00000040u;
  ::TronSignTx_TronContract_TronParticipateAssetIssueContract* temp = participate_asset_issue_contract_;
  participate_asset_issue_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronParticipateAssetIssueContract* TronSignTx_TronContract::mutable_participate_asset_issue_contract() {
  _has_bits_[0] |= 0x00000040u;
  if (participate_asset_issue_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronParticipateAssetIssueContract>(GetArenaNoVirtual());
    participate_asset_issue_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.participate_asset_issue_contract)
  return participate_asset_issue_contract_;
}
inline void TronSignTx_TronContract::set_allocated_participate_asset_issue_contract(::TronSignTx_TronContract_TronParticipateAssetIssueContract* participate_asset_issue_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete participate_asset_issue_contract_;
  }
  if (participate_asset_issue_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      participate_asset_issue_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, participate_asset_issue_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  participate_asset_issue_contract_ = participate_asset_issue_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.participate_asset_issue_contract)
}

// optional .TronSignTx.TronContract.TronAccountUpdateContract account_update_contract = 10;
inline bool TronSignTx_TronContract::has_account_update_contract() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TronSignTx_TronContract::clear_account_update_contract() {
  if (account_update_contract_ != nullptr) account_update_contract_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::TronSignTx_TronContract_TronAccountUpdateContract& TronSignTx_TronContract::account_update_contract() const {
  const ::TronSignTx_TronContract_TronAccountUpdateContract* p = account_update_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.account_update_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronAccountUpdateContract*>(
      &::_TronSignTx_TronContract_TronAccountUpdateContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronAccountUpdateContract* TronSignTx_TronContract::release_account_update_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.account_update_contract)
  _has_bits_[0] &= ~0x00000080u;
  ::TronSignTx_TronContract_TronAccountUpdateContract* temp = account_update_contract_;
  account_update_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronAccountUpdateContract* TronSignTx_TronContract::mutable_account_update_contract() {
  _has_bits_[0] |= 0x00000080u;
  if (account_update_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronAccountUpdateContract>(GetArenaNoVirtual());
    account_update_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.account_update_contract)
  return account_update_contract_;
}
inline void TronSignTx_TronContract::set_allocated_account_update_contract(::TronSignTx_TronContract_TronAccountUpdateContract* account_update_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_update_contract_;
  }
  if (account_update_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_update_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account_update_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  account_update_contract_ = account_update_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.account_update_contract)
}

// optional .TronSignTx.TronContract.TronFreezeBalanceContract freeze_balance_contract = 11;
inline bool TronSignTx_TronContract::has_freeze_balance_contract() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TronSignTx_TronContract::clear_freeze_balance_contract() {
  if (freeze_balance_contract_ != nullptr) freeze_balance_contract_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::TronSignTx_TronContract_TronFreezeBalanceContract& TronSignTx_TronContract::freeze_balance_contract() const {
  const ::TronSignTx_TronContract_TronFreezeBalanceContract* p = freeze_balance_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.freeze_balance_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronFreezeBalanceContract*>(
      &::_TronSignTx_TronContract_TronFreezeBalanceContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronFreezeBalanceContract* TronSignTx_TronContract::release_freeze_balance_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.freeze_balance_contract)
  _has_bits_[0] &= ~0x00000100u;
  ::TronSignTx_TronContract_TronFreezeBalanceContract* temp = freeze_balance_contract_;
  freeze_balance_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronFreezeBalanceContract* TronSignTx_TronContract::mutable_freeze_balance_contract() {
  _has_bits_[0] |= 0x00000100u;
  if (freeze_balance_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronFreezeBalanceContract>(GetArenaNoVirtual());
    freeze_balance_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.freeze_balance_contract)
  return freeze_balance_contract_;
}
inline void TronSignTx_TronContract::set_allocated_freeze_balance_contract(::TronSignTx_TronContract_TronFreezeBalanceContract* freeze_balance_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete freeze_balance_contract_;
  }
  if (freeze_balance_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      freeze_balance_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freeze_balance_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  freeze_balance_contract_ = freeze_balance_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.freeze_balance_contract)
}

// optional .TronSignTx.TronContract.TronUnfreezeBalanceContract unfreeze_balance_contract = 12;
inline bool TronSignTx_TronContract::has_unfreeze_balance_contract() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TronSignTx_TronContract::clear_unfreeze_balance_contract() {
  if (unfreeze_balance_contract_ != nullptr) unfreeze_balance_contract_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::TronSignTx_TronContract_TronUnfreezeBalanceContract& TronSignTx_TronContract::unfreeze_balance_contract() const {
  const ::TronSignTx_TronContract_TronUnfreezeBalanceContract* p = unfreeze_balance_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.unfreeze_balance_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronUnfreezeBalanceContract*>(
      &::_TronSignTx_TronContract_TronUnfreezeBalanceContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronUnfreezeBalanceContract* TronSignTx_TronContract::release_unfreeze_balance_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.unfreeze_balance_contract)
  _has_bits_[0] &= ~0x00000200u;
  ::TronSignTx_TronContract_TronUnfreezeBalanceContract* temp = unfreeze_balance_contract_;
  unfreeze_balance_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronUnfreezeBalanceContract* TronSignTx_TronContract::mutable_unfreeze_balance_contract() {
  _has_bits_[0] |= 0x00000200u;
  if (unfreeze_balance_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronUnfreezeBalanceContract>(GetArenaNoVirtual());
    unfreeze_balance_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.unfreeze_balance_contract)
  return unfreeze_balance_contract_;
}
inline void TronSignTx_TronContract::set_allocated_unfreeze_balance_contract(::TronSignTx_TronContract_TronUnfreezeBalanceContract* unfreeze_balance_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unfreeze_balance_contract_;
  }
  if (unfreeze_balance_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unfreeze_balance_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unfreeze_balance_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  unfreeze_balance_contract_ = unfreeze_balance_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.unfreeze_balance_contract)
}

// optional .TronSignTx.TronContract.TronWithdrawBalanceContract withdraw_balance_contract = 13;
inline bool TronSignTx_TronContract::has_withdraw_balance_contract() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TronSignTx_TronContract::clear_withdraw_balance_contract() {
  if (withdraw_balance_contract_ != nullptr) withdraw_balance_contract_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::TronSignTx_TronContract_TronWithdrawBalanceContract& TronSignTx_TronContract::withdraw_balance_contract() const {
  const ::TronSignTx_TronContract_TronWithdrawBalanceContract* p = withdraw_balance_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.withdraw_balance_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronWithdrawBalanceContract*>(
      &::_TronSignTx_TronContract_TronWithdrawBalanceContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronWithdrawBalanceContract* TronSignTx_TronContract::release_withdraw_balance_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.withdraw_balance_contract)
  _has_bits_[0] &= ~0x00000400u;
  ::TronSignTx_TronContract_TronWithdrawBalanceContract* temp = withdraw_balance_contract_;
  withdraw_balance_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronWithdrawBalanceContract* TronSignTx_TronContract::mutable_withdraw_balance_contract() {
  _has_bits_[0] |= 0x00000400u;
  if (withdraw_balance_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronWithdrawBalanceContract>(GetArenaNoVirtual());
    withdraw_balance_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.withdraw_balance_contract)
  return withdraw_balance_contract_;
}
inline void TronSignTx_TronContract::set_allocated_withdraw_balance_contract(::TronSignTx_TronContract_TronWithdrawBalanceContract* withdraw_balance_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete withdraw_balance_contract_;
  }
  if (withdraw_balance_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      withdraw_balance_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, withdraw_balance_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  withdraw_balance_contract_ = withdraw_balance_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.withdraw_balance_contract)
}

// optional .TronSignTx.TronContract.TronUnfreezeAssetContract unfreeze_asset_contract = 14;
inline bool TronSignTx_TronContract::has_unfreeze_asset_contract() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TronSignTx_TronContract::clear_unfreeze_asset_contract() {
  if (unfreeze_asset_contract_ != nullptr) unfreeze_asset_contract_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::TronSignTx_TronContract_TronUnfreezeAssetContract& TronSignTx_TronContract::unfreeze_asset_contract() const {
  const ::TronSignTx_TronContract_TronUnfreezeAssetContract* p = unfreeze_asset_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.unfreeze_asset_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronUnfreezeAssetContract*>(
      &::_TronSignTx_TronContract_TronUnfreezeAssetContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronUnfreezeAssetContract* TronSignTx_TronContract::release_unfreeze_asset_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.unfreeze_asset_contract)
  _has_bits_[0] &= ~0x00000800u;
  ::TronSignTx_TronContract_TronUnfreezeAssetContract* temp = unfreeze_asset_contract_;
  unfreeze_asset_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronUnfreezeAssetContract* TronSignTx_TronContract::mutable_unfreeze_asset_contract() {
  _has_bits_[0] |= 0x00000800u;
  if (unfreeze_asset_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronUnfreezeAssetContract>(GetArenaNoVirtual());
    unfreeze_asset_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.unfreeze_asset_contract)
  return unfreeze_asset_contract_;
}
inline void TronSignTx_TronContract::set_allocated_unfreeze_asset_contract(::TronSignTx_TronContract_TronUnfreezeAssetContract* unfreeze_asset_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unfreeze_asset_contract_;
  }
  if (unfreeze_asset_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unfreeze_asset_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unfreeze_asset_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  unfreeze_asset_contract_ = unfreeze_asset_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.unfreeze_asset_contract)
}

// optional .TronSignTx.TronContract.TronUpdateAssetContract update_asset_contract = 15;
inline bool TronSignTx_TronContract::has_update_asset_contract() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TronSignTx_TronContract::clear_update_asset_contract() {
  if (update_asset_contract_ != nullptr) update_asset_contract_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::TronSignTx_TronContract_TronUpdateAssetContract& TronSignTx_TronContract::update_asset_contract() const {
  const ::TronSignTx_TronContract_TronUpdateAssetContract* p = update_asset_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.update_asset_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronUpdateAssetContract*>(
      &::_TronSignTx_TronContract_TronUpdateAssetContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronUpdateAssetContract* TronSignTx_TronContract::release_update_asset_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.update_asset_contract)
  _has_bits_[0] &= ~0x00001000u;
  ::TronSignTx_TronContract_TronUpdateAssetContract* temp = update_asset_contract_;
  update_asset_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronUpdateAssetContract* TronSignTx_TronContract::mutable_update_asset_contract() {
  _has_bits_[0] |= 0x00001000u;
  if (update_asset_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronUpdateAssetContract>(GetArenaNoVirtual());
    update_asset_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.update_asset_contract)
  return update_asset_contract_;
}
inline void TronSignTx_TronContract::set_allocated_update_asset_contract(::TronSignTx_TronContract_TronUpdateAssetContract* update_asset_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_asset_contract_;
  }
  if (update_asset_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_asset_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_asset_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  update_asset_contract_ = update_asset_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.update_asset_contract)
}

// optional .TronSignTx.TronContract.TronProposalCreateContract proposal_create_contract = 16;
inline bool TronSignTx_TronContract::has_proposal_create_contract() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TronSignTx_TronContract::clear_proposal_create_contract() {
  if (proposal_create_contract_ != nullptr) proposal_create_contract_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::TronSignTx_TronContract_TronProposalCreateContract& TronSignTx_TronContract::proposal_create_contract() const {
  const ::TronSignTx_TronContract_TronProposalCreateContract* p = proposal_create_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.proposal_create_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronProposalCreateContract*>(
      &::_TronSignTx_TronContract_TronProposalCreateContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronProposalCreateContract* TronSignTx_TronContract::release_proposal_create_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.proposal_create_contract)
  _has_bits_[0] &= ~0x00002000u;
  ::TronSignTx_TronContract_TronProposalCreateContract* temp = proposal_create_contract_;
  proposal_create_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronProposalCreateContract* TronSignTx_TronContract::mutable_proposal_create_contract() {
  _has_bits_[0] |= 0x00002000u;
  if (proposal_create_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronProposalCreateContract>(GetArenaNoVirtual());
    proposal_create_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.proposal_create_contract)
  return proposal_create_contract_;
}
inline void TronSignTx_TronContract::set_allocated_proposal_create_contract(::TronSignTx_TronContract_TronProposalCreateContract* proposal_create_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proposal_create_contract_;
  }
  if (proposal_create_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proposal_create_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposal_create_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  proposal_create_contract_ = proposal_create_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.proposal_create_contract)
}

// optional .TronSignTx.TronContract.TronProposalApproveContract proposal_approve_contract = 17;
inline bool TronSignTx_TronContract::has_proposal_approve_contract() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TronSignTx_TronContract::clear_proposal_approve_contract() {
  if (proposal_approve_contract_ != nullptr) proposal_approve_contract_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::TronSignTx_TronContract_TronProposalApproveContract& TronSignTx_TronContract::proposal_approve_contract() const {
  const ::TronSignTx_TronContract_TronProposalApproveContract* p = proposal_approve_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.proposal_approve_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronProposalApproveContract*>(
      &::_TronSignTx_TronContract_TronProposalApproveContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronProposalApproveContract* TronSignTx_TronContract::release_proposal_approve_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.proposal_approve_contract)
  _has_bits_[0] &= ~0x00004000u;
  ::TronSignTx_TronContract_TronProposalApproveContract* temp = proposal_approve_contract_;
  proposal_approve_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronProposalApproveContract* TronSignTx_TronContract::mutable_proposal_approve_contract() {
  _has_bits_[0] |= 0x00004000u;
  if (proposal_approve_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronProposalApproveContract>(GetArenaNoVirtual());
    proposal_approve_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.proposal_approve_contract)
  return proposal_approve_contract_;
}
inline void TronSignTx_TronContract::set_allocated_proposal_approve_contract(::TronSignTx_TronContract_TronProposalApproveContract* proposal_approve_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proposal_approve_contract_;
  }
  if (proposal_approve_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proposal_approve_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposal_approve_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  proposal_approve_contract_ = proposal_approve_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.proposal_approve_contract)
}

// optional .TronSignTx.TronContract.TronProposalDeleteContract proposal_delete_contract = 18;
inline bool TronSignTx_TronContract::has_proposal_delete_contract() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TronSignTx_TronContract::clear_proposal_delete_contract() {
  if (proposal_delete_contract_ != nullptr) proposal_delete_contract_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::TronSignTx_TronContract_TronProposalDeleteContract& TronSignTx_TronContract::proposal_delete_contract() const {
  const ::TronSignTx_TronContract_TronProposalDeleteContract* p = proposal_delete_contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.TronContract.proposal_delete_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract_TronProposalDeleteContract*>(
      &::_TronSignTx_TronContract_TronProposalDeleteContract_default_instance_);
}
inline ::TronSignTx_TronContract_TronProposalDeleteContract* TronSignTx_TronContract::release_proposal_delete_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.TronContract.proposal_delete_contract)
  _has_bits_[0] &= ~0x00008000u;
  ::TronSignTx_TronContract_TronProposalDeleteContract* temp = proposal_delete_contract_;
  proposal_delete_contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract_TronProposalDeleteContract* TronSignTx_TronContract::mutable_proposal_delete_contract() {
  _has_bits_[0] |= 0x00008000u;
  if (proposal_delete_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract_TronProposalDeleteContract>(GetArenaNoVirtual());
    proposal_delete_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.TronContract.proposal_delete_contract)
  return proposal_delete_contract_;
}
inline void TronSignTx_TronContract::set_allocated_proposal_delete_contract(::TronSignTx_TronContract_TronProposalDeleteContract* proposal_delete_contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proposal_delete_contract_;
  }
  if (proposal_delete_contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proposal_delete_contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposal_delete_contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  proposal_delete_contract_ = proposal_delete_contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.TronContract.proposal_delete_contract)
}

// -------------------------------------------------------------------

// TronSignTx

// repeated uint32 address_n = 1;
inline int TronSignTx::address_n_size() const {
  return address_n_.size();
}
inline void TronSignTx::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 TronSignTx::address_n(int index) const {
  // @@protoc_insertion_point(field_get:TronSignTx.address_n)
  return address_n_.Get(index);
}
inline void TronSignTx::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:TronSignTx.address_n)
}
inline void TronSignTx::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:TronSignTx.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TronSignTx::address_n() const {
  // @@protoc_insertion_point(field_list:TronSignTx.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TronSignTx::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:TronSignTx.address_n)
  return &address_n_;
}

// optional bytes ref_block_bytes = 2;
inline bool TronSignTx::has_ref_block_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignTx::clear_ref_block_bytes() {
  ref_block_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignTx::ref_block_bytes() const {
  // @@protoc_insertion_point(field_get:TronSignTx.ref_block_bytes)
  return ref_block_bytes_.GetNoArena();
}
inline void TronSignTx::set_ref_block_bytes(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ref_block_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.ref_block_bytes)
}
#if LANG_CXX11
inline void TronSignTx::set_ref_block_bytes(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ref_block_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.ref_block_bytes)
}
#endif
inline void TronSignTx::set_ref_block_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ref_block_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.ref_block_bytes)
}
inline void TronSignTx::set_ref_block_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ref_block_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.ref_block_bytes)
}
inline ::std::string* TronSignTx::mutable_ref_block_bytes() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.ref_block_bytes)
  return ref_block_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx::release_ref_block_bytes() {
  // @@protoc_insertion_point(field_release:TronSignTx.ref_block_bytes)
  if (!has_ref_block_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ref_block_bytes_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx::set_allocated_ref_block_bytes(::std::string* ref_block_bytes) {
  if (ref_block_bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ref_block_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref_block_bytes);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.ref_block_bytes)
}

// optional bytes ref_block_hash = 3;
inline bool TronSignTx::has_ref_block_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignTx::clear_ref_block_hash() {
  ref_block_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TronSignTx::ref_block_hash() const {
  // @@protoc_insertion_point(field_get:TronSignTx.ref_block_hash)
  return ref_block_hash_.GetNoArena();
}
inline void TronSignTx::set_ref_block_hash(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ref_block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.ref_block_hash)
}
#if LANG_CXX11
inline void TronSignTx::set_ref_block_hash(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ref_block_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.ref_block_hash)
}
#endif
inline void TronSignTx::set_ref_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ref_block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.ref_block_hash)
}
inline void TronSignTx::set_ref_block_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ref_block_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.ref_block_hash)
}
inline ::std::string* TronSignTx::mutable_ref_block_hash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.ref_block_hash)
  return ref_block_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx::release_ref_block_hash() {
  // @@protoc_insertion_point(field_release:TronSignTx.ref_block_hash)
  if (!has_ref_block_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ref_block_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx::set_allocated_ref_block_hash(::std::string* ref_block_hash) {
  if (ref_block_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ref_block_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref_block_hash);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.ref_block_hash)
}

// optional uint64 expiration = 4;
inline bool TronSignTx::has_expiration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TronSignTx::clear_expiration() {
  expiration_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 TronSignTx::expiration() const {
  // @@protoc_insertion_point(field_get:TronSignTx.expiration)
  return expiration_;
}
inline void TronSignTx::set_expiration(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  expiration_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.expiration)
}

// optional string data = 5;
inline bool TronSignTx::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TronSignTx::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& TronSignTx::data() const {
  // @@protoc_insertion_point(field_get:TronSignTx.data)
  return data_.GetNoArena();
}
inline void TronSignTx::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignTx.data)
}
#if LANG_CXX11
inline void TronSignTx::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignTx.data)
}
#endif
inline void TronSignTx::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignTx.data)
}
inline void TronSignTx::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignTx.data)
}
inline ::std::string* TronSignTx::mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:TronSignTx.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignTx::release_data() {
  // @@protoc_insertion_point(field_release:TronSignTx.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignTx::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.data)
}

// optional .TronSignTx.TronContract contract = 6;
inline bool TronSignTx::has_contract() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TronSignTx::clear_contract() {
  if (contract_ != nullptr) contract_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::TronSignTx_TronContract& TronSignTx::contract() const {
  const ::TronSignTx_TronContract* p = contract_;
  // @@protoc_insertion_point(field_get:TronSignTx.contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::TronSignTx_TronContract*>(
      &::_TronSignTx_TronContract_default_instance_);
}
inline ::TronSignTx_TronContract* TronSignTx::release_contract() {
  // @@protoc_insertion_point(field_release:TronSignTx.contract)
  _has_bits_[0] &= ~0x00000008u;
  ::TronSignTx_TronContract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::TronSignTx_TronContract* TronSignTx::mutable_contract() {
  _has_bits_[0] |= 0x00000008u;
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::TronSignTx_TronContract>(GetArenaNoVirtual());
    contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TronSignTx.contract)
  return contract_;
}
inline void TronSignTx::set_allocated_contract(::TronSignTx_TronContract* contract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete contract_;
  }
  if (contract) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:TronSignTx.contract)
}

// optional uint64 timestamp = 7;
inline bool TronSignTx::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TronSignTx::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 TronSignTx::timestamp() const {
  // @@protoc_insertion_point(field_get:TronSignTx.timestamp)
  return timestamp_;
}
inline void TronSignTx::set_timestamp(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TronSignTx.timestamp)
}

// -------------------------------------------------------------------

// TronSignedTx

// optional bytes signature = 1;
inline bool TronSignedTx::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TronSignedTx::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TronSignedTx::signature() const {
  // @@protoc_insertion_point(field_get:TronSignedTx.signature)
  return signature_.GetNoArena();
}
inline void TronSignedTx::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignedTx.signature)
}
#if LANG_CXX11
inline void TronSignedTx::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignedTx.signature)
}
#endif
inline void TronSignedTx::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignedTx.signature)
}
inline void TronSignedTx::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignedTx.signature)
}
inline ::std::string* TronSignedTx::mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:TronSignedTx.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignedTx::release_signature() {
  // @@protoc_insertion_point(field_release:TronSignedTx.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignedTx::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:TronSignedTx.signature)
}

// optional bytes serialized_tx = 2;
inline bool TronSignedTx::has_serialized_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TronSignedTx::clear_serialized_tx() {
  serialized_tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TronSignedTx::serialized_tx() const {
  // @@protoc_insertion_point(field_get:TronSignedTx.serialized_tx)
  return serialized_tx_.GetNoArena();
}
inline void TronSignedTx::set_serialized_tx(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TronSignedTx.serialized_tx)
}
#if LANG_CXX11
inline void TronSignedTx::set_serialized_tx(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TronSignedTx.serialized_tx)
}
#endif
inline void TronSignedTx::set_serialized_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TronSignedTx.serialized_tx)
}
inline void TronSignedTx::set_serialized_tx(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TronSignedTx.serialized_tx)
}
inline ::std::string* TronSignedTx::mutable_serialized_tx() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:TronSignedTx.serialized_tx)
  return serialized_tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TronSignedTx::release_serialized_tx() {
  // @@protoc_insertion_point(field_release:TronSignedTx.serialized_tx)
  if (!has_serialized_tx()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_tx_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TronSignedTx::set_allocated_serialized_tx(::std::string* serialized_tx) {
  if (serialized_tx != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_tx);
  // @@protoc_insertion_point(field_set_allocated:TronSignedTx.serialized_tx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messages_2dtron_2eproto
