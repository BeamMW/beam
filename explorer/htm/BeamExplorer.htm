<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">

  <!-- WELCOME TO BEAM SMART EXPLORER!
  - This is an interactive web display of the data queried to a Beam explorer node.
  - The IP addresses of the authorized explorer nodes can be changed in variable 'explorerNodes'.
  - Repository considered as "official": https://github.com/BeamMW/beam/tree/master/explorer/htm
  - Current version of the file: v0.8.2 (beta)

  General rules for developement:
  - Let's keep everything in one single standalone file, without external dependencies!
  - Vanilla HTML/JS/CSS compatible with Chrome 83 (to allow using it as a Beam Wallet DApp).
  - Graphics are Unicode symbols or embedded SVGs (Remark: inline SVGs in a file served as 'text/html' don't require 'xmlns' definition).
  - Except for filtering, sorting and charting, JS functions shall mainly modify classes while most display features are done by CSS.
  - That way, if we disable the main styling section, only the basic processing of the raw data will be visible.

  The file is organized in the following main sections:
  - SECTION 1 : Main global variables.
  - SECTION 2 : All the CSS styling.
  - SECTION 3 : Base static HTML (banner, content, footer, etc.).
  - SECTION 4 : Core JS functions to parse the data into HTML.
  - SECTION 5 : Main JS code for additional global variables, and to request the node explorer data.
  - SECTION 6 : Extra JS functions for adjustments, filtering, sorting, etc.

  Disclaimer:
  - This is an experimental work-in-progress.
  - It is provided AS-IS, with no warranties whatsoever.
  -->

  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  <meta name="color-scheme" content="dark light">
  <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#042548"> <!-- Is this useful?... -->
  <meta name="theme-color" media="(prefers-color-scheme: light)" content="#d0daff"> <!-- Is this useful?... -->
  <!-- Simplified Beam logo SVG favicon is URL-encoded (i.e. mainly replacing < > # and spaces) -->
  <!-- Remark: Such SVG favicon does not seem to be recognized by Safari -->
  <link rel="icon" href="data:image/svg+xml,%3Csvg%20viewBox='112%2085%20320%20320'%20xmlns='http://www.w3.org/2000/svg'%3E%3Ctitle%3EBeam%20favicon%3C/title%3E%3Cpath%20d='m424%20371h-304l152-260zm-229-44%2078-135%2078%20135z'%20fill='%230b76ff'%20fill-rule='evenodd'/%3E%3Cpolygon%20points='225%20314%20272%20226%20320%20314'%20fill='%2339fff2'/%3E%3Cpolygon%20points='120%20192%20272%20278%20272%20287%20120%20246'%20fill='%2324c1ff'/%3E%3Cpolygon%20points='424%20167%20272%20278%20272%20287%20424%20274'%20fill='%23fd76fd'/%3E%3C/svg%3E%0A">
  <title>Beam Smart Explorer</title>

  <!-- ************ SECTION 1 - MAIN GLOBAL VARIABLES ************ -->
<script>
  "use strict"; // Force safer JavaScript code (e.g. forbids using undeclared variables, etc.).

  // Check localStorage for light/dark mode status ("light" or "")
  let mode = localStorage.getItem('mode');
  if (mode) { document.querySelector(':root').classList.add(mode) }

  // List of authorized explorer nodes (URLs must end with "/").
  // The first one for each network will be the default one.
  const explorerNodes = {
    "mainnet": [
      "https://explorer.0xmx.me/api/",
      "https://explorer-api.beamprivacy.community/",
      "https://BeamSmart.net:8000/",
      //"http://localhost:8888/",
    ],
    "dappnet": [
      "https://BeamSmart.net:8001/",
    ],
    "dappnet2": [
      "https://explorer.0xmx.me/api/dappnet2/",
    ],
  };

</script>

<!-- ************ SECTION 2 - CSS STYLES ************ -->
<style>

  /* GENERAL ELEMENTS */
  * {
    box-sizing: border-box; /* Width and height will always include padding and border */
  }
  html {
    font-family: Arial, Helvetica, sans-serif; /* Default fonts */
    font-size: 62.5%; /* Since default browser font size is generally 16px, this sets an easy '1rem = 10px' */
    line-height: 1; /* From a CSS reset template */
    margin: 0; /* From a CSS reset template */
    height: 100%; /* Copied from the DEX dApp */
    scroll-behavior: smooth;
  }
  body:has(dialog:modal) { overflow: hidden; } /* Blocks scrolling when dialog is on (but doesn't work in Chrome 83) */
  :root {
    /* BEAM reference colors */
    --color-mauve: #9d6eff;
    --color-violet: #ab37e6;
    --color-pink: #fe52ff;
    --color-green: #00e2c2;
    --color-cyan: #39fff2;
    --color-light-blue: #25c1ff;
    --color-blue: #0b76ff;
    --color-white: #ffffff;
    --color-black: #000000;
    /* Color variables for dark mode (default) */
    color-scheme: dark; /* For browser elements without an explicit style */
    --color_background: #042548;
    --color_background_gradient_top: #035b8f;
    --color_background_gradient_main: #042548;
    --color_text: black;
    --color_sub_text: #ddd;
    --color_h1: #ddd;
    --color_h2: #ddd;
    --color_h2_sub: #ddd;
    --color_h3: #ddd;
    --color_h3_sub: #17204e;
    --color_link: #0066CC;
    --color_link_visited: #3e1a8b;
    --color_search_result_link: #d7d7a6;
    --color_node_url: var(--color-green);
    --color_blockheight_title_link: #65a4e3;
    --color_blockheight_title_link_visited: #a17eec;
    --color_metadata: #505050;
    --color_metadata_assetname: #505050;
    --color_metadata_assetname_AMML: #707070;
    --color_hash: #505050;
    --color_more: #ddd;
    --color_more_in_collapsible: #17204e;
    --color_icon: rgba(255,255,255,0.5);
    --color_icon_hover: #eee;
    --color_icon_off: #1e4c71;
    --color_eye_icons: #989898;
    --color_eye_icons_hover: grey;
    --color_collapsible: #1e4c71;
    --color_collapsible_hover: #2b618d;
    --color_collapsible_text: white;
    --color_collapsible_content_text: black;
    --color_collapsible_content_background: #ddd;
    --color_small_collapsible: #a2a6ca;
    --color_small_collapsible_hover: #8c94e0;
    --color_small_collapsible_text: black;
    --color_config_collapsible_title: #ddd;
    --color_config_collapsible_text: black;
    --color_config_collapsible_description: grey;
    --color_config_collapsible_drag-over: #2b618d;
    --color_config_collapsible_button: #1d3a5a;
    --color_config_collapsible_button_hover: #1e4c71;
    --color_config_collapsible_button_text: #ddd;
    --color_config_collapsible_button_border: #1e4c71;
    --color_popup_border: #ddd;
    --color_popup_background: #042548;
    --color_popup_text : #ddd;
    --color_popup_url : var(--color-green);
    --color_popup_input_placeholder: #aaa;
    --color_popup_input_text: #eee;
    --color_popup_input_text_invalid: #ff8686;
    --color_popup_input_background: #1d3a5a;
    --color_popup_input_border: #636785;
    --color_popup_input_background_filled: #1d3a5a;
    --color_popup_input_border_filled: #0bccf7;
    --color_popup_button_text: #ddd;
    --color_popup_button_background: #1d3a5a;
    --color_popup_button_border: #1e4c71;
    --color_popup_button_background_hover: #1e4c71;
    --color_yes: green;
    --color_no: blue;
    --color_amount: darkcyan;
    --color_pos: green;
    --color_neg: red;
    --color_scroll_button: #2b618d;
    --color_scroll_text: white;
    --color_time: #650000;
    --color_table_border: #afb3d8;
    --color_table_header: #1d3a5a;
    --color_table_header_text: #ddd;
    --color_table_header_hover: #1e4c71;
    --color_table_header_active: #1e4c71;
    --color_table_rows_wrapper: #444b90;
    --color_table_row_odd: #d2d2d2;
    --color_table_row_even: #c9c9c9;
    --color_table_row_hover: #c2c2cf;
    --color_logo_shadow: rgba(255, 255, 255, 0.3);
    --color_network_select_background: transparent;
    --color_network_select_background_active: var(--color_banner_search_background);
    --color_network_select_border: var(--color_banner_search_button_border);
    --color_network_select_shadow: var(--color_network_select_border);
    --color_network_select_text: #eee;
    --color_network_select_hover: #fff;
    --color_network_select_shadow: rgba(255, 255, 255, 0.3);
    --color_banner_background: rgba(30, 76, 113, 0.4);
    --color_banner_title: #0bccf7;
    --color_banner_version: #00f6d2;
    --color_banner_menu_text: #aaa;
    --color_banner_menu_link: #ddd;
    --color_banner_menu_link_hover: #fff;
    --color_banner_menu_link_shadow: rgba(255, 255, 255, 0.3);
    --color_banner_search_border: #636785;
    --color_banner_search_background: #1d3a5a;
    --color_banner_search_placeholder: #aaa;
    --color_banner_search_text: #eee;
    --color_banner_search_border_filled: #0bccf7;
    --color_banner_search_background_filled: #1d3a5a;
    --color_banner_search_text_invalid: #ff8686;
    --color_banner_search_button_border: #636785;
    --color_banner_search_button_background: rgba(255,255,255,0.3);
    --color_banner_search_button_text: #ddd;
    --color_banner_search_button_background_hover: rgba(255,255,255,0.4);
    --color_banner_search_button_text_hover: black;
    --color_banner_navigation_icon: rgba(255,255,255,0.3);
    --color_banner_navigation_icon_hover: rgba(255,255,255,0.5);
    --color_banner_navigation_icon_shadow: rgba(255,255,255,0.5);
    --color_footer_text: #0bccf7;
    --color_footer_link: #0bccf7;
    --color_about_text: #ddd;
    --color_about_link: #ddd;
    --color_historical_title: #17204e;
    --color_historical_notes: #656565;
    --color_sorting_indicator: #888;
    --color_sorting_indicator_hover: #0bccf7;
    --color_sorted_indicator: #0bccf7;
    --color_table_search_text: #eee;
    --color_table_search_border: #aaa;
    --color_table_search_background: #1d3a5a;
    --color_table_search_border_filled: #0bccf7;
    --color_table_search_background_filled: #1d3a5a;
    --color_graph_area: #f0f0f0;
    --color_graph_border: grey;
    --color_graph_cursor: darkgrey;
    --color_graph_row_highlight: #dbdb8a;
    --color_graph_row_highlight_hover: #cdcd70;
    --color_graph_legend_title: #323232;
    --color_graph_legend_subtitle: #777;
  }
  :root.light {
    /* BEAM reference colors */
    --color-mauve: #9d6eff;
    --color-violet: #ab37e6;
    --color-pink: #fe52ff;
    --color-green: #00e2c2;
    --color-cyan: #39fff2;
    --color-light-blue: #25c1ff;
    --color-blue: #0b76ff;
    --color-white: #ffffff;
    --color-black: #000000;
    /* Color variables for light mode */
    color-scheme: light; /* For browser elements without an explicit style */
    --color_background: #d0daff;
    --color_background_gradient_top: #d0daff;
    --color_background_gradient_main: #d0daff;
    --color_text: black;
    --color_sub_text: black;
    --color_h1: black;
    --color_h2: black;
    --color_h2_sub: black;
    --color_h3: #17204e;
    --color_h3_sub: #17204e;
    --color_link: #0066CC;
    --color_link_visited: #3e1a8b;
    --color_search_result_link: #555fb8;
    --color_node_url: #2d3799;
    --color_blockheight_title_link: #0066CC;
    --color_blockheight_title_link_visited: #3e1a8b;
    --color_metadata: #505050;
    --color_metadata_assetname: #505050;
    --color_metadata_assetname_AMML: #808080;
    --color_hash: #505050;
    --color_more: #17204e;
    --color_more_in_collapsible: #17204e;
    --color_icon: #777ebc;
    --color_icon_hover: #555fb8;
    --color_icon_off: lightgrey;
    --color_eye_icons: #aaa;
    --color_eye_icons_hover: grey;
    --color_collapsible: #777ebc;
    --color_collapsible_hover: #555fb8;
    --color_collapsible_text: white;
    --color_collapsible_content_text: black;
    --color_collapsible_content_background: white;
    --color_small_collapsible: #b8bbd8;
    --color_small_collapsible_hover: #8c94e0;
    --color_small_collapsible_text: black;
    --color_config_collapsible_title: black;
    --color_config_collapsible_text: black;
    --color_config_collapsible_description: grey;
    --color_config_collapsible_drag-over: #555fb8;
    --color_config_collapsible_button: #b8bbd8;
    --color_config_collapsible_button_hover: #9ca2d2;
    --color_config_collapsible_button_text: black;
    --color_config_collapsible_button_border: #9ca2d2;
    --color_popup_border: #17204e;
    --color_popup_background: #d0daff;
    --color_popup_text : black;
    --color_popup_url : #2d3799;
    --color_popup_input_placeholder: #606060;
    --color_popup_input_text: #525252;
    --color_popup_input_text_invalid: #805353;
    --color_popup_input_background: #afb3d8;
    --color_popup_input_border: #9ca2d2;
    --color_popup_input_background_filled: #b8bbd8;
    --color_popup_input_border_filled: #17204e;
    --color_popup_button_text: black;
    --color_popup_button_background: #b8bbd8;
    --color_popup_button_border: #9ca2d2;
    --color_popup_button_background_hover: #9ca2d2;
    --color_yes: green;
    --color_no: blue;
    --color_amount: darkcyan;
    --color_pos: green;
    --color_neg: red;
    --color_scroll_button: black;
    --color_scroll_text: white;
    --color_time: #650000;
    --color_table_border: #ddd;
    --color_table_header: #b8bbd8;
    --color_table_header_text: black;
    --color_table_header_hover: #9ca2d2;
    --color_table_header_active: #9ca2d2;
    --color_table_rows_wrapper: #555fb8;
    --color_table_row_odd: #fff;
    --color_table_row_even: #eee;
    --color_table_row_hover: #e0e0f0;
    --color_logo_shadow: rgba(0, 0, 0, 0.5);
    --color_network_select_background: transparent;
    --color_network_select_background_active: var(--color_banner_search_background);
    --color_network_select_border: var(--color_banner_search_button_border);
    --color_network_select_shadow: var(--color_network_select_border);
    --color_network_select_text: #17204e;
    --color_network_select_hover: #1f276f;
    --color_network_select_shadow: rgba(62, 26, 139, 0.2);
    --color_banner_background: #a7acd9;
    --color_banner_title: #17204e;
    --color_banner_version: #525252;
    --color_banner_menu_text: #17204e;
    --color_banner_menu_link: #2d3799;
    --color_banner_menu_link_hover: #1f276f;
    --color_banner_menu_link_shadow: rgba(62, 26, 139, 0.2);
    --color_banner_search_border: #636785;
    --color_banner_search_background: #afb3d8;
    --color_banner_search_placeholder: #606060;
    --color_banner_search_text: #525252;
    --color_banner_search_border_filled: #ddd;
    --color_banner_search_background_filled: #b8bbd8;
    --color_banner_search_text_invalid: #805353;
    --color_banner_search_button_border: #636785;
    --color_banner_search_button_background: #636785;
    --color_banner_search_button_text: #ddd;
    --color_banner_search_button_background_hover: #525252;
    --color_banner_search_button_text_hover: #ddd;
    --color_banner_navigation_icon: #636785;
    --color_banner_navigation_icon_hover: #505050;
    --color_banner_navigation_icon_shadow: rgba(80, 80, 80, 0.3);
    --color_footer_text: #17204e;
    --color_footer_link: #17204e;
    --color_about_text: black;
    --color_about_link: black;
    --color_historical_title: #17204e;
    --color_historical_notes: grey;
    --color_sorting_indicator: #666;
    --color_sorting_indicator_hover: #e7e7e7;
    --color_sorted_indicator: #e7e7e7;
    --color_table_search_text: #525252;
    --color_table_search_border: #555;
    --color_table_search_background: #afb3d8;
    --color_table_search_border_filled: #ddd;
    --color_table_search_background_filled: #b8bbd8;
    --color_graph_area: #fafafa;
    --color_graph_border: grey;
    --color_graph_cursor: darkgrey;
    --color_graph_row_highlight: #ffffa8;
    --color_graph_row_highlight_hover: #fcfc86;
    --color_graph_legend_title: #323232;
    --color_graph_legend_subtitle: #777;
  }
  :root { /* Background compatible with Beam Wallet on dark mode (copied from the dao-core-app) */
    background: var(--color_background); /* Shouldn't be needed */
    background-image: linear-gradient(to bottom, var(--color_background_gradient_top) -174px, var(--color_background_gradient_main) 116px, var(--color_background_gradient_main));
    background-repeat: no-repeat;
    background-attachment: fixed;
  }
  body {
    margin: 0; /* Copied from the dao-core-app model */
  }
  :link { color: var(--color_link); } /* Default link colors */
  :visited { color: var(--color_link_visited); }
  :link:active, :visited:active { color: var(--color_link_visited); }
  p {
    font-size: 1.6rem;
    padding: 5px 0 5px 0;
  }
  summary > * { /* This will avoid new lines if tags are used within a summary */ 
    display: inline;
  }
  ul {
    font-size: 1.4rem;
    padding: 0 10px 0 15px;
    text-align: left;
  }
  div > ul {
    padding: 0 10px 0 35px;  /* Wide first bullet point level when not in table cells */
  }
  td ul {
    padding: 0 10px 0 15px; /* Tight bullet points when inside table cells */
  }
  ul li {
    padding: 2px 0 0 2px;
  }
  h1 {
    font-size: 3.2rem;
    text-align: center;
    margin: 10px 0 10px 0;
    color: var(--color_h1);
  }
  h2 {
    font-size: 2.4rem;
    text-align: left;
    margin: 15px 0 10px 0;
    color: var(--color_h2);
  }
  h2.errorMessage {
    font-style: italic;
  }
  h2.title {
    /* Nothing here */
  }
  h3, h3 a:link, h3 a:visited {
    font-size: 1.9rem;
    text-align: left;
    color: var(--color_h3);
    margin: 15px 0 10px 0;
  }
  h3.sub { /* For the h3 within collapsibles */
    color: var(--color_h3_sub);
  }
  h3::before {
    content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
  }
  .blockHeight, .blockHeight a {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-weight: normal;
  }
  .title .blockHeight { /* Special treatment when block heights appear in a title */
    font-weight: bold;
  }
  .title .blockHeight a {
    color: var(--color_blockheight_title_link);
  }
  .title .blockHeight a:visited {
    color: var(--color_blockheight_title_link_visited);
  }
  h2.title .scrollToSearchResult { /* Addition to the title in case of a search result */
    padding: 0 0 0 4rem;
    color: var(--color_search_result_link);
  }
  h2.title .scrollToSearchResult a {
    color: var(--color_search_result_link);
  }
  h2.title .scrollToSearchResult a::after { /* Add a decorative arrow */
    content: "\00a0 \002BAF";
    display: inline-block;
    vertical-align: bottom;
    text-decoration: none;
  }
  .listOfBlockHeaders {
    cursor: pointer;
    fill: var(--color_icon);
    display: inline-block;
    vertical-align: text-bottom; /* Needed to align text and symbol */
  }
  .listOfBlockHeaders a {
    fill: var(--color_icon);
  }
  .listOfBlockHeaders a:hover {
    fill: var(--color_icon_hover);
  }
  .nextBlock, .previousBlock, .newerBlocks, .olderBlocks {
    cursor: pointer;
    stroke: var(--color_icon);
    display: inline-block;
    vertical-align: middle; /* Needed to align text and symbol */
  }
  .nextBlock a, .previousBlock a, .newerBlocks a, .olderBlocks a { /* Needed for Chrome 83 */
    stroke: var(--color_icon);
  }
  .nextBlock a:hover, .previousBlock a:hover, .newerBlocks a:hover, .olderBlocks a:hover {
    stroke: var(--color_icon_hover);
  }
  .nextBlock.off, .previousBlock.off, .newerBlocks.off, .olderBlocks.off { /* Dim out when disabled */
    cursor: default;
    stroke: var(--color_icon_off);
  }
  .nextBlock.off:hover, .previousBlock.off:hover, .newerBlocks.off:hover, .olderBlocks.off:hover {
    stroke: var(--color_icon_off);
  }
  .assetName {
    color: var(--color_text);
    white-space: nowrap; /* Don't wrap text */
  }
  .assetName a {
    color: var(--color_text); /* Keep links in same color */
  }
  .bool {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-size: 1.6rem;
    color: var(--color_text);
  }
  .bool.yes {
    color: var(--color_yes); /* Color for 'True' */
  }
  .bool.no {
    color: var(--color_no); /* Color for 'False' */
  }
  .time {
    white-space: nowrap; /* Don't wrap text */
    font-size: 1.2rem;
    color: var(--color_time);
  }
  .metadata {
    font-family: "Lucida Console", ui-monospace, monospace;
    display: table; /* We use table-like display to ensure that text and symbol stay inline */
    color: var(--color_metadata);
    font-size: 1.2rem;
    vertical-align: middle; /* Needed to align text and symbol */
  }
  .metadataAssetName {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 1.3rem;
    font-weight: bold;
    color: var(--color_metadata_assetname);
  }
  .metadataAssetName.AMML {
    color: var(--color_metadata_assetname_AMML);
  }
  .metadata .full { /* Display full metadata */
    font-family: inherit;
    display: table-cell;
    max-width: 80ch; /* Wrap long strings after 80 characters */
    white-space: pre-wrap; /* Wrap and preserve all space */
    overflow-wrap: break-word; /* Break words when needed (similar to the old word-wrap) */
  }
  .metadata .reduced { /* Display reduced metadata */
    font-family: inherit;
    display: table-cell;
    max-width: 45ch; /* Show only the 45 first characters (good enough for AMML tokens!) */
    white-space: nowrap; /* Don't wrap text */
    overflow: hidden; /* Hide text that overflows */
    text-overflow: ellipsis; /* Add '...' when overflowing */
  }
  .extend { /* Remark: The extend symbols are hidden by default in the HTML */
    vertical-align: middle; /* Needed to align text and symbol */
    visibility: hidden; /* Hide the symbols but maintain their space */
    display: table-cell;
    cursor: pointer;
    fill: var(--color_eye_icons);
    padding: 0 0 0 3px;
  }
  *:hover > .metadata .extend { /* Display the extend symbols when hovering over the element containing the text */
    visibility: visible;
  }
  .extend:hover { /* Highlight the symbol when hovering on it */
    fill: var(--color_eye_icons_hover);
  }
  .cid, .kernelId, .blob, .commitment {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-size: 1.2rem;
    color: var(--color_hash);
    white-space: nowrap;
    display: inline;
    vertical-align: middle; /* Needed to align text and symbol */
  }
  .cid a {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-size: 1.2rem;
    color: var(--color_hash);
    text-decoration-line: underline;
    text-decoration-color: var(--color_hash); /* Use a light underline color */
  }
  .cidTitle {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-weight: normal;
  }
  .truncated { /* Display truncated hashes */
    font-family: inherit;
    vertical-align: middle; /* Needed to align text and symbol */
    display: inline-block; /* Needed to allow setting a max-width */
    max-width: 25ch; /* Show only the 25 first characters */
    overflow: hidden;  /* Hide text that overflows */
    text-overflow: ellipsis;  /* Add '...' when overflowing */
  }
  .expanded { /* Display extended hashes */
    font-family: inherit;
    vertical-align: middle; /* Needed to align text and symbol */
  }
  .expand { /* The extend symbols are hidden by default in the HTML */
    vertical-align: middle; /* Needed to align text and symbol */
    display: inline; /* Superseed the HTML 'hidden' attribute */
    visibility: hidden; /* Hide the symbols but maintain their space */
    cursor: pointer;
    fill: var(--color_eye_icons);
    padding: 0 0 0 3px;
  }
  .expand svg {
    vertical-align: bottom; /* Needed to align text and symbol */
  }
  *:hover > span > .expand { /* Display the expand symbols when hovering over the cell or the list item containing the text */
    visibility: visible;
  }
  span.withLink:hover + .expand { /* Hide the expand symbol in the special case of a text with link (just to avoid confusion about the effect of clicking) */
    visibility: hidden;
  }
  .expand:hover { /* Highlight the symbol when hovering on it */
    fill: var(--color_eye_icons_hover);
  }
  .amount {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-size: 1.4rem;
    color: var(--color_amount); /* Unsigned amounts */
  }
  .amount .dot { /* Decimal dot */
    font-size: 2rem;
  }
  .amount.pos { /* Positive amounts */
    color: var(--color_pos); 
  }
  .amount.neg { /* Negative amounts */
    color: var(--color_neg);
  }
  .th {
    /* This class is a "header" type provided by the node explorer. The javascript will also add it on other table headers. */
  }
  .more, .more a {
    font-weight: bold;
    color: var(--color_more);
  }
  .collapsible-content .more, .collapsible-content .more a {
    color: var(--color_more_in_collapsible);
  }
  .more::before {
    content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
  }
  .noDataText { /* Text displayed when no data is available */
    display: block;
    font-size: 1.5rem;
    padding: 5px;
    font-style: italic;
  }

  /* FORMAT TABLES */
  table, td, th {
    color: var(--color_text); /* Default text color */
    font-size: 1.5rem; /* Default text size */
    border: 1px solid var(--color_table_border);
    border-collapse: collapse; /* Join table and cell borders as one single line */
    padding: 5px; /* Add a small padding */
  }
  table thead > tr th {
    color: var(--color_table_header_text);
    background-color: var(--color_table_header); /* Background color for table header cells declared as such ("thead" tag) */
  }
  th {
    white-space: nowrap; /* Don't wrap header text */
  }
  .tableGeneric {
    /* Nothing special */
  }
  .tableUTXO, .tableKernels {
    min-width: 50ch; /* Just to keep them visually balanced (inputs, outputs, kernels) */
    margin: 5px;
  }
  .tableSummary, .tableTotals {
    min-width: 70ch; /* Just to keep them visually balanced */
  }
  .tableOwned_compact, .tableOwned_full {
    width: 100%; /* Occupy full width of the column they appear in */
  }
  .tableFunds_compact, .tableFunds_full {
    width: 100%; /* Occupy full width of the column they appear in */
  }
  .tableContracts, .tableAssetHistory, .tableAssets, .tableCallHistory, .tableHistoricalBlocks {
    /* Nothing special */
  }
  .contractCall {
    border: 3px solid var(--color_table_rows_wrapper); /* Group multiple contract calls within a thick border */
  }
  .mainCall, .subCall {
    text-align: center;
  }
  .divTableStatus, #divTableBlocks {
    /* These div are just a dirty hack added to wrap and identify some special types of generic tables... */
  }
  /* Alternate row colors (...although the colors get mixed up when the table is filtered!) */
  table tbody > tr:nth-child(odd) { background-color: var(--color_table_row_odd); }
  table tbody > tr:nth-child(even) { background-color: var(--color_table_row_even); }
  /* Highlight when hover on main rows (for certain tables only) */
  .tableUTXO tbody > tr:hover, .tableKernels tbody > tr:hover,
  .tableOwned_full tbody > tr:hover, .tableFunds_full tbody > tr:hover,
  .tableAssets tbody > tr:hover, .tableAssetHistory tbody > tr:hover,
  #divTableBlocks .tableGeneric tbody > tr:hover, .tableContracts tbody > tr:hover {
    background-color: var(--color_table_row_hover);
  }
  tr.rowHighlight { /* Highlight a full row */
    background-color: var(--color_graph_row_highlight) !important; /* We use '!important' to override the alternate coloring of rows */
  }
  tr.rowHighlight:hover {
    background-color: var(--color_graph_row_highlight_hover) !important;
  }
  .emptyTable { /* Hide empty tables */
    display: none;
  }

  /* TITLE BANNER AND FOOTER */
  #Page-container {
    position: relative;
    min-height: 96vh; /* Always use the whole screen space, so that the footer stays at the bottom */
    width: 96vw;
    padding: 8px;
  }
  #Content-wrap {
    padding-bottom: 1.8rem; /* Leave some space for the footer */
  }
  #Banner {
    display: table; /* Display as table to organize its content */
    width: 100%;
    background-color: var(--color_banner_background);
    border-radius: 10px; /* Slightly round corners */
    padding: 8px 10px 7px 10px;
    text-align: center;
  }
  #BannerLeft {
    display: table-cell;
    vertical-align: middle;
    text-align: left;
  }
  #BeamLogo {
    text-align: center;
  }
  #BeamLogo:hover svg {
    filter: saturate(1.5) drop-shadow(0 0 5px var(--color_logo_shadow));
  }
  #NetworkSelect {
    border: none;
    font-size: 1.2rem;
    text-align: center;
    color: var(--color_network_select_text);
    background-color: var(--color_network_select_background);
    border: 1px solid transparent; /* We define the border here, even transparent, to avoid changes in size when hover */
    border-radius: 0.5em; /* Slightly round corners */
    margin: 2px 0 0 0;
    padding: 2px 2px 4px 2px;
  }
  #NetworkSelect:hover, #NetworkSelect:focus {
    cursor: pointer;
    border-color: var(--color_network_select_border); /* Display the border */
    background-color: var(--color_network_select_background_active); /* Change background */
    filter: drop-shadow(0 0 3px var(--color_network_select_shadow)); /* Add a halo */
  }
  #nodeSelectionPopup { /* Dialog popup */
    border: solid 5px var(--color_popup_border);
    border-radius: 1rem;
    box-shadow: 15px 15px 15px -10px #000;
    background-color: var(--color_popup_background);
    color: var(--color_popup_text);
  }
  #nodeSelectionPopup::backdrop { /* A fun effect, just for backdrops! */
    background: rgba(0,0,0,30%);
    backdrop-filter: blur(1px);
  }
  #nodeSelectionForm {} /* Form */
  .nodeSelectionTitle { /* Popup title */
    font-size: 1.5rem;
    color: var(--color_popup_text);
    padding: 0px 2px 0px 2px;
    text-align: center;
    font-weight: bold;
  }
  .nodeSelectionText { /* Popup text */
    font-size: 1.3rem;
    color: var(--color_popup_text);
    padding: 15px 0 5px 0;
    text-align: left;
    font-weight: bold;
  }
  #NodeSelectionList { /* List of explorer nodes URLs */
    padding: 0px 5px 10px 5px;
  }
  .nodeSelectionRadio { /* Radio button */
    vertical-align: bottom;
    margin: 5px 10px 0px 0px;
  }
  .nodeSelectionURL {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-size: 1.2rem;
    color: var(--color_popup_url);
    text-align: left;
    white-space: nowrap;
    cursor: pointer;
  }
  .nodeSelectionButtons { /* List of explore nodes URLs */
    padding: 5px 5px 5px 5px;
    text-align: center;
  }
  .popupButton { /* Buttons */
    cursor: pointer;
    margin: 2px 2px 2px 2px;
    padding: 5px 10px 5px 10px;
    font-weight: bold;
    color: var(--color_popup_button_text);
    background-color: var(--color_popup_button_background);
    border: solid 1px var(--color_popup_button_border);
    border-radius: 0.35em; /* Slightly round corners */
    vertical-align: middle;
  }
  .popupButton:hover, .popupButton:focus {
    outline: none; /* Avoid the browser default focus outline */
    background-color: var(--color_popup_button_background_hover);
    filter: drop-shadow(0 0 1px var(--color_popup_button_border));
  }
  #BannerCenter{
    display: table-cell;
    vertical-align: middle;
    text-align: center;
    width: 100%;
    white-space: nowrap; /* Never wrap text */
    padding: 0 10px 0 10px;
  }
  #BeamTitle {
    font-size: 2.4rem;
    color: var(--color_banner_title);
    margin: 0 0 5px 0;
  }
  #Version {
    font-size: 1rem;
    color: var(--color_banner_version);
  }
  #Menu {
    font-size: 1.5rem;
    color: var(--color_banner_menu_text);
    display: flex; /* Flex-container to organize menu items */
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: stretch;
  }
  .menuItem a {
    color: var(--color_banner_menu_link);
    text-decoration: none;
  }
  .menuItem a:hover {
    color: var(--color_banner_menu_link_hover);
    filter: drop-shadow(0 0 5px var(--color_banner_menu_link_shadow));
  }
  .menuSeparator {
    color: var(--color_banner_menu_text);
    padding: 0 5px 0 5px;
  }
  #SearchArea {
    display: block;
    padding: 8px 2px 0 2px;
  }
  #SearchForm {
    /* Nothing special */
  }
  #SearchField {
    display: inline-block;
    border-radius: 0.25em; /* Slightly round corners */
    border: 1px solid var(--color_banner_search_border);
    background-color: var(--color_banner_search_background);
    padding: 1.5ch 1ch 1.2ch 1ch; /* Internal padding */
    font-family: "Lucida Console", ui-monospace, monospace; /* Switch to monospace font */
    font-size: 1.2rem;
    width: 90%;
    max-width: 67ch;
    min-width: 10ch;
    color: var(--color_banner_search_text);
    height: 2rem;
    text-decoration: none;
    vertical-align: middle;
  }
  #SearchField:focus {
    outline: none; /* Avoid the browser default focus outline */
    border: 1px solid var(--color_banner_search_border_filled);
  }
  #SearchField:not(:placeholder-shown) { /* Search field with content in it */
    background-color: var(--color_banner_search_background_filled);
  }
  #SearchField:invalid {
    color: var(--color_banner_search_text_invalid);
    text-decoration: line-through; /* Strikethrough if incorrect format */
  }
  #SearchField:placeholder-shown { /* Needed in Chrome to remove the line-through */
    text-decoration: none;
    color: var(--color_banner_search_text);
  }
  #SearchField::placeholder {
    font-family: Arial, Helvetica, sans-serif; /* Font for the placeholder text */
    font-size: 1.3rem;
    font-style: italic;
    color: var(--color_banner_search_placeholder);
    text-decoration: none;
  }
  #SearchButton {
    display: inline-block;
    border: none;
    border: 1px solid var(--color_banner_search_button_border);
    border-radius: 0.25em; /* Slightly round corners */
    background-color: var(--color_banner_search_button_background);
    color: var(--color_banner_search_button_text);
    height: 2rem;
    font-size: 1.2rem;
    text-align: center;
    vertical-align: middle;
    text-decoration: none;
    padding: 0.25ch 1ch 0.25ch 1ch;
  }
  #SearchButton:hover {
    background-color: var(--color_banner_search_button_background_hover);
    color: var(--color_banner_search_button_text_hover);
    cursor: pointer; /* Mouse pointer on hover */
    filter: drop-shadow(0 0 1px var(--color_banner_search_button_background_hover));
  }
  #Navigation {
    display: table-cell;
    vertical-align: middle;
    text-align: center;
    white-space: nowrap; /* Don't wrap text */
    font-size: 2rem;
    margin: 0 10px 0 10px;
    line-height: 1; /* Without units it's a number of lines */
  }
  .NavRow {
    display: table-row;
  }
  #Back, #Reload, #ExpandAll, #ColorMode {
    display: table-cell;
    vertical-align: middle;
    text-align: center;
    padding: 3px 5px 3px 5px;
  }
  #Back *, #Reload *, #ExpandAll *, #ColorMode * {
    fill: var(--color_banner_navigation_icon); /* Color SVG icons */
  }
  #Back:hover *, #Reload:hover *, #ExpandAll:hover *, #ColorMode:hover * {
    fill: var(--color_banner_navigation_icon_hover); /* Color SVG icons */
  }
  #Back:hover svg, #Reload:hover svg, #ExpandAll:hover svg, #ColorMode:hover svg {
    filter: drop-shadow(0 0 2px var(--color_banner_navigation_icon_shadow));
  }
  .about {
    padding-top: 10px;
  }
  .aboutText {
    font-size: 1.4rem;
    color: var(--color_about_text);
    line-height: 1.9rem;
    padding-bottom: 0;
  }
  .aboutText a {
    color: var(--color_about_link);
  }
  .aboutDisclaimer {
    font-size: 1.4rem;
    color: var(--color_about_text);
    line-height: 1.9rem;
    font-style: italic;
  }
  #TopButton, #BottomButton {
    position: fixed; /* Fixed position */
    z-index: 99; /* Make sure it does not overlap */
    cursor: pointer; /* Mouse pointer on hover */
    border: none; /* Remove borders */
    outline: none; /* Remove outline */
    border-radius: 50%; /* Round button */
    background-color: var(--color_scroll_button); /* Background color */
    opacity: 0.2; /* Very transparent */
    text-align: center;
    font-size: 1.5rem;
    color: var(--color_scroll_text); /* Text color */
    padding: 10px; /* Some padding */
  }
  #TopButton {
    display: none; /* Hidden by default */
    bottom: 50px; /* Bottom of the page */
    right: 10px; /* Right side of the page */
  }
  #BottomButton {
    display: block; /* Shown by default */
    bottom: 10px; /* Bottom of the page */
    right: 10px; /* Right side of the page */
  }
  #TopButton:hover, #BottomButton:hover {
    opacity: 0.4; /* Less transparent on hover */
  }
  #Footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    text-align: center;
    color: var(--color_footer_text);
    font-weight: bold;
    white-space: nowrap; /* Don't wrap text */
    font-size: 1.2rem;
    height: 1.8rem; /* Footer height */
  }
  #Footer a {
    color: var(--color_footer_link);
    text-decoration: none;
  }
  #Footer a:hover {
    text-decoration: underline;
  }
  #Footer::before {
    content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
  }
  #Footer::after {
    content: "\00a0 \25c2"; /* Nice useless decoration ;-) */
  }
  #Loading span { /* Animation for the three dots */
    position: relative;
    display: inline-block;
    animation: bounce 1s infinite;
    animation-delay: calc(.1s * var(--t));
  }
  .querying {
    font-weight: normal;
    font-size: 1.2rem;
    color: var(--color_sub_text);
    vertical-align: middle;
  }
  .querying a {
    color: var(--color_sub_text);
  }
  .queried-network {
    font-weight: bold;
  }
  .queried-node {
    font-family: "Lucida Console", ui-monospace, monospace;
    font-size: 1.1rem;
    color: var(--color_node_url);
    white-space: nowrap;
  }

  /* GENERAL COLLAPSIBLE BLOCKS */
  .collapsible {
    display: block;
    width: fit-content; /* Will have the width of its full content */
  }
  .collapsible-label { /* Normal collapsible header */
    display: block; /* When display is not the default 'list-item', the default triangle disapears */
    width: fit-content; /* Uses only its own needed width */
    min-width: 20rem; /* Keeps most labels with similar width */
    white-space: nowrap; /* Never wrap text */
    cursor: pointer;
    font-size: 1.5rem;
    margin: 15px 0 0 0;
    color: var(--color_collapsible_text);
    background-color: var(--color_collapsible);
    padding: 10px;
    border: none;
    text-align: left;
    outline: none;
    border-radius: 0.4em; /* Slightly round corners */
  }
  .collapsible-label:hover {
    background-color: var(--color_collapsible_hover);
  }
  .collapsible-label.small { /* Smaller compact collapsible header */
    display: block;
    min-width: unset; /* no min width for small collapsible labels */
    font-size: 1.2rem;
    color: var(--color_small_collapsible_text);
    background-color: var(--color_small_collapsible);
    margin: 0;
    padding: 2px 5px 2px 5px;
    border-radius: 0.25em; /* Slightly round corners */
  }
  .collapsible-label.small:hover {
    background-color: var(--color_small_collapsible_hover);
  }
  .collapsible[open] > .collapsible-label {
    border-bottom-right-radius: 0; /* Remove bottom round corners when expanded... */
    border-bottom-left-radius: 0; /* ...just because it's nice! :-) */
  }
  .collapsible-label::-webkit-details-marker { /* Collapsible symbols */
    /* On Chrome 83, this is needed to hide the default triangle */
    display: none;
  }
  .collapsible-label::before {
    content: '\002b \00a0'; /* Add plus sign when collapsed */
    font-weight: bold;
  }
  .collapsible[open] > .collapsible-label::before {
    content: '\2212 \00a0'; /* Add minus sign when expanded */
  }
  .collapsible-content { /* Collapsible content */
    display: block;
    width: 100%;
    font-size: 1.5rem;
    color: var(--color_collapsible_content_text);
    background-color: var(--color_collapsible_content_background);
    border: 0.5px solid var(--color_collapsible); /* Add a thin border */
  }
  .collapsible-content.small {
    background-color: unset; /* No specific background color for small collapsibles */
    border: none; /* No border for small collapsibles */
  }
  .collapsible[open] > .collapsible-content {
    animation: smooth-opening 0.5s ease-in-out;  /* Just a small animation ;-) */
  }

  /* SHARED STYLES FOR TABLE OPTIONS */
  .collapsible.tableOptions { /* Collapsible for table options */
    display: block;
    margin-bottom: 10px;
  }
  .collapsible .collapsible.tableOptions { /* If collapsible is inside another collapsible */
    margin-bottom: 5px;
  }
  .collapsible-label.tableOptions { /* Remove default behavior of the other collapsibles */
    min-width: unset;
    background-color: unset;
    color: var(--color_config_collapsible_title);
    font-size: 1.3rem;
    margin: 0;
    padding: 5px 5px 0 5px;
    font-weight: normal;
  }
  .collapsible .collapsible .collapsible-label.tableOptions { /* If collapsible is inside another collapsible */
    color: var(--color_config_collapsible_text);
  }
  .collapsible-label.tableOptions:hover { /* Remove default behavior of the other collapsibles */
    background-color: unset;
  }
  .collapsible-content.tableOptions {
    color: var(--color_config_collapsible_text);
    padding: 2px 2px 5px 2px;
    margin: 5px 0 10px 0;
    border-radius: 0.4em; /* Slightly round corners */
    border-style: none;
  }
  .collapsible .collapsible .collapsible-content.tableOptions { /* If collapsible is inside another collapsible */
    padding: 2px 2px 2px 2px;
    margin: 2px 0 0 0;
  }
  #tableOptionsForm { /* Form name */
    /* Nothing Special */
  }
  #selectionOptions { /* Row and Column selection options */
    display: flex; /* Flex-container to organize #rowSelectionOptions #columnSelectionOptions and #columnOptions (when defined)) */
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: stretch;
    color: var(--color_config_collapsible_text);
  }
  #rowSelectionOptions { /* Options for rows */
    flex-grow: 0; /* Flex-item: Uses only the horizontal space needded for its content */
    display: flex; /* Trick: We define it as flex itself to ensure a good vertical alignement of its content */
    align-items: center;
    flex-wrap: nowrap;
    font-size: 1.3rem;
    margin: 0 15px 0 0;
  }
  #columnSelectionOptions { /* Options for columns */
    flex-grow: 1; /* Flex-item: Occupies max available horizontal space */
    display: flex; /* Trick: We define it as flex itself to ensure a good vertical alignement of its content */
    align-items: center;
    font-size: 1.3rem;
    flex-wrap: wrap;
  }
  #applySelection { /* Apply button */
    cursor: pointer;
    margin: 2px 10px 2px 2px;
    padding: 5px 15px 5px 15px;
    font-weight: bold;
    color: var(--color_config_collapsible_button_text);
    background-color: var(--color_config_collapsible_button);
    border-style: solid;
    border-width: 1px;
    border-color: var(--color_config_collapsible_button_border);
    border-radius: 0.35em; /* Slightly round corners */
  }
  #applySelection:hover, #applySelection:focus {
    outline: none; /* Avoid the browser default focus outline */
    background-color: var(--color_config_collapsible_button_hover);
    filter: drop-shadow(0 0 1px var(--color_config_collapsible_button_border));
  }
  .selectRows, .selectStep, .selectHeight { /* div */
    display: inline-block;
    padding: 0 5px 0 5px;
  }
  .labelStep, .labelHeight { /* label */
    /* Nothing special */
  }
  .labelRows, .labelColumns { /* label */
    font-weight: bold;
    margin: 0 0 0 4px;
  }
  .nbrRows, .nbrStep, .inputBlockHeight { /* Input fields */
    height: 1.5em;
    background: var(--color_collapsible_content_background);
    color: var(--color_config_collapsible_text);
    border-style: solid;
    border-width: 1px;
    border-color: var(--color_config_collapsible_description);
    border-radius: 0.2em; /* Slightly round corners */
    -moz-appearance: textfield; /* Hide arrows on Firefox */
  }
  .nbrRows, .nbrStep { /* Input numbers */
    width: 6rem;
  }
  .inputBlockHeight { /* Input blockheight */
    width: 8rem;
  }
  .nbrRows::-webkit-outer-spin-button, .nbrRows::-webkit-inner-spin-button,
  .nbrStep::-webkit-outer-spin-button, .nbrStep::-webkit-inner-spin-button,
  .inputBlockHeight::-webkit-outer-spin-button, .inputBlockHeight::-webkit-inner-spin-button {
    -webkit-appearance: none; /* Hide arrows on Chrome */
    margin: 0; /* This is also said to be needed... */
  }
  .nbrRows:focus, .nbrStep:focus, .inputBlockHeight:focus {
    outline: none; /* Avoid the browser default focus outline */
    filter: drop-shadow(0 0 1px var(--color_config_collapsible_text));
  }
  .selectionOptionsGroup { /* Block of selection links */
    white-space: nowrap;
  }
  .selectionOption { /* Selection links */
    cursor: pointer;
    display: inline-block;
    padding: 0 5px 0 5px;
    text-decoration-line: none;
    color: var(--color_config_collapsible_text); /* We keep it here, to avoid default link color */
    white-space: nowrap;
  }
  .selectionOption:hover, .selectionOption:focus { /* Selection links */
    outline: none; /* Avoid the browser default focus outline */
    text-decoration-line: underline;
  }
  .itemSeparator {
    display: inline-block;
    font-size: 1rem;
    color: var(--color_config_collapsible_text);
  }
  .selectionText {
    display: inline-block;
    padding: 0 5px 0 5px;
    color: var(--color_config_collapsible_description);
    font-style: italic;
    white-space: nowrap;
  }

  /* SPECIAL OPTIONS FOR BLOCK HEADERS TABLE */
  /* (the Block Headers table has hidden descriptions and drag and drop items) */
  #selectCurrentColumns, #selectDefaultColumns, #selectAllColumns, #pasteColumns, #reorderAllColumns {} /* Columns selection links */
  #pasteColumnsPopup { /* Dialog popup */
    border: solid 5px var(--color_popup_border);
    border-radius: 1rem;
    box-shadow: 15px 15px 15px -10px #000;
    background-color: var(--color_popup_background);
    color: var(--color_popup_text);
  }
  #pasteColumnsPopup::backdrop { /* A fun effect, just for backdrops! */
    background: rgba(0,0,0,30%);
    backdrop-filter: blur(1px);
  }
  #pasteColumnsForm {} /* Form */
  #pasteColumnsInput { /* Input text */
    border: 1px solid var(--color_popup_input_border);
    border-radius: 0.25em; /* Slightly round corners */
    background-color: var(--color_popup_input_background);
    font-family: "Lucida Console", ui-monospace, monospace; /* Switch to monospace font */
    font-size: 1.5rem;
    max-width: 30ch;
    min-width: 10ch;
    color: var(--color_popup_input_text);
    height: 3rem;
    text-decoration: none;
    vertical-align: middle;
    margin: 2px 2px 2px 0;
    padding: 0 1ch 0 1ch;
  }
  #pasteColumnsInput:focus {
    outline: none; /* Avoid the browser default focus outline */
    border: 1px solid var(--color_popup_input_border_filled);
  }
  #pasteColumnsInput:not(:placeholder-shown) { /* Input field with content in it */
    background-color: var(--color_popup_input_background_filled);
  }
  #pasteColumnsInput:invalid {
    color: var(--color_popup_input_text_invalid);
    text-decoration: line-through; /* Strikethrough if incorrect format */
  }
  #pasteColumnsInput:placeholder-shown { /* Needed in Chrome to remove the line-through */
    text-decoration: none;
    color: var(--color_popup_input_text);
  }
  #pasteColumnsInput::placeholder {
    font-family: Arial, Helvetica, sans-serif; /* Font for the placeholder text */
    font-size: 1.3rem;
    font-style: italic;
    color: var(--color_popup_input_placeholder);
    text-decoration: none;
  }
  .pasteColumnsText { /* Popup text */
    font-size: 1.5rem;
    color: var(--color_popup_text);
    padding: 5px 2px 10px 2px;
  }
  .pasteColumnsList { /* List of codes: Diplayed as auto-adjusting columns */
    display: block;
    column-width: 18rem; /* We set the width of the internal columns (and the number of columns will be automatic!) */
    column-gap: 5px;
    color: var(--color_popup_text);
    font-size: 1.3rem;
    padding: 10px 2px 5px 2px;
  }
  .pasteColumnsListItem {
    cursor: help; /* Just to remind there are tooltips... */
    padding: 3px 0 0 0;
  }
  .pasteColumnsListCode {
    font-family: "Lucida Console", ui-monospace, monospace; /* Switch to monospace font */
    font-weight: bold;
    font-size: 1.5rem;
  }
  .pasteColumnsListTitle {
    white-space: nowrap;
    vertical-align: bottom; /* To better align with the monospace code */
  }
  #toggleDescriptions { /* Container for the 'Show details' Icon */
    flex-grow: 1; /* So that it takes all the available width and the symbol can be right aligned */
    text-align: right;
  }
  #toggleDescriptionsLink {
    outline: none; /* Avoid the browser default focus outline */
    margin: 0 0 0 50px;
  }
  #toggleDescriptionsLink svg { /* 'Show details' icon */
    cursor: pointer;
    height: 2.5rem;
    width: 2.5rem;
    fill: var(--color_eye_icons);
    margin: 0 10px 0 10px;
  }
  #toggleDescriptionsLink svg:hover, #toggleDescriptionsLink:focus svg { /* Highlight icon when hovering on it */
    fill: var(--color_eye_icons_hover);
  }
  #columnOptions { /* Group of checkboxes: Displayed as auto-adjusting columns */
    display: block;
    column-width: 18rem; /* We set the width of the internal columns (and the number of columns will be automatic!) */
    column-gap: 5px;
    margin-top: 5px;
  }
  .columnOption { /* Checkboxes and labels are displayed as small invisble tables to keep all well aligned */
    display: table;
    font-size: 1.3rem;
    vertical-align: top;
    width: 100%;
    padding-bottom: 2px;
    border-color: transparent; /* Add an invisible bottom border (will be displayed during drag and drop) */
    border-style: dotted;
    border-width: 0 0 2px 0;
  }
  .columnOption.drag-over { /* Show bottom border when dragged-over */
    border-color: var(--color_config_collapsible_drag-over);
  }
  .columnOption.hidden { /* Hide element (when being dragged) */
    opacity: 0.2;
  }
  .columnOptionCheck { /* Checkboxes container */
    display: table-cell;
    width: min-content;
  }
  .columnOptionCheckbox { /* Normal checkboxes */
    cursor: pointer;
  }
  .columnOptionCheckboxDisabled { /* Disabled checkboxes */
    /* Nothing special */
  }
  .columnOptionText { /* Container for the text next to each checkbox */
    display: table-cell;
    width: 100%;
  }
  .columnOptionText:hover { /* To show the element accepts drag and drop */
    cursor: grab; 
  }
  .columnOptionText:active { /* During drag and drop */
    cursor: grabbing;
  }
  .columnOptionNumber { /* Option number (and dot) */
    color: var(--color_config_collapsible_description);
  }
  .columnOptionLabel { /* Option label */
    font-weight: bold;
    white-space: nowrap;
  }
  .columnOptionDescription { /* Option description */
    display: block;
    font-size: 1.2rem;
    color: var(--color_config_collapsible_description);
    padding-top: 2px;
    padding-bottom: 10px;
  }
  .columnOptionDescription.hidden { /* Hide option descriptions */
    display: none;
  }

  /* SPECIAL HISTORICAL BLOCKS */
  .collapsible-label.special {
    display: block;
    min-width: 45rem; /* Keeps most labels with similar width */
    font-size: 1.5rem;
    font-weight: bold;
    margin: 0;
    padding: 5px 10px 5px 2px;
    border-radius: 0.25em; /* Slightly round corners */
  }
  .specialBlock_Description {
    font-size: 1.3rem;
    line-height: 1.7rem;
    padding: 8px 2px 10px 2px;
  }
  .specialBlock_Description br { /* Dirty hack to add line spacing to 'br' tag... */
    display: block;
    content: " ";
    margin: 0.3rem 0 0.3rem 0;
  }
  .specialBlock_Description a {
    font-weight: bold;
  }
  .specialBlock_Link {
    font-size: 1.2rem;
    color: var(--color_historical_notes);
    line-height: 1.3rem;
    padding: 2px;
  }
  .specialBlock_Link:first-child {
    padding-top: 20rem;
  }
  .specialBlock_Link:last-child {
    padding-bottom: 1rem;
  }
  .specialBlock_Link a {
    color: var(--color_historical_notes);
  }
  .specialBlock_Link::before {
    content: "\25b8 \00a0"; /* Nice useless decoration ;-) */
  }

  /* SORT AND SEARCH HEADERS IN TABLES */
  .filtersOff th, .filtersOn th, .filtersNot th, .headerCell, .headerRow { /* General for all headers */
    text-align: center;
    white-space: nowrap; /* Don't wrap header text */
    font-weight: bold;
  }
  .filtersOff .th::before { /* Add placeholders for sorting indicators */
    content: '\21c5 \00a0';
    display: inline-block;
    visibility: hidden;
    text-align: center;
    width: 1.3em;
    margin: 0;
  }
  .filtersOff .th::after { /* Hidden symbol, just to keep the text centered */
    content: '\00a0 \21c5';
    display: inline-block;
    visibility: hidden;
    text-align: center;
    width: 1.3em;
    margin: 0;
  }
  .filtersOff th { /* Force same min column width as when filters are on */
    min-width: 5ch;
  }
  .filtersOff th { /* Headers when filters are off */
    background-color: var(--color_table_header);
  }
  .filtersOff:hover th { /* Show the header is clickable */
    cursor: pointer;
    background-color: var(--color_table_header_hover);
  }
  .filtersOff:hover .th::before { /* Show sorting indicator on hover */
    color: var(--color_sorting_indicator);
    visibility: visible;
  }
  .filtersOn th { /* Headers when filters are on */
    background-color: var(--color_table_header_active);
  }
  .filtersOff th, .filtersOn th { /* Make header rows sticky to the top of the window */
    /* Remark: On Chrome 83, sticky only works on 'th' (not on 'thead' or 'tr') */
    position: sticky;
    top: 0;
    z-index: 10;
  }

  /* SORT OPTIONS IN HEADERS */
  .sortable {
    cursor: pointer; /* Change mouse pointer to show it's clickable */
  }
  .sortable .th::before { /* Add sorting indicators */
    content: '\21c5 \00a0'; /* Symbol when not sorted */
    color: var(--color_sorting_indicator);
    display: inline-block;
    text-align: center;
    width: 1.3em;
    margin: 0;
  }
  .sortable .th::after { /* Hidden symbol, just to keep the text centered */
    content: '\00a0 \21c5';
    display: inline-block;
    visibility: hidden;
    text-align: center;
    width: 1.3em;
    margin: 0;
  }
  .sortable:hover .th::before { /* Highlight symbol on hover */
    color: var(--color_sorting_indicator_hover);
  }
  .sortable.asc .th::before {
    content: '\25b2 \00a0'; /* Symbol when sorted ascending */
    color: var(--color_sorted_indicator);
  }
  .sortable.desc .th::before {
    content: '\25bc \00a0'; /* Symbol when sorted descending */
    color: var(--color_sorted_indicator);
  }

  /* SEARCH OPTIONS IN HEADERS */
  .searchable {
    margin: 3px 0 0 0;
  }
  .search {
    visibility: hidden; /* Search fields are hidden by default */
    display: inline-block;
    color: var(--color_table_search_text);
    width: 95%;
    max-width: 20ch;
    min-width: 5ch;
    border-radius: 0.25em; /* Slightly round corners */
    border: 1px solid var(--color_table_search_border); /* Search field border */
    background-color: var(--color_table_search_background);
    padding: 0.25ch 1ch 0.25ch 1ch ; /* Internal padding */
  }
  .headerCell:hover .search { /* Search fields on hover */
    visibility: visible; /* Make it appear when hover */
  }
  .search:not(:placeholder-shown) { /* Search fields with content */
    visibility: visible; /* Keep it visible */
    max-width: 95%; /* Extend to full width */
    background-color: var(--color_table_search_background_filled); /* Use a lighter background */
    border: 1px solid var(--color_table_search_border); /* Active border */
  }
  .search:focus { /* Search fields on focus */
    visibility: visible; /* Keep it visible */
    max-width: 95%; /* Extend to full width */
    outline: none; /* Avoid the browser default focus outline */
    border: 1px solid var(--color_table_search_border_filled); /* Active border */
  }

  /* GRAPH AREA */
  #tableOptionsContainer {
    display: block;
    position: relative; /* Needed to be the reference for the absolute positioning of its children (the labels) */
    margin: 0 0 0.5rem 0;
    padding: 1.5rem 0 0 0; /* Space for the labels on top */
  }
  #graphCollapsible, #optionsCollapsible {
    display: block;
    margin: 0;
    padding: 0;
  }
  #graphCollapsible {
    width: 100%;
    max-width: 1200px; /* Just for elegance, in case the screen width is very wide */
  }
  #graphCollapsible .collapsible-label, #optionsCollapsible .collapsible-label {
    display: inline;
    white-space: nowrap; /* Don't wrap labels */
    margin: 0;
    padding: 0;
    height: 1.5rem;
    min-width: 7rem;
    position: absolute; /* Put all labels on the top left corner */
    left: 0;
    top: 0;
  }
  #graphCollapsible .collapsible-label {
    left: 7rem; /* Put the second label to the right of the first one */
  }
  #optionsCollapsible[open] .collapsible-content, #graphCollapsible[open] .collapsible-content {
    margin: 5px 0 5px 0;
    padding: 5px;
  }
  #graphCollapsible[open] .collapsible-content {
    margin: 5px 0 10px 0; /* For some reason I have to increase the margin-bottom of the second collapsible... */
    padding: 5px 0 5px 0;
  }
  #graphCollapsible .collapsible-content {
    width: 100%;
    height: 300px;
    display: flex; /* This will allow the graph to occupy all the available vertical space */
    flex-direction: column;
    resize: both; /* Make it resizable with mouse */
    overflow: hidden; /* Avoid scrollbars appearing */
    min-width: 400px;
    min-height: 200px;
  }
  #resetColors {
    display: block;
    margin: 0 5px 0 8px;
  }
  #resetColors a {
    font-size: 0.8rem;
    color: var(--color_graph_legend_title);
    vertical-align: middle;
  }
  #graphContainer {
    display: block;
    flex: 1 1 auto; /* This element will extend to use all the available vertical space */
    width: auto;
    height: auto;
    min-height: 0; /* We set this value to avoid the default 'auto' (where flex items cannot be smaller than their content). Otherwise the legend below the canvas can disapear when we shrink the container! */
  }
  #graphSVG {
    display: block;
    outline: none;
    border: none;
    width: 100%; /* Use all the available space in its container */
    height: 100%; /* Use all the available space in its container */
  }
  #graphBox {
    fill: var(--color_graph_area);
    stroke: var(--color_graph_border);
    stroke-width: 1px;
  }
  #graphCursor {
    stroke: var(--color_graph_cursor);
    stroke-width: 5px;
  }
  .graphPolyline {
    stroke-width: 1.5px;
  }
  #graphLegend {
    display: block;
    flex: 0 0 auto; /* This element will keep its size (i.e. it won't grow more than it needs) */
    width: auto;
    height: auto;
    margin: 5px 10px 5px 10px;
    font-size: 1.3rem;
    line-height: 1.8rem;
  }
  #graphLegendTitle {
    color: var(--color_graph_legend_title);
    font-weight: bold;
  }
  #graphLegendSubtitle {
    color: var(--color_graph_legend_subtitle);
    font-weight: normal;
    font-style: italic;
  }
  .graphLegendItem { /* The colors of these items will be step by a javascript function */
    display: inline-block;
    cursor: default;
    margin: 0 5px 0 5px;
    min-width: 19em; /* Some extra space is reserved to display the graph values */
  }
  .graphLegendValue {
    display: inline-block;
    font-weight: normal;
  }
  .graphColorPicker { /* Hide color picker... */
    display: none;
  }
  .graphLegendItem::before { /* ...and use another symbol instead */
    content: "\002B24 \00a0";
  }
  .graphLegendItem:hover { /* Highlight the label on hover (JS sets a class to also highlight the corresponding graph) */
    font-weight: bolder;
  }
  .graphLegendItem:hover .graphLegendValue {
    font-weight: bold;
  }
  #graphArea.graph-highlight .graphPolyline { /* To better highlight one graph, dim all of them... */
    stroke-width: 1px;
  }
  #graphArea.graph-highlight .graphPolyline.graph-highlight { /* ...and then highlight the selected one! */
    stroke-width: 2.5px;
  }

  /* GRAPH CHECKBOXES ON TABLE HEADERS */
  .th .tableGraphCheckbox { /* Checkboxes are hidden by default */
    display: none;
  }
  .th.graphable .tableGraphCheckbox { /* Display checkboxes */
    display: inline-block;
    text-align: center;
    width: 1.3em;
    margin: 0 0 0 2px;
    cursor: copy; /* Special cursor for the checkboxes */
  }
  .th.graphable::after { /* No extra symbol needed when checkbox is visible */
    content: none;
  }

  /* GENERAL ANIMATIONS */
  @keyframes bounce { /* Used for loading dots */
    0%,40%,100% { transform: translateY(0) }
    20% { transform: translateY(-1rem) }
  }
  @keyframes smooth-opening { /* Used for certain collapsibles */
    0% {opacity: 0}
    100% {opacity: 1}
  }

</style>

</head>
<body>
<!-- ************ SECTION 3 - STATIC HTML ************ -->

  <!-- SVG templates (= invisible 'symbols' that can be called elsewhere) -->
  <!-- Remark: No fixed size or color defined here. They will adapt to the SVG calling them. -->
  <svg style='display:none'><symbol id='eye_icon' viewBox='0 11 32 10'><path d='m0 16 .16.35q.1.22.48.93t.83 1.34 1.25 1.54 1.66 1.7 2.15 1.56 2.62 1.35 3.14.9 3.71.35 3.71-.36 3.17-.92 2.6-1.32 2.14-1.6 1.66-1.63 1.25-1.6.83-1.31.48-.93L32 16q-.03-.13-.16-.35t-.48-.9-.83-1.34-1.25-1.57-1.66-1.66-2.15-1.57-2.62-1.35-3.14-.9T16 6.03t-3.71.35-3.17.9-2.6 1.34-2.14 1.57-1.66 1.66-1.25 1.57-.83 1.34-.48.93zm10.02 0q0-2.46 1.72-4.22T16 10.02t4.26 1.76T22.02 16t-1.76 4.26T16 22.02t-4.26-1.76T10.02 16zM12 16q0 1.66 1.18 2.85T16 20t2.82-1.15T20 16t-1.18-2.82T16 12t-2.82 1.18L16 16h-4z'/></symbol></svg>
  <svg style='display:none'><symbol id='left_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' d='M12 3a9 9 0 1 0 0 18 9 9 0 0 0 0-18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m13 9-3 3 3 3'/></symbol></svg>
  <svg style='display:none'><symbol id='right_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' d='M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m11 15 3-3-3-3'/></symbol></svg>
  <svg style='display:none'><symbol id='double_right_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' d='M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 9 15 L 12 12 L 9 9'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 13 15 L 16 12 L 13 9'/></symbol></svg>
  <svg style='display:none'><symbol id='double_left_icon' fill='none' viewBox='0 0 24 24'><path stroke-width='2' stroke-linecap='round' d='M12 3a9 9 0 1 0 0 18 9 9 0 0 0 0-18Z'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 11 9 L 8 12 L 11 15'/><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M 15 9 L 12 12 L 15 15'/></symbol></svg>
  <svg style='display:none'><symbol id='list_icon' viewBox='0 -3 10 14'><path d='M4 0h7a1 1 0 1 1 0 2H4a1 1 0 0 1 0-2zM1 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 4h7a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2zM1 4a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm3 4h7a1 1 0 1 1 0 2H4a1 1 0 1 1 0-2zM1 8a1 1 0 1 1 0 2 1 1 0 0 1 0-2z'/></symbol></svg>
  <svg style='display:none'><symbol id='mode_icon' viewBox='0 0 512 512'><path d='M448 256c0-106-86-192-192-192V448c106 0 192-86 192-192zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256z'/></symbol></svg>

  <!-- Wrappers (added just to keep footer at the bottom) -->
  <div id="Page-container">
    <div id="Content-wrap">

      <!-- Fixed banner on all pages -->
      <div id="Banner">
        <div id="BannerLeft">
          <div id="BeamLogo">
            <!-- Clicking on the logo sends back to the main page -->
            <a href='?network=$network' title='Main page'>
              <!-- A simplified SVG version of the BEAM logo -->
              <svg height='6em' width='6em' viewBox='42 42 460 460'><defs><linearGradient id='Gradient1' x1='-24.6' y1='683.51' x2='-23.57' y2='683.51' gradientTransform='matrix(98, 0, 0, -47, 2497.75, 32364.11)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#fff' stop-opacity='0'/><stop offset='1' stop-color='#fff'/></linearGradient><linearGradient id='Gradient2' x1='-28.7' y1='703.17' x2='-27.72' y2='703.17' gradientTransform='matrix(-98, 0, 0, 26, -2353.25, -18019.72)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#9d6eff' stop-opacity='0'/><stop offset='1' stop-color='#a18cff'/></linearGradient><linearGradient id='Gradient3' x1='-28.69' y1='682.8' x2='-27.57' y2='682.8' gradientTransform='translate(-2353.25 29603.78) rotate(180) scale(98 43)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#ae60d6' stop-opacity='0'/><stop offset='1' stop-color='#ab38e6'/></linearGradient><linearGradient id='Gradient4' x1='-28.68' y1='685.09' x2='-27.47' y2='685.09' gradientTransform='translate(-2353.25 41328.94) rotate(180) scale(98 60)' gradientUnits='userSpaceOnUse'><stop offset='0' stop-color='#fd76fd' stop-opacity='0'/><stop offset='1' stop-color='#ff51ff'/></linearGradient></defs><circle id='circle' fill='#0b1624' cx='272' cy='272' r='230'/><g id='logo'><path id='Triangle-left' fill='#24c1ff' d='M272.25,327.21H194.72l77.5-135V110.45L120.31,370.64H272.25Z'/><path id='Triangle-right' fill='#0b76ff' d='M272.25,327.21h77.53l-77.5-135V110.45L424.19,370.64H272.25Z'/><polygon id='Triangle-small-left' fill='#39fff2' points='272.25 226.3 272.25 313.57 224.77 313.67 272.25 226.3'/><polygon id='Triangle-small-right' fill='#00e2c2' points='272.25 226.3 272.25 313.57 319.73 313.67 272.25 226.3'/><polygon id='Ray1-left' fill='url(#Gradient1)' points='86.13 191.81 272.25 277.83 272.25 286.83 86.13 246.1 86.13 191.81'/><polygon id='Ray2-right-low' fill='url(#Gradient2)' points='458.75 274.33 272.25 286.83 272.25 283.83 458.75 238.5 458.75 274.33'/><polygon id='Ray3-right-mid' fill='url(#Gradient3)' points='458.75 202.67 272.25 280.83 272.25 283.83 458.75 238.5 458.75 202.67'/><polygon id='Ray4-right-top' fill='url(#Gradient4)' points='458.75 166.83 272.25 277.83 272.25 280.83 458.75 202.67 458.75 166.83'/></g></svg>
            </a>
          </div>
          <div id="Network">
            <!-- Network selection dropdown (the options will be added by JS) -->
            <select id="NetworkSelect" title="Change network" name="network"></select>
            <!-- Popup for selecting the network (will be activated by a link in the About section) -->
            <!-- Remark: We use 'dialog' because 'popover' does not work on Chrome 83. -->
            <dialog id="nodeSelectionPopup">
              <form id="nodeSelectionForm" name="nodeSelectionForm" method="dialog" onsubmit="applyNodeSelection();">
                <div class="nodeSelectionTitle">- Explorer nodes -</div>
                <!-- Display a list of explorer nodes URLs (the list will be added by JS) -->
                <div id="NodeSelectionList"></div>
                <div class="nodeSelectionButtons">
                  <button type="submit" class="popupButton" id="nodeSelectionApply" title="Save prefered explorer nodes">Apply</button>
                  <button type="button" class="popupButton" id="nodeSelectionDefault" title="Select default explorer nodes" onclick="defaultNodeSelection();">Default</button>
                  <button type="button" class="popupButton" id="nodeSelectionCancel" title="Cancel" onclick="closeNodeSelection();">Cancel</button>
                </div>
              </form>
            </dialog>
          </div>
        </div>
        <div id="BannerCenter">
          <h1 id="BeamTitle">Beam Smart Explorer <span id='Version'>v0.8.2 (beta)</span></h1>
          <div id="Menu">
            <!-- Main explorer menu -->
            <span class="menuItem"><a href="?network=$network&type=hdrs" title="List of recent Block Headers">Block Headers</a></span>
            <span class="menuSeparator"> | </span>
            <span class="menuItem"><a href="?network=$network&type=assets" title="List of current Confidential Assets">Confidential Assets</a></span>
            <span class="menuSeparator"> | </span>
            <span class="menuItem"><a href="?network=$network&type=contracts" title="List of currently deployed Smart Contracts">Smart Contracts</a></span>
            <span class="menuSeparator"> | </span>
            <span class="menuItem"><a href="?network=$network&type=historical" title="List of special historical blocks">Historical blocks</a></span>
          </div>
          <div id="SearchArea">
            <!-- Search field -->
            <form id="SearchForm" name="SearchForm" action="javascript:submitSearch();">
              <input id="SearchField" type="text" required value="" size="20" pattern="[0-9a-fA-F]+" placeholder="Search kernel id or block height" title="Enter a kernel id or a block height" autofocus>
              <button id="SearchButton" type="submit" title="Search">&#x1F50E;&#xFE0E;</button>
            </form>
          </div>
        </div>
        <!-- Banner symbols for navigation and special functions -->
        <div id="Navigation">
          <div class="NavRow">
            <a id="Back" href="javascript:history.back();" title="Back"><svg width='1.2em' height='1.2em' viewBox='3 1 60 34'><path d='M3 18L19 2v10h42v12H19v10z'/></svg></a>
            <a id="Reload" href="" title="Reload"><svg width='1.2em' height='1.2em' viewBox='-5 -10 140 140'><path d='M60,95.5c-19.575,0-35.5-15.926-35.5-35.5c0-19.575,15.925-35.5,35.5-35.5c13.62,0,25.467,7.714,31.418,19h22.627 C106.984,20.347,85.462,3.5,60,3.5C28.796,3.5,3.5,28.796,3.5,60c0,31.203,25.296,56.5,56.5,56.5 c16.264,0,30.911-6.882,41.221-17.88L85.889,84.255C79.406,91.168,70.201,95.5,60,95.5z'/><polygon points='120,21.832 119.992,68.842 74.827,55.811'/></svg></a>
          </div>
          <div class="NavRow">
            <a id="ExpandAll" href="javascript:expandEverything();" title="Expand everything"><svg width='1.2em' height='1.2em'><use href='#eye_icon'/></svg></a>
            <a id="ColorMode" href="javascript:toggleDarkMode();" title="Toggle light/dark mode"><svg width='0.9em' height='0.9em'><use href='#mode_icon'/></svg></a>
          </div>
        </div>
      </div>

      <!-- Floating buttons to scroll up and down -->
      <div><button onclick='topFunction();' id='TopButton' title='Top'>&#9650;</button></div>
      <div><button onclick='bottomFunction();' id='BottomButton' title='Bottom'>&#9660;</button></div>

      <!-- Main content area (will be replaced through Javascript) -->
      <div id="MainContent">
        <!-- Dots are isolated, for CSS animation... -->
        <h2 id="Loading">Loading<span style="--t:1">.</span><span style="--t:2">.</span><span style="--t:3">.</span></h2>
        <p class="querying">Querying explorer node for <span class="queried-network"></span>: <span class="queried-node"></span></p>
        <p class="querying">&#9656; <a href='javascript:openNodeSelection();' title='Show list of explorer nodes'>List of available nodes.</a></p>
      </div>

    </div>

    <!-- Fixed footer on all pages -->
    <div id='Footer'><a href='https://www.beam.mw' target='_blank'>beam.mw</a></div>

    <!-- No JavaScript warning -->
    <noscript>You need to enable JavaScript to run this app.</noscript>

  </div>

<!-- ************ SECTION 4 - CORE JS FUNCTIONS ************ -->
<script>

  function MakeRef(link, text, target = '_self') {
    return "<a href='" + link + "' target='" + target + "'>" + text + '</a>';
  }

  function UrlSelf(type, extra = '') {
    return window.location.pathname + '?network=' + g_network + '&type=' + type + extra;
  }

  function MakeCell(text, styles = '') {
    return '<td' + styles + '>' + text + '</td>';
  }

  function MakeCellRA(text, styles = '') {
    return MakeCell(text, " align='right'" + styles);
  }

  function MakeAmountClr(amount) {
    let type = 'amount';

    if (amount[0] == '-') { type = 'amount neg' }
    if (amount[0] == '+') { type = 'amount pos' }

    // Add a span to the decimal dot (to allow speical formatting)
    amount = amount.replace('.', AddClass('.','dot'));

    return AddClass(amount, type);
  }

  function AddClass(txt, className, other = '') {
    return "<span class='" + className + "' " + other + '>' + txt + '</span>';
  }

  function AddClassDiv(txt, className, other = '') {
    return "<div class='" + className + "' " + other + '>' + txt + '</div>';
  }

  function UrlBlock(h) {
    return UrlSelf('block', '&height=' + h);
  }

  function MakeBlock(h) {
    return AddClass(MakeRef(UrlBlock(h), h), 'blockHeight');
  }

  function MakeCellAmount(amount, extra) {
    return MakeCellRA(MakeAmountClr(amount), extra);
  }

  function MakeAsset(aid) {
    if (aid == 0) return AddClass('Beam', 'assetName');
    return AddClass(MakeRef(UrlSelf('asset', '&id=' + aid), 'Asset-' + aid), 'assetName');
  }

  function MakeCid(cid) {
    return AddClass(MakeRef(UrlSelf('contract', '&id=' + cid), cid), 'cid', "title='" + cid + "'");
  }

  function MakeFundsTbl(jFunds) {
    if (!jFunds) return '';

    let text = '';

    // Make collapsible and add some headers if more than a few rows
    let maxRows = 5;
    if (jFunds.length < maxRows) {
      text += "<table class='tableFunds_compact' border='1' cellspacing='0'>";
    } else {
      text += MakeCollapsibleBegin(jFunds.length + '&nbsp;assets', 'small', 'close');
      text +="<table class='tableFunds_full' border='1' cellspacing='0'>\n\
                <thead><tr>\n\
                  <th><span class='th'>Asset</span></th>\n\
                  <th><span class='th'>Amount</span></th>\n\
                </tr></thead>\n";
    }

    for (let iF = 0; iF < jFunds.length; iF++) {
      const jFR = jFunds[iF];
      text += '<tr>';
      text += MakeCell(MakeAsset(jFR[0]['value']));
      text += MakeCellAmount(jFR[1]['value'], '');
      text += '</tr>';
    }
    text += '</table>';
    if (jFunds.length >= maxRows) {
      text += MakeCollapsibleEnd();
    }
    return text;
  }

  function Obj2Html_TableRows(jTbl) {
    let text = '';

    for (let iRow = 0; iRow < jTbl.length; iRow++) {
      const jRow = jTbl[iRow];

      if (jRow.type == 'group') {
        text += Obj2Html_TableRows(jRow.value);
      } else {
        text += '<tr>';

        for (let iCol = 0; iCol < jRow.length; iCol++) {
          text += "<td align='right'>";
          text += Obj2Html(jRow[iCol]);
          text += '</td>';
        }

        text += '</tr>';
      }
    }
    return text;
  }

  function Obj2HtmlSpecial(obj) {

    if (obj.type == 'cid') { return MakeCid(obj.value) }

    if (obj.type == 'th') { return AddClass(Obj2Html(obj.value), 'th') }

    if (obj.type == 'amount') { return MakeAmountClr(obj.value) }

    if (obj.type == 'table') {
      const jTbl = obj.value;
      let text = "<table class='tableGeneric' border='1' cellspacing='0'>";
      text += Obj2Html_TableRows(jTbl);
      text += '</table>';
      return text;
    }

    if (obj.type == 'aid') { return MakeAsset(obj.value) }

    if (obj.type == 'height') { return MakeBlock(obj.value) }

    if (obj.type == 'blob') { return AddClass(obj.value, 'blob', "title='" + obj.value + "'") }

    if (obj.type == 'bool') { return obj.value > 0 ? AddClass('yes', 'bool yes') : AddClass('no', 'bool no') }

    if (obj.type == 'time') {
      let d = new Date();
      let diff = d.getTimezoneOffset();
      d = new Date((obj.value - diff * 60) * 1000);
      let txt = d.toISOString().split('T');
      return AddClass(txt[0] + ' ' + txt[1].split('.')[0], 'time');
    }

    return '';
  }

  function Obj2Html(obj) {
    // Display empty span if data is empty
    if (obj == null) { return AddClass('', 'emptySpan'); }

    if (Array.isArray(obj)) {
      let txt = '<ul>';
      for (let i = 0; i < obj.length; i++) {
        txt += '<li>';
        txt += Obj2Html(obj[i]);
        txt += '</li>';
      }
      txt += '</ul>';
      return txt;
    }

    if (typeof obj == 'object') {
      let txt = Obj2HtmlSpecial(obj);
      if (txt != '') { return txt }

      txt = '<ul>';
      for (let key in obj) {
        txt += '<li>' + key + ': ';
        txt += Obj2Html(obj[key]);
        txt += '</li>';
      }

      txt += '</ul>';
      return txt;
    }

    if (typeof obj === 'string') {
      // If data is a text string starting with "STD:" (i.e. it's an asset description), then we type it as "metadata"
      if (obj.startsWith('STD:')) { return AddClass(obj, 'metadata') }
      // For the table of block headers, we also replace some default labels and add the corresponding codes and descriptions
      if (g_type == 'hdrs') {
        for (let item of columnHeaders) {
          if (obj == item.original) { return "<span title='" + item.description + "' data-code='" + item.code + "'>" + item.title + "</span>" }
        }
      }
    }

    return obj;
  }

  function SetContent(text) {
    document.getElementById('MainContent').innerHTML = text;
    // Parse Metadata to add classes (Rem: we do this one first because its innerHTML destroys the even handlers!)
    addClassesToMetadata();
    // Add truncate/expand options to all text of type hash, cid, metadata, etc.
    addExpandOptions();
    // Include options for adding filters to the first row of long tables
    addFilterOption();
    // Replace empty tables with a text
    hideEmptyTables();
  }

  function DisplayContracts() {
    let text = "\
      <h2 class='title'>Deployed Smart Contracts</h2>\n\
      <table class='tableContracts' border='1' cellspacing='0'>\n\
        <thead><tr>\n\
          <th><span class='th'>Cid</span></th>\n\
          <th><span class='th'>Kind</span></th>\n\
          <th><span class='th'>Deploy Height</span></th>\n\
          <th><span class='th'>Locked Funds</span></th>\n\
          <th><span class='th'>Owned Assets</span></th>\n\
        </tr></thead>\n\
    ";

    const jData = JSON.parse(this.responseText);
    const jTbl = jData['value'];

    // skip 1st row
    for (let iRow = 1; iRow < jTbl.length; iRow++) {
      const jRow = jTbl[iRow];
      text += '<tr>';

      const cid = jRow[0]['value'];
      text += MakeCell(MakeCid(cid));
      text += MakeCell(Obj2Html(jRow[1]));
      text += MakeCellRA(MakeBlock(jRow[2]));
      text += MakeCell(MakeFundsTbl(jRow[3]['value']));

      text += '<td>';

      const jOwned = jRow[4]['value'];
      if (jOwned) {
        // Make collapsible and add some headers if more than a few rows
        let maxRows = 5;
        if (jOwned.length < maxRows) {
          text += "<table class='tableOwned_compact' border='1' cellspacing='0'>";
        } else {
          text += MakeCollapsibleBegin(jOwned.length + '&nbsp;owned', 'small', 'close');
          text += "\
            <table class='tableOwned_full' border='1' cellspacing='0'>\n\
              <thead><tr>\n\
                <th><span class='th'>Asset</span></th>\n\
                <th><span class='th'>Description</span></th>\n\
                <th><span class='th'>Amount</span></th>\n\
              </tr></thead>\n\
          ";
        }

        for (let iF = 0; iF < jOwned.length; iF++) {
          const jFR = jOwned[iF];
          text += '<tr>';
          text += MakeCell(MakeAsset(jFR[0]['value']), " style='width:10%'");
          text += MakeCell(AddClass(jFR[1], 'metadata'));
          text += MakeCellAmount(jFR[2]['value'], " style='width:40%'");
          text += '</tr>';
        }
        text += '</table>';
        if (jOwned.length >= maxRows) {
          text += MakeCollapsibleEnd();
        }
      }

      text += '</td>';
      text += '</tr>\n';
    }

    text += '</table>';
    SetContent(text);
  }

  function DisplayAssetHistory() {
    const jData = JSON.parse(this.responseText);
    const jTblObj = jData['Asset history'];
    const jTbl = jTblObj['value'];

    let text = "<h2 class='title'>Status of Asset " + g_id + '</h2>\n';

    text += MakeCollapsibleBegin('Asset History');

    // Display table options
    text += DisplayAssetOptions();

    // Display table
    text += "\
      <table class='tableAssetHistory' border='1' cellspacing='0'>\n\
        <thead><tr>\n\
          <th><span class='th'>Height</span></th>\n\
          <th><span class='th'>Event</span></th>\n\
          <th><span class='th'>Amount</span></th>\n\
          <th><span class='th'>Total Amount</span></th>\n\
          <th><span class='th'>Extra</span></th>\n\
        </tr></thead>\n\
    ";

    // Skip first row (the headers)
    for (let iRow = 1; iRow < jTbl.length; iRow++) {
      const jRow = jTbl[iRow];
      text += '<tr>';
      text += MakeCell(MakeBlock(jRow[0]));
      text += MakeCell(jRow[1]);
      text += MakeCellAmount(Obj2Html(jRow[2]), '');
      text += MakeCellAmount(Obj2Html(jRow[3]), '');
      text += MakeCell(Obj2Html(jRow[4]));
      text += '</tr>';
    }

    text += '</table>';
    text += '<p>' + AddClass(MakeRef(MakeLinkToOlderBlocks(jTblObj), 'Previous blocks...'), 'more', "title='Previous blocks'") + '</p>';

    text += MakeCollapsibleEnd();

    text += MakeCollapsibleBegin('Asset Distribution');
    const jTbl2Obj = jData['Asset distribution'];
    if (jTbl2Obj) {
      text += Obj2Html(jTbl2Obj);
    }
    text += MakeCollapsibleEnd();

    SetContent(text);
  }

  function MakeTableTxos(jTbl, isInp) {
    let text = "\
      <table class='tableUTXO' border='1' cellspacing='0'>\n\
        <thead><tr>\n\
          <th><span class='th'>Commitment</span></th>\n\
    ";

    if (isInp) { text += "<th><span class='th'>Height</span></th>\n" }
    else { text += "<th><span class='th'>Spent</span></th>\n" }

    text += "\
          <th><span class='th'>Maturity</span></th>\n\
          <th><span class='th'>Extra</span></th>\n\
        </tr></thead>\n\
    ";

    for (let i = 0; i < jTbl.length; i++) {
      let jRow = jTbl[i];
      text += '<tr>';

      text += MakeCell(AddClass(jRow['commitment'], 'commitment', " title='" + jRow['commitment'] + "'"));
      delete jRow.commitment;

      let j = jRow[isInp ? 'height' : 'spent'];

      if (j != null) {
        text += MakeCellRA(MakeBlock(j));
        delete jRow.height;
      } else {
        text += MakeCellRA('');
      }

      j = jRow['Maturity'];
      if (j) {
        text += MakeCellRA(Obj2Html(j));
        delete jRow.Maturity;
      } else {
        text += MakeCellRA('');
      }

      let txtExtra = '';

      j = jRow['Asset'];
      if (j) {
        txtExtra += ' CA [' + j['min'] + '-' + j['max'] + ']';
        delete jRow.Asset;
      }

      j = jRow['type'];
      if (j) {
        txtExtra += ' ' + Obj2Html(j);
        delete jRow.type;
      }

      j = jRow['Value'];
      if (j) {
        txtExtra += ' ' + Obj2Html(j);
        delete jRow.Value;
      }

      text += MakeCell(txtExtra);

      text += '</tr>';
    }
    text += '</table>';
    return text;
  }

  function MakeTblAssets(j) {
    let text = "\
    <table class='tableAssets' border='1' cellspacing='0'>\n\
      <thead><tr>\n\
        <th><span class='th'>Id</span></th>\n\
        <th><span class='th'>Owner</span></th>\n\
        <th><span class='th'>Deposit</span></th>\n\
        <th><span class='th'>Supply</span></th>\n\
        <th><span class='th'>Lock-Height</span></th>\n\
        <th><span class='th'>Metadata</span></th>\n\
      </tr></thead>\n\
    ";

    const jTbl = j['value'];

    // Skip first row (the headers)
    for (let iRow = 1; iRow < jTbl.length; iRow++) {
      const jRow = jTbl[iRow];
      text += '<tr>';
      text += MakeCell(MakeAsset(jRow[0]['value']));
      text += MakeCell(Obj2Html(jRow[1]));
      text += MakeCellAmount(jRow[2]['value']);
      text += MakeCellAmount(jRow[3]['value']);
      text += MakeCellRA(MakeBlock(jRow[4]));
      text += MakeCell(AddClass(jRow[5], 'metadata'));
      text += '</tr>';
    }

    text += '</table>';
    return text;
  }

  function MakeCAs(h) {
    return '<h3>' + MakeRef(UrlSelf('assets', '&height=' + h), 'Confidential Assets at this block height') + '</h3>';
  }

  function DisplayBlock() {
    let text = '';
    const jData = JSON.parse(this.responseText);

    // Display error message if no block was found
    // Remark: The explorer node returns the treasury when no block is found. Here we display an error if height was not explicitely set to 0.
    if (jData['found']===false || (jData['info']===undefined && g_height!='0')) { // Remark: Only the Treasury lacks the 'info' field
      text += "<h2 class='title errorMessage'>Block not found.</h2>";
      SetContent(text);
      return;
    }

    // the returned height may be adjusted
    let jH = jData['h'];
    if (jH != null) { g_height = jH; }

    // Parse "info" section
    let j = jData['info'];

    // If the request included a kernel, get the resulting height
    // (if the requested kernel did no exist, but a height was also given, then the same height will be obtained here)
    if (j && g_kernel) { g_height = j['value'][0][1]['value'] }

    text += "<h2 class='title'>";
    if (g_height > 0) {
      text += AddClass(MakeRef(UrlSelf('hdrs', '&hMax=' + g_height), "<svg width='1em' height='1em'><use href='#list_icon'/></svg>"), 'listOfBlockHeaders', "title='List of blocks up to this one'");
      text += '&nbsp;';
      text += 'Block ' + AddClass(g_height, 'blockHeight');
      text += '&nbsp;';
      text += AddClass(MakeRef(UrlBlock(g_height - 1) + '&adj=-1', "<svg width='1em' height='1em'><use href='#left_icon'/></svg>"), 'previousBlock', "title='Previous block'");
    } else {
      text += 'Treasury';
      text += '&nbsp;';
      text += AddClass("<svg width='1em' height='1em'><use href='#left_icon'/></svg>", 'previousBlock off', "title=''");
    }
    text += AddClass(MakeRef(UrlBlock(g_height - 1 + 2) + '&adj=1', "<svg width='1em' height='1em'><use href='#right_icon'/></svg>"), 'nextBlock', "title='Next block'");
    // If a search was made, add a link to scroll down to the result
    if (g_kernel) { text += AddClass(`&nbsp;<a href='javascript:scrollTo(".rowHighlight","center");' title='Scroll down to the kernel'>Kernel found!</a>`,"scrollToSearchResult"); }
    text += '</h2>';

    if (j) {
      text += MakeCollapsibleBegin('Block Summary');
      text += "<table class='tableSummary' border='1' cellspacing='0'>";
      text += Obj2Html_TableRows(j['value']);
      text += '</table>';
      text += MakeCollapsibleEnd();
    }

    text += MakeCollapsibleBegin('Block content');

    j = jData['inputs'];
    if (j) {
      text += "<h3 class='sub'>Inputs (" + j.length + ")</h3>\n";
      text += MakeTableTxos(j, true);
    }

    j = jData['outputs'];
    if (j) {
      text += "<h3 class='sub'>Outputs (" + j.length + ")</h3>\n";
      text += MakeTableTxos(j, false);
    }

    let jTbl = jData['kernels'];
    if (jTbl) {
      text += "<h3 class='sub'>Kernels (" + jTbl.length + ")</h3>\n";
      text += "\
        <table class='tableKernels' border='1' cellspacing='0'>\n\
          <thead><tr>\n\
            <th><span class='th'>ID</span></th>\n\
            <th><span class='th'>Fee</span></th>\n\
            <th><span class='th'>Height</span></th>\n\
            <th><span class='th'>Extra</span></th>\n\
          </tr></thead>\n\
      ";

      for (let i = 0; i < jTbl.length; i++) {
        let jRow = jTbl[i];

        // Mark the row to be highlighted if the kernel was the one queried
        text += (g_kernel && jRow['id'] == g_kernel) ? "<tr class='rowHighlight'>" : "<tr>";

        text += MakeCell(AddClass(jRow['id'], 'kernelId', " title='" + jRow['id'] + "'"));
        text += MakeCellRA(Obj2Html(jRow['fee']));

        let txtH = '';
        let jH = jRow['minHeight'];
        if (jH) {
          txtH = MakeBlock(jH);
          delete jRow.minHeight;
        } else {
          txtH = '*';
        }

        txtH += '-';

        jH = jRow['maxHeight'];
        if (jH) {
          txtH += MakeBlock(jH);
          delete jRow.maxHeight;
        } else {
          txtH += '*';
        }

        text += MakeCell(txtH);

        delete jRow.id;
        delete jRow.fee;
        text += MakeCell(Obj2Html(jRow));

        text += '</tr>';
      }
      text += '</table>';
    }

    text += MakeCollapsibleEnd();

    j = jData['totals'];
    if (j) {
      text += MakeCollapsibleBegin('Totals');
      text += "<table class='tableTotals' border='1' cellspacing='0'>";
      text += Obj2Html_TableRows(j['value']);
      text += '</table>';
      text += MakeCollapsibleEnd();
    }

    j = jData['assets']; // Is this actually ever returned by the explorer node?...
    if (j) {
      text += MakeCollapsibleBegin('Assets state');
      text += MakeTblAssets(j);
      text += MakeCollapsibleEnd();
    } else text += MakeCAs(g_height);

    SetContent(text);
  }

  function get_CallRows(jRow) {
    if (jRow['type'] != 'group') { return 1 }

    const jInner = jRow['value'];
    let retVal = 0;

    for (let i = 0; i < jInner.length; i++) {
      retVal += get_CallRows(jInner[i]);
    }

    return retVal;
  }

  function CallHistoryAddRow(jRow, depth, numRows) {
    let text = '';

    if (jRow['type'] == 'group') {
      const jInner = jRow['value'];
      for (let i = 0; i < jInner.length; i++) {
        text += CallHistoryAddRow(jInner[i], depth, numRows);
        if (!i) depth++;
      }
    } else {
      text += '<tr>';

      // We use empty cells for subsequent contract calls at same height
      // (all these rows are kept together within a dedicated tbody).
      if (depth == 0) {
        // Display block height for main contract call
        text += MakeCell(MakeBlock(jRow[0]), " class='mainCall'");
      } else {
        // Use an empty cell for subsequent contract calls
        text += MakeCell('', " class='subCall'");
      }

      text += MakeCell(Obj2Html(jRow[1]));
      text += MakeCell(Obj2Html(jRow[2]));
      text += MakeCell(Obj2Html(jRow[3]));
      text += MakeCell(Obj2Html(jRow[4]));
      text += MakeCell(MakeFundsTbl(jRow[5]['value']));
      text += MakeCell(MakeFundsTbl(jRow[6]['value']));
      text += MakeCell(Obj2Html(jRow[7]));

      text += '</tr>';
    }

    return text;
  }

  function MakeCollapsibleBegin(title, variant = '', status = 'open', extra = '') { // Collapsible are open by default
    // Create a details/summary/content combo
    return "\
      <details class='collapsible " + variant + "' " + status + " " + extra + ">\n\
        <summary class='collapsible-label " + variant + "'>" + title + "</summary>\n\
        <div class='collapsible-content " + variant + "'>\n\
    ";
  }

  function MakeCollapsibleEnd() {
    // Close the opened tags
    return '</div></details>\n';
  }

  function MakeLinkToOlderBlocks(jTblObj) {
    // This function uses the information given by the node explorer to go backwards one page of older blocks
    const jMore = jTblObj['more'];
    if (!jMore) { return '' }

    let urlObj = new URL(document.location);
    let args = urlObj.searchParams;

    for (let key in jMore) {
      args.set(key, jMore[key])
    }

    return urlObj.pathname + '?' + args;
  }

  function MakeLinkToNewerBlocks(jTblObj) {
    // Link to go forward one page of newer blocks
    // Temporary hack:
    // The node explorer does not provide (yet?) parameters to move pages forward.
    // Until then, we use the parameter given to go backwards and simply add twice g_nMax to it.
    // This is imperfect, temporary, and -of course- only works for the Block Headers page...
    const jMore = jTblObj['more'];
    if (!jMore) { return '' }

    let urlObj = new URL(document.location);
    let args = urlObj.searchParams;

    for (let key in jMore) {
      if (key == 'hMax') {
        args.set(key, jMore[key] - 0 + g_nMax * 2);
      } else {
        args.set(key, jMore[key]);
      }
    }

    return urlObj.pathname + '?' + args;
  }

  function DisplayContractState() {
    const jData = JSON.parse(this.responseText);
    const jTblObj = jData['Calls history'];
    const jTbl = jTblObj['value'];

    let text = "<h2 class='title'>Contract " + AddClass(g_id, 'cidTitle') + '</h2>\n';

    text += MakeCollapsibleBegin('Call history')
    
    // Display table options
    text += DisplayContractOptions();

    // Display table
    text += "\
      <table class='tableCallHistory' border='1' cellspacing='0'>\n\
        <thead><tr>\n\
          <th><span class='th'>Height</span></th>\n\
          <th><span class='th'>Cid</span></th>\n\
          <th><span class='th'>Kind</span></th>\n\
          <th><span class='th'>Method</span></th>\n\
          <th><span class='th'>Arguments</span></th>\n\
          <th><span class='th'>Funds</span></th>\n\
          <th><span class='th'>Emisison</span></th>\n\
          <th><span class='th'>Keys</span></th>\n\
        </tr></thead>\n\
    ";

    // Skip first row (the headers)
    for (let iRow = 1; iRow < jTbl.length; iRow++) {
      // Multiple contract calls are grouped in dedicated tbodies (HTML tables can have multiple tbodies!)
      text += "<tbody class='contractCall'>";
      text += CallHistoryAddRow(jTbl[iRow], 0, get_CallRows(jTbl[iRow]));
      text += '</tbody>';
    }

    text += '</table>';
    text += '<p>' + AddClass(MakeRef(MakeLinkToOlderBlocks(jTblObj), 'Previous blocks...'), 'more', "title='Previous blocks'") + '</p>';

    text += MakeCollapsibleEnd();

    text += MakeCollapsibleBegin('State');
    text += Obj2Html(jData['State']);
    text += MakeCollapsibleEnd();

    text += MakeCollapsibleBegin('Locked Funds');
    text += Obj2Html(jData['Locked Funds']);
    text += MakeCollapsibleEnd();

    text += MakeCollapsibleBegin('Owned assets');
    text += Obj2Html(jData['Owned assets']);
    text += MakeCollapsibleEnd();

    text += MakeCollapsibleBegin('Version history');
    text += Obj2Html(jData['Version History']);
    text += MakeCollapsibleEnd();

    SetContent(text);
  }

  function DisplayHdrs() {
    const jData = JSON.parse(this.responseText);
    //const jTbl = jData["value"];

    let text = "<h2 class='title'>\n";
    text += 'Block headers';
    text += '&nbsp;';
    text += AddClass(MakeRef(MakeLinkToOlderBlocks(jData), "<svg width='1em' height='1em'><use href='#double_left_icon'/></svg>"), 'olderBlocks', "title='Previous blocks'");
    text += AddClass(MakeRef(MakeLinkToNewerBlocks(jData), "<svg width='1em' height='1em'><use href='#double_right_icon'/></svg>"), 'newerBlocks', "title='Newer blocks'");
    text += '</h2>\n';

    // Display graph and table options
    text += DisplayHdrsOptions();

    // Main table
    text += "<div id='divTableBlocks'>";
    text += Obj2Html(jData);
    text += '</div>';
    text += '<p>' + AddClass(MakeRef(MakeLinkToOlderBlocks(jData), 'Previous blocks...'), 'more', "title='Previous blocks'") + '</p>';

    SetContent(text);

    // Initialize table options
    selectColumns('current'); // Mark checkboxes as per current column selection
    reorderColumns(); // Reorder checkboxes (from localStorage, or in default order)
    defineDraggableElements(); // Make checkboxes draggable
    
    // Force alternate opening of table options and graph collapsibles
    switchCollapsibles();

    // Setup graph options
    setupGraph();
  }

  function switchCollapsibles() { // This function is needed because Chrome 83 does not recognize 'name' in <details>...
    document.querySelectorAll('[name="tableOptionsCollapsibles"]').forEach(details => {
      details.querySelector('summary').addEventListener('click', (e) => { // Add a event listener on each <summary> element
        details = e.target.parentElement;
        if (!details.open) { // Opening one <details> closes all the others
          document.querySelectorAll('[name="tableOptionsCollapsibles"]').forEach(any => { any.open = false; });
          // Remark: The selected <detail> will then naturally be open by the browser!
        }
      });
    });
  }

  function AboutSection() { // Display an 'ABOUT' block
    let text = "<div class='about'>\n";
    text += "<h2 class='title'>About</h2>\n";
    text += "<p class='aboutText'>";
    text += "<b>Beam</b> (<a href='https://beam.mw' target='_blank'>beam.mw</a>) is a privacy-centric blockchain with native confidential assets and smart contracts.\
            It's powered by the innovative <b>Mimblewimble</b> and <b>Lelantus</b> protocols, allowing the creation of a private, yet flexible and scalable blockchain.\
            It's a proof-of-work blockchain, with one-minute blocks, a capped supply of coins and a Bitcoin-like emission schedule.";
    text += "</p>\n";
    text += "<p class='aboutText'>";
    text += "Although amounts are concealed and addresses are not stored onchain, \
            the blockchain explorer shows the <b>'commitments'</b> of all <b>inputs & outputs</b> (UTXOs) of each block. \
            They are dissociated of the individual transactions, whose <b>'kernels'</b> can also be seen within each block.";
    text += "</p>\n";
    text += "<p class='aboutText'>";
    text += "Beam's native <b>Confidential Assets</b> (or 'privacy tokens') are also listed, with their complete mint and burn history. \
            The <b>Smart Contracts</b> history is available too, with details of all their calls (although their users remain confidential).";
    text += "</p>\n";
    text += "<p class='aboutText'>";
    text += "This app is an interactive web display of the data queried to a Beam explorer node \
            (selected from a <a href='javascript:openNodeSelection();' title='Show list of explorer nodes'>predefined list</a>).\
            The whole thing is held in <b>one single HTML file</b>, written in vanilla HTML/JS/CSS and with no external dependencies. \
            You can see and save the <a href='view-source:" + window.location.href.split('?')[0] + "' target='_blank'>source HTML</a> file using CTRL-U or CMD-U, and then simply open it locally with any modern browser. The source code is also available on <a href='https://github.com/BeamMW/beam/blob/master/explorer/htm/BeamExplorer.htm' target='_blank'>Github</a>.";
    text += "</p>\n";
    text += "<p class='aboutDisclaimer'>";
    text += "Disclaimer: This is an experimental work-in-progress. It is provided AS-IS, with no warranties whatsoever.";
    text += "</p>\n";
    text += "</div>";

    return text;
  }

  function DisplayStatus() {
    const jData = JSON.parse(this.responseText);

    let text = "<h2 class='title'>Blockchain status</h2>";
    text += "<div class='divTableStatus'>"; // Class added to avoid adding filters to these specific tables...
    text += Obj2Html(jData);
    text += '</div>';

    // Add an "About" text below the Blockchain Status table
    text += AboutSection();

    SetContent(text);
  }

  function DisplayAssets() {
    const jData = JSON.parse(this.responseText);

    let text = "<h2 class='title'>\n";
    if (g_height) {
      text += 'Confidential Assets at block height ' + MakeBlock(g_height);
      text += '&nbsp;';
      if (g_height > 1) {
        text += AddClass(MakeRef(UrlSelf('assets', '&height=' + (g_height - 1)), "<svg width='1em' height='1em'><use href='#left_icon'/></svg>"), 'previousBlock', "title='Previous block'");
      } else {
        text += AddClass("<svg width='1em' height='1em'><use href='#left_icon'/></svg>", 'previousBlock off', "title=''");
      }
      text += AddClass(MakeRef(UrlSelf('assets', '&height=' + (g_height - 1 + 2)), "<svg width='1em' height='1em'><use href='#right_icon'/></svg>"), 'nextBlock', "title='Next block'");
    } else {
      text += 'Current Confidential Assets';
    }
    text += '</h2>\n';

    // Display table options
    text += DisplayAssetsOptions();

    // Display table
    text += MakeTblAssets(jData);

    SetContent(text);
  }

  function DisplayHistoricalBlocks() {
    let text = "<h2 class='title'>Special historical blocks in Beam's mainnet</h2>";
    text += "\
      <table class='tableHistoricalBlocks' border='1' cellspacing='0'>\n\
        <thead><tr>\n\
          <th><span class='th'>Height</span></th>\n\
          <th><span class='th'>Description</span></th>\n\
        </tr></thead>\n\
    ";

    for (let obj of specialBlocks) {
      text += '<tr>';

      let blocks = '';
      if ('block_list' in obj) {
        for (let i in obj.block_list) {
          blocks += MakeBlock(obj.block_list[i]) + '<br>';
        }
      }
      if ('block_range' in obj) {
        blocks += MakeBlock(obj.block_range[0]) + '<br>to ' + MakeBlock(obj.block_range[1]);
      }
      text += MakeCellRA(blocks);

      let desc = '';
      if (obj.title) { desc += MakeCollapsibleBegin(obj.title, 'special'); }
      if (obj.description) { desc += AddClassDiv(obj.description, 'specialBlock_Description') }
      if (obj.links) {
        for (let link of obj.links) { desc += AddClassDiv(link[0] + '&nbsp;: ' + MakeRef(link[1], link[1], '_blank'), 'specialBlock_Link') }
      }
      if (obj.title) { desc += MakeCollapsibleEnd() }
      text += MakeCell(desc);

      text += '</tr>';
    }
    text += '</table>';

    SetContent(text);
  }
</script>

<!-- ************ SECTION 5 - MAIN JS CODE ************ -->
<script> // ADDITIONAL GLOBAL VARIABLES

  // Array of codes, graph colors, old/new names and descriptions for the Block Header columns
  // (columns with 'undefined' color won't be displayable as graphs)
  const columnDefaultOrder = "NTHgGdDfFkKiIoOuUyYzZbBpPcCaA"; // Without "t" (which is redundant with "g")
  const columnDefaultDisplay = "THdfkioyzp";
  const columnHeaders = [
    { code: "h", color: "#000000", original: "Height", title: "Height", description: "Block height" }, // Remark: The code here is useless as this is always the default first column
    { code: "H", color: undefined, original: "Hash", title: "Hash", description: "Block hash" },
    { code: "N", color: "#7d7d7d", original: "Number", title: "Number", description: "Block number (in pBFT chains)" }, // Only available for pBFT chains
    //{ code: "t", color: "#bf3c3c", original: "d.Time", title: "Time", description: "Block duration (in seconds)" }, // Redundant with "g"
    { code: "T", color: undefined, original: "Timestamp", title: "Timestamp", description: "Block timestamp (UTC)" },
    { code: "g", color: "#bf3c3c", original: "d.Age", title: "Duration", description: "Block duration (in seconds)" },
    { code: "G", color: "#d67a7a", original: "Age", title: "Age", description: "Block age since genesis (in seconds)" },
    { code: "d", color: "#008484", original: "Difficulty", title: "Difficulty", description: "Block difficulty in PoW chains (or dynamic trimming of empty blocks in pBFT chains)" },
    { code: "D", color: "#00bdbd", original: "Chainwork", title: "Chainwork", description: "Total difficulty since genesis" },
    { code: "f", color: "#7b00b0", original: "Fee", title: "Fees", description: "Block fees (in Beams)" },
    { code: "F", color: "#8660d7", original: "T.Fee", title: "Total fees", description: "Total fees since genesis (in Beams)" },
    { code: "k", color: "#ff0080", original: "Txs", title: "Txs", description: "Number of transactions (kernels) in the block" },
    { code: "K", color: "#ff79bc", original: "T.Txs", title: "Total txs", description: "Total number of transactions (kernels) since genesis" },
    { code: "i", color: "#006400", original: "MW.Inputs", title: "MW in", description: "Number of Mimblewimble inputs in the block" },
    { code: "I", color: "#00bb00", original: "T.MW.Inputs", title: "Total MW in", description: "Total number of Mimblewimble inputs since genesis" },
    { code: "o", color: "#ff0006", original: "MW.Outputs", title: "MW out", description: "Number of Mimblewimble outputs in the block" },
    { code: "O", color: "#ff5e5e", original: "T.MW.Outputs", title: "Total MW out", description: "Total number of Mimblewimble outputs since genesis" },
    { code: "u", color: "#808000", original: "MW.Utxos", title: "MW UTXOs", description: "Change in the number of unspent Mimblewimble UTXOs (i.e. block outputs minus inputs)" },
    { code: "U", color: "#bdb76b", original: "T.MW.Utxos", title: "Total MW UTXOs", description: "Total number of unspent Mimblewimble UTXOs in the blockchain" },
    { code: "y", color: "#0000e3", original: "SH.Inputs", title: "SH in", description: "Number of block inputs from the Lelantus Shielded Pool" },
    { code: "Y", color: "#4f4fff", original: "T.SH.Inputs", title: "Total SH inputs", description: "Total number of inputs from the Lelantus Shielded Pool since genesis" },
    { code: "z", color: "#804040", original: "SH.Outputs", title: "SH out", description: "Number of block outputs sent to the Lelantus Shielded Pool" },
    { code: "Z", color: "#b87272", original: "T.SH.Outputs", title: "Total SH out", description: "Total number of outputs sent to the Lelantus Shielded Pool since genesis (i.e. total number of Shielded UTXOs)" },
    { code: "b", color: "#5a3362", original: "Contracts", title: "New contracts", description: "Number of Smart Contracts deployed in the block" },
    { code: "B", color: "#a66ab3", original: "T.Contracts", title: "Total contracts", description: "Total number of Smart Contracts deployed since genesis" },
    { code: "p", color: "#ce00ce", original: "ContractCalls", title: "Contract calls", description: "Number of Smart Contract calls in the block" },
    { code: "P", color: "#ff53ff", original: "T.ContractCalls", title: "Total contract calls", description: "Total number of Smart Contract calls since genesis" },
    { code: "c", color: "#004080", original: "D.Size.Compressed", title: "Size variation", description: "Blockchain size increase or decrease (in bytes)" },
    { code: "C", color: "#6d92c2", original: "Size.Compressed", title: "Total size", description: "Total blockchain size (in bytes)" },
    { code: "a", color: "#009d27", original: "D.Size.Archive", title: "Archive size", description: "Block size (in bytes) if its spent Mimblewimble UTXOs were kept" },
    { code: "A", color: "#00d535", original: "Size.Archive", title: "Total archive size", description: "Total blockchain size (in bytes) if all its spent Mimblewimble UTXOs were kept" }
  ];

  // Array of objects listing the special historical blocks.
  // Remarks:
  // - Description should contain links to interesting explorer pages.
  // - External links are provided afterwards.
  // - "block_list" is used for a one or several individual blocks, "block_range" for all blocks between two.
  // - The list can be completed with important tokens, first atomic swap, important smart contracts (Nephrite, DEX, Oracle, etc.).
  const specialBlocks = [
    {
      block_list: [0],
      title: 'Treasury',
      description: "Beam emission schedule is inspired by Bitcoin's, but with 10 times more blocks (1 block per minute). The first halving occured after 1 year, and the following ones every 4 years. The total supply is 262,800,000 Beam. <b>For the first 5 years, 20% of the block rewards were sent to a Treasury</b>, that the <b>Beam Foundation</b> used to repay investors and fund development.<br>This <a href='?network=mainnet&type=treasury' title='Treasury'>Treasury</a> is also represented in the explorer as a <a href='?network=mainnet&type=block&height=0' title='Treasury as block height 0'>pseudo-block at height 0</a>, that contains pre-allocated UTXOs. Each UTXO corresponds to a particular allocation, and has an appropriate 'maturity' (which is the block height after which it can be spent). As usual, UTXOs amounts and their owners are concealed. However those UTXOs are arranged in groups of identical validity, and the blockchain source code contains a proof that allows verifying the total value of the group. That way, it's possible to verify how much value was released at each height. Since the treasury plan lasted 5 years, with UTXOs maturing each month (i.e. every 43,800 blocks), we can see <a href='?network=mainnet&type=treasury' title='List Treasury UTXOs'>60 such groups</a>.",
      links: [
        ['Beam emission schedule', 'https://medium.com/beam-mw/mimblewimble-emission-schedule-215551948259'],
        ['Beam Foundation', 'https://www.beam-foundation.org'],
        ['Treasury checksum', 'https://github.com/BeamMW/beam/blob/master/core/block_crypt.cpp#L2120']
      ]
    },
    {
      block_list: [1],
      title: 'Genesis block',
      description: "The Beam project started in March 2018 and the first medium post introducing Beam to the world was published on July 19<sup>th</sup> 2018 (exactly two years after the original Mimblewimble paper was published!). After nine and a half months of development, <b>Beam launched the first ever Mimblewimble-based confidential cryptocurrency</b> on <a href='?network=mainnet&type=block&height=1' title='Genesis block'>January 3<sup>rd</sup> 2019</a> (which was also the 10-year anniversary of Bitcoin genesis block!). There was no pre-mine nor ICO, and the Beam mainnet launched with 0 coins in existence (to prove that there was no pre-mine, Beam's genesis block lists the hash of Bitcoin's block 556833, mined on 2019–01–03 12:46:37 GMT, as previous block hash).",
      links: [
        ['Original Mimblewimble paper', 'https://download.wpsoftware.net/bitcoin/wizardry/mimblewimble.txt'],
        ['First Beam Medium post', 'https://medium.com/beam-mw/introducing-beam-f35096a923ec'],
        ['Bitcointalk announcement', 'https://web.archive.org/web/20200506044733/https://bitcointalk.org/index.php?topic=5052151'],
        ['Mainnet launch', 'https://medium.com/beam-mw/mimblewimble-mainnet-release-notes-8766e49e241d'],
        ["Bitcoin's hash in Beam's genesis block", 'https://github.com/BeamMW/beam/blob/92bbc3137dfeb186a99935c3436c03871c188234/core/block_crypt.cpp#L2045']
    ]
    },
    {
      block_list: [159, 160],
      title: 'The fastest blocks on Earth',
      description: "On January 3<sup>rd</sup> 2019, about one hour and half after the genesis block, a rare event occured: the <a href='?network=mainnet&type=hdrs&cols=THkioyz&hMax=160&nMax=8'>two consecutive blocks 159 and 160</a> were mined <b>within the same second!</b> A similar event will occure again a few times after that (example with <a href='?network=mainnet&type=hdrs&cols=THkioyz&hMax=25709&nMax=8'>blocks 25708 and 25709</a>). Indeed, the event is possible, but quite unlikely. Neglecting all other factors (like the time needed to assemble a block, or the minimal cycle time for a single PoW solution search) and considering that the mining process has a Poisson distribution, then the probability to mine a block in 1 second is 1-e^(-1/60) = 0.016. However, this particular case could also be due to block times being inaccurate, or to different miners having deviations in their time settings. Because small deviations are effectively allowed. It is even explicitely allowed to have time stamps coming in reverse order...",
      links: [['Poisson distribution', 'https://en.wikipedia.org/wiki/Poisson_distribution']]
    },
    {
      block_range: [25709, 25820],
      title: 'Blockchain Stop Event',
      description: "On January 21<sup>st</sup> 2019, the Beam blockchain stopped producing blocks at <a href='?network=mainnet&type=hdrs&cols=THkioyz&hMax=25711&nMax=6'>block 25709</a>. Beam developers immediately looked into it and released a hot fix a few hours later. No blocks were produced <a href='?network=mainnet&type=hdrs&cols=THkioyz&hMax=25711&nMax=6'>for 2.5 hours</a>, and no transactions (except for the coinbase) were processed for <a href='?network=mainnet&type=hdrs&cols=THkioyz&hMax=25822&nMax=120' title='Block headers over the whole period'>112 blocks</a>, until blocks <a href='?network=mainnet&type=block&height=25820'>25820</a> and <a href='?network=mainnet&type=block&height=25822'>25822</a> processed all the pending ones. No funds were lost.",
      links: [['Postmortem analysis', 'https://medium.com/beam-mw/mimblewimble-blockchain-stop-event-postmortem-21012019-9a7ef38b2813']]
    },
    {
      block_list: [321321],
      title: 'First Hard-Fork',
      description: "Beam's first hard-fork was performed as announced in the roadmap. The PoW algorithm was updated from <b>BeamHash I</b> to <b>BeamHash II</b>, which are upgrades from the vanilla Equihash on which they are based. Beam's strategy with these planned changes of the mining algorithm was to give GPU miners a head start, and then allow cheap ASICs to join in without disrupting the mining ecosystem.<br>After this hard-fork, a drop in block difficulty was observed as not all miners performed a timely upgrade. However, after <a href='?network=mainnet&type=hdrs&cols=THdkioyz&hMax=322327&nMax=1010' title='Block headers of the 17 hours after the hard-fork'>less than 24 hours</a>, the block difficulty had gone back to its pre-fork value.",
      links: [['Medium post', 'https://medium.com/beam-mw/mimblewimble-hard-fork-first-completed-1171f9642e51']]
    },
    {
      block_list: [525600, 525601],
      title: 'First Halving',
      description: "As planned in the emission schedule, the <b>first halving</b> happened on January 5<sup>th</sup> 2020, about one year after the mainnet launch (60 minutes x 24 hours x 365 days = 525,600 blocks). This early first halving allowed to sync with Bitcoin's halving rythnm. Until then, the block reward was of 100 BEAM (80 for the miners and 20 for the treasury). After this first halving, the block reward was cut down to 50 BEAM (40 for the miners and 10 for the treasury). The next halvings are now happenning every 4 years (i.e. every 2,102,400 blocks).",
      links: [['Substack post', 'https://beamprivacy.substack.com/p/beam-2020-week-1-happy-halving']]
    },
    {
      block_list: [777777],
      title: 'Second Hard-Fork',
      description: "Beam's second hard-fork was performed as announced in the roadmap. The PoW algorithm was updated from <b>BeamHash II</b> to <b>BeamHash III</b>, which is the final version in the planned strategy to balance GPU and ASIC mining. This hard-fork also saw the activation of the <a href='?network=mainnet&type=assets'><b>Confidential Assets</b></a> (sometimes also called 'Privacy Tokens', and which were introduced in the first hard-fork but kept inactive) and the release of the <b>Lelantus-MW protocol</b> and its associated <b>one-side payments</b> (also known as <b>offline transactions</b>).",
      links: [
        ['Medium post', 'https://medium.com/beam-mw/hard-fork-completed-72e8f1edb10b'],
        ['BeamHash III presentation', 'https://docs.beam.mw/Beam_Hash_III_Slides.pdf'],
        ['BeanHass III video', 'https://www.youtube.com/watch?v=WC3aCWCWxB4']
      ]
    },
    {
      block_list: [778579],
      title: 'First Lelantus-MW transaction',
      description: "<b>Lelantus</b> is an exciting protocol for private financial transactions, first published in December 2018. It was initially developed for Firo (ex-ZCoin), but Beam core dev managed to adapt it to Mimblewimble, thanks to its use of similar cryptographic primitives. Contrary to Mimblewimble's 'interactive transactions' (also called <b>online transactions</b>, because both wallets need to come online within a 12-hour window to complete the transaction), Lelantus transactions (also called <b>offline transactions</b>) send the coins to a <b>Shielded Pool</b> where they are mixed with other coins (thus creating <b>an anonymity set that can grow up to 64k!</b>), and where the receiver wallet can retreive them later on.",
      links: [
        ['Lelantus paper', 'https://lelantus.io/lelantus.pdf'],
        ['Lelantus-MW adaptation', 'https://github.com/BeamMW/beam/wiki/Lelantus-MW']
      ]
    },
    {
      block_list: [778857],
      title: 'First input UTXO from a Shielded Pool',
      description: "After a few transactions filling the <b>Lelantus Shielded Pool</b> with UTXOs, block <a href='?network=mainnet&type=block&height=778857' title='Block details'>778857</a> saw the first use of one of these UTXOs as an input to a normal Mimblewimble transaction. We cannot know which one of the shielded UTXOs it was. However, as can be seen in the <a href='?network=mainnet&type=block&height=778857' title='Block details'>block details</a>, the Shielded Pool at the time only contained 8 UTXOs, so its anonymity set was still quite low. Now, as the UTXOs from the Shielded Pool are never removed from the blockchain (there is no 'cut-through' for them, contrary to the Mimblewimble ones), its anonymity set keeps increasing linearly as people use Lelantus transactions. The current anonymity set is thus the total number of Shielded outputs produced up until now (as given in the <a href='?network=mainnet&'>Blockchain Status</a>).",
      links: null
    },
    {
      block_list: [780219],
      title: 'Creation of the first Confidential Asset',
      description: "Two days after the second hard-fork, the <b>first Confidential Asset (with id:1)</b> was <a href='?network=mainnet&type=block&height=780219'>created</a>. Although it has changed named since then, and seems to be <a href='?network=mainnet&type=asset&id=1'>inactive today</a>, this first Confidential Asset was actually a draft for the subsequent <a href='?network=mainnet&type=asset&id=9'>Tico coin (id:9)</a> which has been quite successful as <b>the first confidential meme coin</b>, with its fair, fun and feathered initial distribution!<br>As can be seen in the <a href='?network=mainnet&type=block&height=2893306' title='Example in block 2893306'>block details</a> of any block, the transactions of confidential assets are as private as Beam transactions (i.e. no amount and no addresses are visible), and the wallet submitting the transaction can even make them undistinguishable from Beam transactions themselves (the id of the transacted asset being shown as belonging to a [0-63] range, with id:0 being Beam itself)!<br>As of today, <a href='?network=mainnet&type=assets'>several confidential assets</a> have been created (including the 'AMML' ones, created by the DEX smart contract to represent the shares of its Liquidity Pools). Confidential assets have an <b>unlimited supply</b> when created through CLI (the owner wallet or contract can mint as many as needed), or a <b>hard-capped max supply</b> when created through the <a href='?network=mainnet&type=contract&id=295fe749dc12c55213d1bd16ced174dc8780c020f59cb17749e900bb0c15d868' title='Smart contract call history'>Beam Asset Minter</a>.",
      links: [
        //["Tico website","https://www.ticotip.me"],
        ["Tico's first anniversary", 'https://ticotipme.substack.com/p/tico-turns-1'],
        ['Tico Telegram group', 'https://t.me/ticotipme']
      ]
    },
    {
      block_list: [1280000],
      title: 'Third Hard-Fork (and wallet v6.0)',
      description: "This hard-fork brought the addition of the <b>Beam Virtual Machine (BVM)</b> as an infrastructure to create <b>Smart Contracts</b> (a.k.a. 'Shaders'), thus making Beam <b>the first privacy coin with smart contracts capabilities!</b><br>BVM smart contracts can be written in any WebAssembly compatible language (such as C++, Rust, Go, etc.) and are composed of two elements: the blockchain side (running on Beam nodes) and the wallet side (running in Beam wallet, together with the DApp front ends). This separation of chain-side and client-side logics allows very powerful and flexible applications.<br>Beam smart contracts are <b>transparent by default</b>, which means that <a href='?network=mainnet&type=contracts'>we can see their state and their activity</a>. Nevertheless, <b>the users remain anonymous</b>, as their interactions with the smart contracts are based on normal confidential Beam transactions. With this approach, Beam's DeFi manages to provide 'efficient' markets (e.g. where we can see what is bought and sold) while still protection its users' privacy (e.g. we cannot see who buys and sells!).<br>By allowing such <b>privacy-preserving smart contract capabilities</b>, this hard-fork opened the doors to Beam becoming not only <b>a powerful 'Privacy DeFi' (PriFi) platform</b> but indeed a general-purpose <b>infrastructure for anything in Confidential Web3</b>!",
      links: [
        ['Medium post', 'https://medium.com/beam-mw/hard-fork-completed-1608eb5ce439'],
        ['Beam smart contracts introduction', 'https://github.com/BeamMW/shader-sdk/wiki/Beam-Smart-Contracts'],
        ['Smart contracts documentation', 'https://beamx.gitbook.io/developer-documentation/beam-shaders'],
        ['Some insights on the design', 'https://medium.com/beam-mw/beams-smart-contract-design-insights-from-the-lead-developer-df2aeabf02c4']
      ]
    },
    {
      block_list: [1280003],
      title: 'Deployment of the first Smart Contract',
      description: "A few minutes after the third hard-fork, <b>the first smart contract</b> was deployed in block <a href='?network=mainnet&type=block&height=1280003' title='Block details'>1280003</a>. The contract is a simple <a href='?network=mainnet&type=contract&id=3fdd4171972875e0ac8f0131b3da047e8323cc9c2c8d53327be427c455d2a716' title='Smart contract call history'>faucet</a> where people can deposit Beam coins so that any wallet can then get a small amount of it. Due to Beam's low transaction fees, this small amount is already enough for several transactions. Such a faucet is intended to help newcomers discovering the wallet for the first time, even if they don't have any Beam in it yet.<br>Since then, several other smart contracts have been developed, and the list of <a href='?network=mainnet&type=contracts' title='List of all deployed smart contracts'>all deployed smart contracts</a> can be seen in the explorer, with the details of the call history for each of them, including the calls to each other, in interesting and powerful sequences (like <a href='?network=mainnet&type=contract&id=b8944fd3f6a62697a89b2a55acd1cb2e3893dadece99569706efa1da847dd440' title='Smart contract call history'>Nephrite</a>, the confidential stable coin, interacting with both the <a href='?network=mainnet&type=contract&id=4f160f01dcc6751e61d793279b803328d5332125fe8492e93ee8f3bfe9abe13b' title='Smart contract call history'>Oracle</a> and the <a href='?network=mainnet&type=contract&id=0066b12078623df132b691001b25d7eb94b207b42c018020c9e58152e21ecd25' title='Smart contract call history'>DAO Vault</a>).",
      links: [['Examples of smart contracts', 'https://github.com/BeamMW/beam/tree/master/bvm/Shaders']]
    },
    {
      block_list: [1464852],
      title: 'BeamX creation',
      description: "The <b>BeamX</b> confidential asset (<a href='?network=mainnet&type=asset&id=7' title='See history of Confidential Asset id:7'>with id:7</a>) is <b>the governance token of the 'BeamX DAO'</b> towards which the <b>Beam Foundation</b> is now transitioning. Its 100,000,000 units were minted all at once by the <a href='?network=mainnet&type=contract&id=3f3d32e38cb27ac7b5b67343f81cf2f8bc53217eb995cc6c5d78ddc5e7b0642b' title='Smart contract call history'>DAO Core</a> smart contract, which would later distribute these units over a period of 4 years according to a predefined schedule. Part of the BeamX supply is reserved for liquidity incentives towards Beam's DeFi ecosystem (staking campaigns, liquidity provider rewards, etc.).",
      links: [
        ['The BeamX DAO', 'https://www.beamxdao.org'],
        ['The BeamX token', 'https://medium.com/beam-mw/introducing-beamx-privacy-by-default-maximum-confidentiality-defi-ecosystem-629670b905ba']
      ]
    },
    {
      block_list: [1466501],
      title: 'Start of the first BeamX staking campaign',
      description: "A first 3-month (131,400 blocks) staking campaign was launched to let users <b>earn BeamX rewards by locking their Beam coins</b>. 1,000,000 BEAMX tokens (1% of the total supply) were distributed this way, and people started staking Beam right after launch, on block <a href='?network=mainnet&type=contract&id=3f3d32e38cb27ac7b5b67343f81cf2f8bc53217eb995cc6c5d78ddc5e7b0642b&hMax=1466501&hMin=1464852&nMaxTxs=2000' title='List of deposits into the staking smart contract at block 1466501'>1466501</a>. Although the campaign ended a long time ago, we can see in the 'Locked Funds' section of the contract details that the <a href='?network=mainnet&type=contract&id=3f3d32e38cb27ac7b5b67343f81cf2f8bc53217eb995cc6c5d78ddc5e7b0642b&' title='Smart contract call history'>DAO Core</a> contract still holds many Beams that users have not claimed back yet!... Are they yours? ;-)",
      links: [
        ['First BeamX reward campaign', 'https://medium.com/@beam_privacy/heres-everything-you-need-to-know-to-prepare-for-beam-staking-108eef344f7d'],
        ['Details on the campaign', 'https://medium.com/beam-mw/beamers-hodlers-beam-staking-is-coming-513bd196af57']
      ]
    },
    {
      //block_list: [1790000],
      block_list: [1820000],
      title: 'Fourth Hard-Fork (and wallet v7.0)',
      description: "This hard-fork introduced <b>'High-Frequency Transactions' (HFTX)</b> on both node and wallet sides, and <b>IPFS storage integration</b> on the wallet side. HFTX improve resistance to MEV, front-running and sandwich attacks by defining strict inclusion rules for transactions, thus protecting users from unwanted outcomes (as the submitted transactions can only be included into a block in their exact specific sequence).<br>On the wallet side, the IPFS integration allows storing data (such as NFTs) efficiently in a decentralized manner while reducing blockchain bloat. Thus, every Beam wallet today is at the same time a <b>blockchain node</b> (to submit transactions and verify blocks), an <b>SBBS node</b> (to allow secure communication between wallets), and an <b>IPFS node</b> (to allow decentralized storage, including for DApp front ends distribution).<br>This Hard Fork went smoothly and the difficulty remained fairly stable.",
      links: [
        ['Medium post', 'https://medium.com/beam-mw/beam-hard-fork-completed-903ce2b15b51'],
        ['BIP-1 and BIP-2 results', 'https://medium.com/beam-mw/beam-bip-1-bip-2-results-229d8289f54d']
      ]
    },
    {
      block_list: [1920000],
      title: 'Fifth Hard-Fork (and wallet v7.1)',
      description: "As discussed on the Beam Forum, this hard-fork reduced the issuance cost of Confidential Assets from 3000 to 10 BEAM only. The result can be seen, starting with CA id:8, in <a href='?network=mainnet&type=assets&height=1981005' title='List of Confidential Assets'>the CAs being created</a> (or re-created, for the older ones) after the fork</a>. The hard-fork also added smart contracts enhancements allowing them to verify fork heights (to support fork-dependent features). On the wallet side, DApp support for the <a href='?network=mainnet&type=contract&id=af4550f1f8a6051ffeffea06e0cb978f8076fdfc2101d2273d4e62c86540bc5e' title='Smart contract call history'>BANS</a> (Beam Anonymous Name System) was improved.",
      links: [
        ['Announcement', 'https://medium.com/beam-mw/beam-hard-fork-announcement-3e999dfba178'],
        ['Forum post for BIP-1', 'https://forum.beam.mw/t/bip-1-reduce-ca-minting-cost/116']
      ]
    },
    {
      block_list: [2272779],
      title: 'Blockchain incident',
      description: "On May 2023, the Beam <b>blockchain stopped producing blocks</b> for <a href='?network=mainnet&type=hdrs&hMax=2272781&nMax=4&cols=THkioyzp' title='Blockchain stop for 103 minutes'>103 minutes</a>. After watching carefully the blockchain activity, the core team managed to identify and correct the problem (which was due to an incorrect sorting of the kernels). All pending transactions were recorded on block <a href='?network=mainnet&type=block&height=2272781' title='Blockchain stop for 103 minutes'>2272781</a>. No funds were lost.",
      links: [['Incident analysis', 'https://medium.com/beam-mw/beam-blockchain-incident-analysis-hotfix-for-minor-stoppage-cb96009b8097']]
    },
    {
      block_list: [2628000, 2628001],
      title: 'Second Halving & End of the 5-year treasury allocation',
      description: "The second halving came shortly after the <b>5-year anniversary of the Beam blockchain</b>, in January 2024. It reduced the block rewards from 50 BEAM (block <a href='?network=mainnet&type=block&height=2628000'>2628000</a>) to 25 BEAM (block <a href='?network=mainnet&type=block&height=2628001'>2628001</a>).<br>This halving also saw the <a href='?network=mainnet&type=block&height=0' title='Treasury'>end of the 5-year treasury allocation</a>: from then on, 100% of the block rewards go to the miners. However, even without treasury allocation, the project is still funded as the <a href='?network=mainnet&type=contract&id=0066b12078623df132b691001b25d7eb94b207b42c018020c9e58152e21ecd25' title='Smart contract call history'>DAO Vault</a> receives a share of fees from several DApps of the <b>BeamX ecosystem</b> (DEX, Nephrite, BANS, etc.).",
      links: [['The 5-year recap', 'https://medium.com/beam-mw/celebrating-beams-5th-anniversary-kick-off-2024-with-beam-wallet-7-5-f5f3cb54e30f']]
    },
  ];

  // Get URL parameters
  const URLparams = new URL(document.location).searchParams;
  let g_network = URLparams.get('network'); // Should be one of those defined in global variable 'explorerNodes'
  let g_type = URLparams.get('type'); // Remark: We add two URL 'types' not used by the explorer node ("historical" and "treasury")
  let g_id = URLparams.get('id'); // Used for type=asset & contract
  let g_height = URLparams.get('height'); // Used for type=block & blocks & assets
  let g_kernel = URLparams.get('kernel'); // Used for type=block
  let g_hMin = URLparams.get('hMin'); // Used for type=asset & contract
  let g_hMax = URLparams.get('hMax'); // Used for type=asset & contract & hdrs
  //let g_n = URLparams.get('n'); // Used for type=blocks
  let g_nMax = URLparams.get('nMax'); // Used for type=hdrs
  let g_nMaxOps = URLparams.get('nMaxOps'); // Used for type=asset
  let g_nMaxTxs = URLparams.get('nMaxTxs'); // Used for type=contract
  let g_cols = URLparams.get('cols'); // Used for type=hdrs
  let g_dh = URLparams.get('dh'); // Used for type=hdrs

  // If no parameter was given in the URL, then we look in localStorage.
  // If nothing is there either, then we set the default values.
  // Remark: All these global variables will thus be defined (even if only with '')
  if (!g_height) { g_height = '' } // We don't store this one in localStorage. It's either in the URL or empty.
  if (!g_hMin) { g_hMin = '' } // We don't store this one in localStorage. It's either in the URL or empty.
  if (!g_hMax) { g_hMax = '' } // We don't store this one in localStorage. It's either in the URL or empty.
  //if (!g_n) { g_n = localStorage.getItem('g_n') }
  //if (!g_n) { g_n = 1 }
  if (!g_nMax) { g_nMax = localStorage.getItem('g_nMax') }
  if (!g_nMax) { g_nMax = 100 }
  if (!g_nMaxOps) { g_nMaxOps = localStorage.getItem('g_nMaxOps') }
  if (!g_nMaxOps) { g_nMaxOps = 100 }
  if (!g_nMaxTxs) { g_nMaxTxs = localStorage.getItem('g_nMaxTxs') }
  if (!g_nMaxTxs) { g_nMaxTxs = 100 }
  if (!g_cols) { g_cols = localStorage.getItem('g_cols') } // CHANGE NAME?
  if (!g_cols) { g_cols = columnDefaultDisplay; }
  if (!g_dh) { g_dh = localStorage.getItem('g_dh'); }
  if (!g_dh) { g_dh = 1 }

</script>

<script> // UPDATE DISPLAY WITH AVAILABLE NETWORKS AND EXPLORER NODES

  // Define default explorer nodes to query
  let g_defaultNodes;
  try { // Try to read list from local storage (getItem returns 'null' if the variable doesn't exist)
    g_defaultNodes = JSON.parse(localStorage.getItem('g_defaultNodes'));
  } catch (error) { // In case of any parsing error, also set the variable to 'null'
    g_defaultNodes = null;
  }
  // If the variable doesn't exist or is not a literal object, then we set it with the default nodes
  if (g_defaultNodes === null || g_defaultNodes.constructor !== Object) {
    g_defaultNodes = {};
    for (let network in explorerNodes) {
      g_defaultNodes[network] = explorerNodes[network][0]; // First node is used as default one
    }
  // If the variable exists, then we thoroughly verify that its content is valid (authorized networks and nodes)
  } else {
    // First we remove any network that is not authorized
    for (let network in g_defaultNodes) {
      if (explorerNodes[network] === undefined) {
        delete g_defaultNodes[network]; 
      }
    }
    // If a network is missing, or if the node given for it is unknown, then we set the network with its default node
    for (let network in explorerNodes) {
      if (g_defaultNodes[network] === undefined || !explorerNodes[network].includes(g_defaultNodes[network])) {
        g_defaultNodes[network] = explorerNodes[network][0]; // First node is used as default one
      }
    }
  }
  // Save in local storage
  localStorage.setItem('g_defaultNodes',JSON.stringify(g_defaultNodes));

  // Fill the network selection dropdown and the popup network list
  let nodesList = "";
  let networkOptions = "";
  for (let network in explorerNodes) {
    // Create new option for the dropdown
    networkOptions += '<option value="' + network + '">' + network + '</option>';
    // Add nodes to the popup list
    nodesList += '<div class="nodeSelectionText">' + network + ' :</div>';
    let nodes = explorerNodes[network];
    for (let i = 0; i < nodes.length; i++) {
      let node = nodes[i];
      let id = network + ' node ' + i;
      nodesList += '<input type="radio" id="' + id + '" class="nodeSelectionRadio" name="' + network + '" value="' + node + '">';
      nodesList += '<label for="' + id + '" class="nodeSelectionURL">' + node + '</label><br>';
      // Remark: All radios start unchecked. Radios of default nodes will be checked at popup opening.
    }
  }
  // Add the elements to HTML
  document.getElementById('NodeSelectionList').innerHTML = nodesList;
  document.getElementById('NetworkSelect').innerHTML = networkOptions;

  // Get the node URL to query for the requested network
  let urlPrefix = g_defaultNodes[g_network];
  // If the requested network in the URL was not found, then default to 'mainnet'
  if (urlPrefix === undefined) {
    g_network = 'mainnet';
    urlPrefix = g_defaultNodes['mainnet'];
  }

  // Put the current network in all links
  const encodedNetwork = encodeURIComponent(g_network);
  document.querySelectorAll('a[href]').forEach(link => {
    const href = link.getAttribute('href');
    if (href.includes('$network')) {
      link.href = href.replace(/\$network/g, encodedNetwork); // Using regexp because replaceAll is not available in Chrome 83
    }
  });

  // Put the current network in ad-hoc text elements
  document.querySelectorAll('.queried-node').forEach(item => { item.textContent = urlPrefix; });
  document.querySelectorAll('.queried-network').forEach(item => { item.textContent = g_network; });

  // Set current value in the network dropdown
  document.getElementById('NetworkSelect').value = g_network;
  // Add reload event to network selection dropdown
  document.getElementById('NetworkSelect').addEventListener('change', function() {
    window.location.search = '?network=' + encodeURIComponent(this.value);
  });

</script>

<script> // QUERY EXPLORER NODE

  // Request 'nice' formatting from the node (timestamps as YYYYY-MM-DD, amounts as XXX,XXX,XXX.YYYYYYYY, etc.)
  let urlSuffix = '?exp_am=1';

  // Case of static page
  if (g_type == 'historical') { // Arguments for 'historical': (none)
    window.onload = DisplayHistoricalBlocks;
  }
  // Case of dynamic pages (explorer node requests)
  else {
    const xmlhttp = new XMLHttpRequest();

    // Build request
    if (g_type == 'asset') { // Arguments for 'asset': id, hMin, hMax, nMaxOps
      // In case Asset 0 is requested (which is not accepted by node explorer), reload the page with ALL assets instead
      if (g_id == 0) { window.location.href = UrlSelf('assets') }
      // Otherwise, process request
      urlSuffix += '&id=' + g_id + '&nMaxOps=' + g_nMaxOps;
      if (g_hMin) { urlSuffix += '&hMin=' + g_hMin }
      if (g_hMax) { urlSuffix += '&hMax=' + g_hMax }
      xmlhttp.onload = DisplayAssetHistory;

    } else if (g_type == 'block') { // Arguments for 'block': height OR kernel (we let the explorer node handle the case where both are requested)
      if (g_kernel) { urlSuffix += '&kernel=' + g_kernel; }
      if (g_height) { urlSuffix += '&height=' + g_height; }
      adj = URLparams.get('adj'); // Used to adjust the block height, if there's no exact match
      if (adj != null) { urlSuffix += '&adj=' + adj; }
      xmlhttp.onload = DisplayBlock;

    } else if (g_type == 'treasury') { // 'treasury' is type 'block' but with height=0
      g_type = 'block';
      g_height = 0;
      urlSuffix += '&height=' + g_height;
      xmlhttp.onload = DisplayBlock;
    }
    // Option to query and display the details of multiple blocks (NOT USED HERE)
    // else if (g_type == "blocks") // Arguments for 'blocks': height, n
    // {
    //   if (!g_n) { g_n = 5 }
    //   urlSuffix += "&height=" + g_height + "&n=" + g_n;
    //   xmlhttp.onload = DisplayBlocks; // Display function to be done...
    // }
    else if (g_type == 'contract') { // Arguments for 'contract': id, hMin, hMax, nMaxTxs
      urlSuffix += '&id=' + g_id + '&nMaxTxs=' + g_nMaxTxs;
      if (g_hMin) { urlSuffix += '&hMin=' + g_hMin }
      if (g_hMax) { urlSuffix += '&hMax=' + g_hMax }
      xmlhttp.onload = DisplayContractState;

    } else if (g_type == 'hdrs') { // Arguments for 'hdrs': cols, hMax, nMax, dh
      // Remark: The data will be provided in the same order as in 'cols'.
      urlSuffix += '&cols=' + g_cols + '&nMax=' + g_nMax + '&dh=' + g_dh;
      if (g_hMax) { urlSuffix += '&hMax=' + g_hMax }
      xmlhttp.onload = DisplayHdrs;

    } else if (g_type == 'contracts') { // Arguments for 'contracts': (none)
      xmlhttp.onload = DisplayContracts;

    } else if (g_type == 'assets') { // Arguments for 'assets': height
      if (isNaN(g_height) || (!isNaN(g_height) && g_height < 0)) { g_height = "" } // For inexistant blocks, display current assets 
      urlSuffix += '&height=' + g_height;
      xmlhttp.onload = DisplayAssets;

    } else {
      g_type = 'status'; // Arguments for 'status': (none)
      xmlhttp.onload = DisplayStatus;
    }

    // Submit request
    xmlhttp.open('GET', urlPrefix + g_type + urlSuffix);
    xmlhttp.send();
  }
</script>

<!-- ************ SECTION 6 - EXTRA JS FUNCTIONS ************ -->
<script> // MANAGE POPUP FOR EXPLORER NODE SELECTION

  function checkNodeSelection() { // Check radios of default nodes (and uncheck the others)
    for (let network in explorerNodes) {
      let nodes = explorerNodes[network];
      for (let i = 0; i < nodes.length; i++) {
        let id = network + ' node ' + i;
        let check = (nodes[i] == g_defaultNodes[network]);
        document.getElementById(id).checked = check;
      }
    }
  }

  function openNodeSelection() { // Open popup for Explorer Node Selection
    let popup = document.getElementById('nodeSelectionPopup');
    // Check radios of default nodes
    checkNodeSelection();
    // Display popup
    popup.showModal();
    // Close popup if we click outside of it (...I'm not sure I understand how this one works!)
    popup.addEventListener('click', function (event) { if (event.target === popup) { popup.close(); } });
  }

  function closeNodeSelection() { // Close popup
    document.getElementById('nodeSelectionPopup').close();
  }

  function defaultNodeSelection() { // Reset selection to default nodes
    // Check radios of default nodes (i.e. the first for each network)
    for (let network in explorerNodes) {
      let id = network + ' node ' + 0;
      document.getElementById(id).checked = true;
    }
  }

  function applyNodeSelection() { // Apply popup selection
    // Update global variable with selected nodes
    for (let network in explorerNodes) {
      let nodes = explorerNodes[network];
      for (let i = 0; i < nodes.length; i++) {
        let id = network + ' node ' + i;
        if (document.getElementById(id).checked) { g_defaultNodes[network] = nodes[i]; };
      }
    }
    // Save in local storage
    localStorage.setItem('g_defaultNodes',JSON.stringify(g_defaultNodes));
    // Remark: No need to close the popup (submitting a form with a 'dialog' method automatically closes the dialog)
  }
</script>

<script> // MISCELLANEOUS STUFF

  // Process a block/kernel search request
  function submitSearch() {
    // Get search string
    let query = document.getElementById('SearchField').value;
    // Simplistic test to check if search string is rather block height or kernel id
    let key = query.length < 10 ? '&height=' : '&kernel=';
    // Load the corresponding URL
    window.location.href = UrlSelf('block', key + query);
  }

  // Parse metadata to add classes
  function addClassesToMetadata() {
    for (let str of document.querySelectorAll('.metadata')) {
      // Add a class around the asset name (the name field is detected with a regexp)
      str.innerHTML = str.innerHTML.replace(/(:|;)N=([^;]*)/,'$1N=<span class="metadataAssetName">$2</span>');
    }
    for (let str of document.querySelectorAll('.metadataAssetName')) {
      // Add another class to AMML asset names
      // (Here we only check the name, but it would be better to verify the owner too...)
      if (str.innerHTML.startsWith('Amm Liquidity Token')) { str.classList.add('AMML') }
    }
  }

  // Replace empty tables with a text
  function hideEmptyTables() {
    for (let myTable of document.getElementsByTagName('table')) {
      // Check if table has only one row
      if (myTable.rows.length == 1) {
        let myRow = myTable.rows[0];
        // If all cells are <th> or have a span with a "th" class, then consider the row as header.
        if (myRow.querySelectorAll('td > span.th').length + myRow.querySelectorAll('th').length == myRow.cells.length) {
          // Mark the table as empty (CSS will hide it)
          myTable.classList.add('emptyTable'); 
          // Add a span with a simple text after the table
          let mySpan = document.createElement("span");
          mySpan.className = 'noDataText';
          mySpan.innerHTML = '(none)'
          myTable.parentNode.insertBefore(mySpan, myTable.nextSibling); // (This is the way to add a node AFTER another...)
        }
      }
    }
    // While at it, add the same text in empty spans...
    for (let myEmptySpan of document.getElementsByClassName('emptySpan')) {
      myEmptySpan.classList.add('noDataText'); 
      myEmptySpan.innerHTML = '(none)';
    }
  }
</script>

<script> // ADD EXPAND OPTIONS TO ALL HASHES OR METADATA (CSS DISPLAYS THEM TRUNCATED BY DEFAULT)

  function addExpandOptions() {
    // Text of type Hash (truncated/expanded)
    for (let myHash of document.querySelectorAll('.cid, .kernelId, .blob, .commitment')) {
      // Check if the text contains a link
      let myClass = myHash.querySelector('a') ? 'truncated withLink' : 'truncated';
      // Add a span to truncate the text, and another span to hold the clickable symbol
      let myHTML = myHash.innerHTML;
      myHash.innerHTML = "<span class='" + myClass + "'>" + myHTML + "</span><span class='expand' title='Toggle' hidden><svg width='1.2em' height='1.2em'><use href='#eye_icon'/></svg></span>";
      // Add event listener on the symbol
      myHash.querySelector('.expand').addEventListener('click', expandHash);
    }
    // Text of type Metadata (reduced/full)
    for (let myMetadata of document.querySelectorAll('.metadata')) {
      // Add a span to truncate the text, and another span to hold the clickable symbol
      let myHTML = myMetadata.innerHTML;
      myMetadata.innerHTML = "<span class='reduced'>" + myHTML + "</span><span class='extend' title='Toggle' hidden><svg width='1.2em' height='1.2em'><use href='#eye_icon'/></svg></span>";
      // Add event listener on the symbol
      myMetadata.querySelector('.extend').addEventListener('click', expandMetadata);
    }
  }

  function expandHash(e) {
    // Get element, table and column number of the event
    let input = e.currentTarget;
    // If item is in table, expand the whole column
    if (input.closest('table')) {
      let col = input.closest('th,td').cellIndex;
      let table = input.closest('table');
      // Loop on all cells in that column
      for (let myRow of table.rows) {
        // Remove all truncated classes in the cell
        for (let myItem of myRow.cells[col].querySelectorAll('.truncated')) {
          myItem.classList.remove('truncated');
          myItem.classList.add('expanded');
          // Switch action of the clickable symbols
          myItem.nextElementSibling.removeEventListener('click', expandHash);
          myItem.nextElementSibling.addEventListener('click', truncateHash);
        }
      }
    } else {
      // Expand only the item and its siblings
      for (let myItem of input.parentNode.querySelectorAll('.truncated')) {
        myItem.classList.remove('truncated');
        myItem.classList.add('expanded');
        // Switch action of the clickable symbols
        myItem.nextElementSibling.removeEventListener('click', expandHash);
        myItem.nextElementSibling.addEventListener('click', truncateHash);
      }
    }
  }

  function truncateHash(e) {
    // Get element, table and column number of the event
    let input = e.currentTarget;
    // If item is in table, truncate the whole column
    if (input.closest('table')) {
      let col = input.closest('th,td').cellIndex;
      let table = input.closest('table');
      // Loop on all cells in that column
      for (let myRow of table.rows) {
        // Remove all expanded classes in the cell
        for (let myItem of myRow.cells[col].querySelectorAll('.expanded')) {
          myItem.classList.remove('expanded');
          myItem.classList.add('truncated');
          // Switch action of the clickable symbols
          myItem.nextElementSibling.removeEventListener('click', truncateHash);
          myItem.nextElementSibling.addEventListener('click', expandHash);
        }
      }
    } else {
      // Expand only the item and its siblings
      for (let myItem of input.parentNode.querySelectorAll('.expanded')) {
        myItem.classList.remove('expanded');
        myItem.classList.add('truncated');
        // Switch action of the clickable symbols
        myItem.nextElementSibling.removeEventListener('click', truncateHash);
        myItem.nextElementSibling.addEventListener('click', expandHash);
      }
    }
  }

  function expandMetadata(e) {
    // Expand selected metadata only
    let input = e.currentTarget;
    for (let myItem of input.parentNode.querySelectorAll('.reduced')) {
      myItem.classList.remove('reduced');
      myItem.classList.add('full');
      // Switch action of the clickable symbols
      myItem.nextElementSibling.removeEventListener('click', expandMetadata);
      myItem.nextElementSibling.addEventListener('click', truncateMetadata);
    }
  }

  function truncateMetadata(e) {
    // Truncate selected metadata only
    let input = e.currentTarget;
    for (let myItem of input.parentNode.querySelectorAll('.full')) {
      myItem.classList.remove('full');
      myItem.classList.add('reduced');
      // Switch action of the clickable symbols
      myItem.nextElementSibling.removeEventListener('click', truncateMetadata);
      myItem.nextElementSibling.addEventListener('click', expandMetadata);
    }
  }

  function expandEverything() {
    // Expand all truncated Hashes
    for (let myItem of document.querySelectorAll('.truncated')) {
      myItem.classList.remove('truncated');
      myItem.classList.add('expanded');
      // Switch action of the clickable symbols
      myItem.nextElementSibling.removeEventListener('click', expandHash);
      myItem.nextElementSibling.addEventListener('click', truncateHash);
    }
    // Expand all truncated Metadata
    for (let myItem of document.querySelectorAll('.reduced')) {
      myItem.classList.remove('reduced');
      myItem.classList.add('full');
      // Switch action of the clickable symbols
      myItem.nextElementSibling.removeEventListener('click', expandMetadata);
      myItem.nextElementSibling.addEventListener('click', truncateMetadata);
    }
    // Expand all small and special collapsible blocks
    for (let myItem of document.querySelectorAll('.collapsible.small')) { myItem.open = true }
    for (let myItem of document.querySelectorAll('.collapsible.special')) { myItem.open = true }
    // Show colum selection descriptions
    showDescriptions();
    // Switch action of the main clickable symbol
    let icon = document.querySelector('#ExpandAll');
    icon.setAttribute('href', 'javascript:truncateEverything();');
    icon.setAttribute('title', 'Collapse everything');
  }

  function truncateEverything() {
    // Truncate all Hashes
    for (let myItem of document.querySelectorAll('.expanded')) {
      myItem.classList.remove('expanded');
      myItem.classList.add('truncated');
      // Switch action of the clickable symbols
      myItem.nextElementSibling.removeEventListener('click', truncateHash);
      myItem.nextElementSibling.addEventListener('click', expandHash);
    }
    // Truncate all Metadata
    for (let myItem of document.querySelectorAll('.full')) {
      myItem.classList.remove('full');
      myItem.classList.add('reduced');
      // Switch action of the clickable symbols
      myItem.nextElementSibling.removeEventListener('click', truncateMetadata);
      myItem.nextElementSibling.addEventListener('click', expandMetadata);
    }
    // Collapse all small and special collapsible blocks
    for (let myItem of document.querySelectorAll('.collapsible.small')) { myItem.open = false }
    for (let myItem of document.querySelectorAll('.collapsible.special')) { myItem.open = false }
    // Hide colum selection descriptions
    hideDescriptions();
    // Switch action of the main clickable symbol
    let icon = document.querySelector('#ExpandAll');
    icon.setAttribute('href', 'javascript:expandEverything();');
    icon.setAttribute('title', 'Expand everything');
  }
</script>

<script> // SELECTION OPTIONS FOR THE TABLE OF CONTRACT CALLS

  function DisplayContractOptions() {
    // Display table options
    let text = MakeCollapsibleBegin('Options', 'tableOptions', 'close');
    text += "<form id='tableOptionsForm' name='tableOptionsForm' action='javascript:applyContractSelection();'>";
    text += "<div id='selectionOptions'>";
    text += "<div id='rowSelectionOptions'>";
    text += "  <button type='submit' id='applySelection' title='Save and reload with the selected parameters'>Apply</button>";
    // Remark on input: We display a placeholder instead of a default value, to allow seeing the full datalist suggestion list
    text += "  <div class='selectRows'><label title='Number of contract calls to display (2000 max)'>\
                 <span class='labelRows'>Max rows: </span>\
                 <input type='number' class='nbrRows' id='nbrRows' list='nbrOfRows' autocomplete='off' min='1' max='2000' step='1' size='4' value='' placeholder='" + g_nMaxTxs + "'>\
                 <datalist id='nbrOfRows'>\
                   <option value='100'>100 (default)</option>\
                   <option value='200'>200</option>\
                   <option value='500'>500</option>\
                   <option value='1000'>1000</option>\
                   <option value='2000'>2000 (max)</option>\
                 </datalist>\
               </label></div>";
    text += "  <div class='selectHeight'><label title='Min block height (leave empty for default)'>\
                 <span class='labelHeight'>Min block height: </span>\
                 <input type='number' class='inputBlockHeight' id='minHeight' autocomplete='off' min='1' value='" + g_hMin + "' step='1' size='8' placeholder=''>\
               </label></div>";
    text += "  <div class='selectHeight'><label title='Max block height (leave empty for current height)'>\
                 <span class='labelHeight'>Max block height: </span>\
                 <input type='number' class='inputBlockHeight' id='maxHeight' autocomplete='off' min='1' value='" + g_hMax + "' step='1' size='8' placeholder=''>\
               </label></div>";
    text += "</div>";
    text += "</div>";
    text += "</form>";
    text += MakeCollapsibleEnd();

    return text;
  }

  function applyContractSelection() {
    // Get number of rows
    let nMaxTxs = document.getElementById("nbrRows").value;
    if (nMaxTxs) { g_nMaxTxs = nMaxTxs; };
    // Get min block height (even when empty)
    g_hMin = document.getElementById("minHeight").value;
    // Get max block height (even when empty)
    g_hMax = document.getElementById("maxHeight").value;
    // Save results in localStorage
    localStorage.setItem('g_nMaxTxs', g_nMaxTxs);
    //localStorage.setItem('g_hMin', g_hMin);  // We don't store this one in localStorage. It's either in the URL or empty.
    //localStorage.setItem('g_hMax', g_hMax);  // We don't store this one in localStorage. It's either in the URL or empty.
    // Create or replace these parameters in the URL search parameters
    let args = new URL(document.location).searchParams;
    args.set('nMaxTxs', g_nMaxTxs);
    args.set('hMin', g_hMin);
    args.set('hMax', g_hMax);
    // Update the query part of the URL and reload page
    window.location.search = args.toString(); // toString() returns the "foo=1&bar=2&baz=3" part (without "?")
  }
</script>

<script> // SELECTION OPTIONS FOR THE TABLE OF AN ASSET

  function DisplayAssetOptions() {
    // Display table options
    let text = MakeCollapsibleBegin('Options', 'tableOptions', 'close');
    text += "<form id='tableOptionsForm' name='tableOptionsForm' action='javascript:applyAssetSelection();'>";
    text += "<div id='selectionOptions'>";
    text += "<div id='rowSelectionOptions'>";
    text += "  <button type='submit' id='applySelection' title='Save and reload with the selected parameters'>Apply</button>";
    // Remark on input: We display a placeholder instead of a default value, to allow seeing the full datalist suggestion list
    text += "  <div class='selectRows'><label title='Number of events to display (2000 max)'>\
                 <span class='labelRows'>Max rows: </span>\
                 <input type='number' class='nbrRows' id='nbrRows' list='nbrOfRows' autocomplete='off' min='1' max='2000' step='1' size='4' value='' placeholder='" + g_nMaxOps + "'>\
                 <datalist id='nbrOfRows'>\
                   <option value='100'>100 (default)</option>\
                   <option value='200'>200</option>\
                   <option value='500'>500</option>\
                   <option value='1000'>1000</option>\
                   <option value='2000'>2000 (max)</option>\
                 </datalist>\
               </label></div>";
    text += "  <div class='selectHeight'><label title='Min block height (leave empty for default)'>\
                 <span class='labelHeight'>Min block height: </span>\
                 <input type='number' class='inputBlockHeight' id='minHeight' autocomplete='off' min='1' value='" + g_hMin + "' step='1' size='8' placeholder=''>\
               </label></div>";
    text += "  <div class='selectHeight'><label title='Max block height (leave empty for current height)'>\
                 <span class='labelHeight'>Max block height: </span>\
                 <input type='number' class='inputBlockHeight' id='maxHeight' autocomplete='off' min='1' value='" + g_hMax + "' step='1' size='8' placeholder=''>\
               </label></div>";
    text += "</div>";
    text += "</div>";
    text += "</form>";
    text += MakeCollapsibleEnd();

    return text;
  }

  function applyAssetSelection() {
    // Get number of rows
    let nMaxOps = document.getElementById("nbrRows").value;
    if (nMaxOps) { g_nMaxOps = nMaxOps; };
    // Get min block height (even when empty)
    g_hMin = document.getElementById("minHeight").value;
    // Get max block height (even when empty)
    g_hMax = document.getElementById("maxHeight").value;
    // Save results in localStorage
    localStorage.setItem('g_nMaxOps', g_nMaxOps);
    //localStorage.setItem('g_hMin', g_hMin);  // We don't store this one in localStorage. It's either in the URL or empty.
    //localStorage.setItem('g_hMax', g_hMax);  // We don't store this one in localStorage. It's either in the URL or empty.
    // Create or replace these parameters in the URL search parameters
    let args = new URL(document.location).searchParams;
    args.set('nMaxOps', g_nMaxOps);
    args.set('hMin', g_hMin);
    args.set('hMax', g_hMax);
    // Update the query part of the URL and reload page
    window.location.search = args.toString(); // toString() returns the "foo=1&bar=2&baz=3" part (without "?")
  }
</script>

<script> // SELECTION OPTIONS FOR THE TABLE OF ALL ASSETS

  function DisplayAssetsOptions() {
    // Display table options
    let text = MakeCollapsibleBegin('Options', 'tableOptions', 'close');
    text += "<form id='tableOptionsForm' name='tableOptionsForm' action='javascript:applyAssetsSelection();'>";
    text += "<div id='selectionOptions'>";
    text += "<div id='rowSelectionOptions'>";
    text += "  <button type='submit' id='applySelection' title='Save and reload with the selected parameters'>Apply</button>";
    text += "  <div class='selectHeight'><label title='Block height (leave empty for current height)'>\
                 <span class='labelHeight'>Block height: </span>\
                 <input type='number' class='inputBlockHeight' id='maxHeight' autocomplete='off' min='1' value='" + g_height + "' step='1' size='8' placeholder=''>\
               </label></div>";
    text += "</div>";
    text += "</div>";
    text += "</form>";
    text += MakeCollapsibleEnd();

    return text;
  }

  function applyAssetsSelection() {
    // Get max block height (even when empty)
    g_height = document.getElementById("maxHeight").value;
    // Remark: We don't store this one in localStorage. It's either in the URL or empty.
    // Create or replace these parameters in the URL search parameters
    let args = new URL(document.location).searchParams;
    args.set('height', g_height);
    // Update the query part of the URL and reload page
    window.location.search = args.toString(); // toString() returns the "foo=1&bar=2&baz=3" part (without "?")
  }
</script>

<script> // GRAPH DISPLAY FUNCTIONS

  // Global variables for the graphs
  const g_graph = {
    // For x and y, each key is a column code (usually one letter) and its value is the corresponding array of data.
    x: {}, // Data for x coordinates: 'row' number, 'h' blockheight and 'svg' coordinates (identical for all graphs, and can't have empty values)
    y: {}, // Data for y coordinates of each requested graph (e.g. { c:[445,445,1901,-1955,...], k:[2,2,1,1,...], ...} )
    color: {}, // One CSS color per graph (e.g. { c:'blue', k:'#FF0000', ...} )
    width: 2040, // Arbitrary SVG width (we set it here to 2000 max data points + 2*10 margins + 2*10 padding)
    height: 600, // Arbitrary SVG height
    margins: { top: 10, right: 10, bottom: 10, left: 10 }, // Margins around the graph area
    padding: 10, // Padding inside the graph area
    area: {}, // Other measures of the graph area (values are computed here below)
    hover: true, // Indicates if the hovering effect is active (the cursor position follows the mouse)
    index: undefined, // Index in the x coordinates array for the cursor position
  };

  // Setup the whole graph environment
  function setupGraph() {
    // Add a toggle event to the collapsible containing the graph
    document.getElementById("graphCollapsible").addEventListener("toggle", toggleGraph);

    // Compute all the main measures of the graph area
    g_graph.area.xmin = g_graph.margins.left;
    g_graph.area.xmax = g_graph.width - g_graph.margins.right;
    g_graph.area.ymin = g_graph.margins.top;
    g_graph.area.ymax = g_graph.height - g_graph.margins.bottom;
    g_graph.area.width = g_graph.area.xmax - g_graph.area.xmin;
    g_graph.area.height = g_graph.area.ymax - g_graph.area.ymin;

    // Fill the global variable with the default colors
    for (let item of columnHeaders) { if (item.color !== undefined) { g_graph.color[item.code] = item.color; } }
    // Get locally saved colors, if any
    try { // Try to read object from local storage (getItem returns 'null' if the variable doesn't exist)
      g_graph_colors = JSON.parse(localStorage.getItem('g_graph_colors'));
    } catch (error) { // In case of any parsing error, also set the variable to 'null'
      g_graph_colors = null;
    }
    // If the resulting variable doesn't exist or is not a literal object, then we set it empty
    if (g_graph_colors === null || g_graph_colors.constructor !== Object) { g_graph_colors = {}; }
    // Replace -in the the global variable- the default colors with the user-defined ones (if any)
    for (let code in g_graph_colors) { g_graph.color[code] = g_graph_colors[code]; }

    // A neat trick to systematically update the graphs every time the table is filtered or sorted:
    // Wrap the original filterTable() and sortTable() functions into new versions... with added function calls!
    const originalSortTable = sortTable; // Save the orignal function
    sortTable = function(...args) { // Wrap the function into a new one, with the same name.
      originalSortTable.apply(this, args); // Call the original function first.
      updateGraphDataX(); // Then, update X graph data
      updateGraphDataY(); // Update Y graph data
      drawGraph(); // and redraw all graphs.
    };
    const originalFilterTable = filterTable; // Save the orignal function
    filterTable = function(...args) { // Wrap the function into a new one, with the same name.
      originalFilterTable.apply(this, args); // Call the original function first.
      updateGraphDataX(); // Then, update X graph data
      updateGraphDataY(); // Update Y graph data
      drawGraph(); // and redraw all graphs.
    };

    // Add checkboxes for selecting columns to display as graphs
    let headerTitles = document.querySelectorAll('#divTableBlocks .th');
    // Loop on each header cell of the table
    for (let n = 0; n < headerTitles.length; n++) {
      let headerTitle = headerTitles[n];
      let headerText = headerTitle.firstChild.textContent;
      // All columns for which a color has been defined in the global variable 'columnHeaders' can be displayed as graphs
      let add = true;
      for (let item of columnHeaders) { if (item.title == headerText && item.color === undefined) { add = false; } }
      if (add) {
        // Add a checkbox to the right of the header title
        let checkboxText = "<input type='checkbox' class='tableGraphCheckbox' title='Display as graph' id='checkbox_column_" + n + "' data-column='" + n + "' autocomplete='off' onclick='checkboxGraph(event);'>";
        headerTitle.insertAdjacentHTML("beforeend", checkboxText);
      }
    }

    // Extract now the x coordinates from the table (they will serve for all graphs)
    updateGraphDataX();

    // Set SVG parameters
    let svg = document.getElementById("graphSVG");
    svg.setAttribute('width', g_graph.width + 'px')
    svg.setAttribute('height', g_graph.height + 'px')
    svg.setAttribute('viewBox', '0 0 ' + g_graph.width + ' ' + g_graph.height);
    // Prepare the basic SVG content
    let text = '';
    // Start group with origin of coordinates in the bottom-left corner (just because it's more natural for xy graphs)
    text += `<g id='graphArea' transform='translate(0,${g_graph.height}) scale(1,-1)' >`;
    // Draw a rectangle for the graph area (we use backticks to allow multilines)
    text += `<rect id='graphBox' width='${g_graph.area.width}' height='${g_graph.area.height}' x='${g_graph.area.xmin}' y='${g_graph.area.ymin}' 
             fill='none' stroke-width='1' stroke='black' />`;
    // Draw the cursor line (starts out of view and will only appear on hover)
    text += `<line id='graphCursor' x1='-10' y1='${g_graph.area.ymin}' x2='-10' y2='${g_graph.area.ymax}' 
             stroke='darkgrey' stroke-width='5' />`;
    // Close group
    text += '</g>';
    // Apply the content of SVG
    document.getElementById("graphSVG").innerHTML = text;
    // Add event listeners for the hovering effects (the cursor line will follow the mouse, showing graph values)
    let g = document.getElementById('graphArea');
    g.addEventListener('mousemove', graphHoverOn); // Cursor apears on hover and follows the mouse
    g.addEventListener('mouseleave', graphHoverOff); // Cursor disapears when the mouse leaves the graph area
    g.addEventListener('click', graphHoverToggle); // Cursor freezes and unfreezes when clicked
  }

  // Toggle class to show/hide checkboxes in table header when the graph's collapsible if opened/closed
  function toggleGraph() {
    for (let checkbox of document.querySelectorAll('.tableGraphCheckbox')) {
      checkbox.parentElement.classList.toggle('graphable'); // The class is added to the <span> above, to also show/hide the '::after' symbol
    }
  }

  // Draw/Delete graph when a checkbox is checked/unchecked
  function checkboxGraph(event) {
    event.stopPropagation(); // Avoid also triggering other events of the header cell (like sorting, etc)
    // Get context information
    let checkbox = event.target;
    let col = checkbox.dataset.column; // Get the column number
    let code = checkbox.previousElementSibling.dataset.code; // Get the column code from the <span> just before the checkbox
    let header = checkbox.closest('th').textContent; // Get header text

    // Add or remove data series for the graphs
    if (checkbox.checked == false) {
      delete g_graph.y[code]; // Remove graph data for the selected column (but keep its color information)
      document.getElementById('polyline_' + code).remove(); // Remove graph from SVG
      document.getElementById('graphLegendItem_' + code).remove(); // Remove graph name from legend
    } else {
      // Prepare HTML for the new legend item, with styling and events (CSS will highlight a graph when hovering on its legend)
      // Remark: Events here are included in the HTML (instead of addEventListener) to maitain them in case of manipulating the legend's 'innerHTML'
      const color = g_graph.color[code];
      const legend_id = 'graphLegendItem_' + code;
      const colorpicker_id = 'graphColorPicker_' + code;
      const hex_color = convertColorToHex(color); // Conversion needed because <input> only accepts HEX colors!
      // Remark: We use backticks to allow both single and double quotes, variable substitutions and multilines
      let legend_item = `<label class='graphLegendItem' id='${legend_id}' title='Click to change color'
                         autocomplete='on' style='color:${color}; white-space:nowrap;'
                         onmouseover='graphHighlightOn("${code}")' onmouseout='graphHighlightOff("${code}")'>`;
      // Add color picker with events ('oninput' will preview any new color, 'onchange' will apply the final valid one)
      legend_item += `<input type='color' class='graphColorPicker' id='${colorpicker_id}' name='${colorpicker_id}' value='${hex_color}' oninput='changeGraphColor("${code}")' onchange='changeGraphColor("${code}")'>`;
      legend_item += header;
      legend_item += " <span class='graphLegendValue' id='graphLegendValue_" + code + "'></span>";
      legend_item += "</label>";
      // Append the new item to the legend area
      document.getElementById('graphLegend').insertAdjacentHTML("beforeend", legend_item);
    }

    // Hide the legend title if at least one legend item is displayed
    document.getElementById("graphLegendTitle").style.display = (document.querySelectorAll(".graphLegendItem").length == 0) ? 'block' : 'none';

    // Extract graph data for the selected column and draw the corresponding graph
    updateGraphDataY(col);
    drawGraph(code);
  }

  // Set classes for hovering/highlighting graphs
  function graphHighlightOn(code) {
    document.getElementById('graphArea').classList.add('graph-highlight');
    document.getElementById('polyline_' + code).classList.add('graph-highlight');
  }
  function graphHighlightOff(code) {
    document.getElementById('graphArea').classList.remove('graph-highlight');
    document.getElementById('polyline_' + code).classList.remove('graph-highlight');
  }

  // Smart trick to convert any CSS color value (name, rgb, hsl...) into its HEX value
  function convertColorToHex(CSScolor) {
    let ctx = document.createElement('canvas').getContext('2d'); // No need to delete it, it will be garbage-collected
    ctx.fillStyle = CSScolor;
    return ctx.fillStyle;
  }

  // Apply a user-defined color to a graph and its legend
  function changeGraphColor(code) {
    let color = document.getElementById('graphColorPicker_' + code).value; // Get color from color picker
    document.getElementById('graphLegendItem_' + code).style.color = color; // Apply color to legend item
    document.getElementById('polyline_' + code).style.stroke = color; // Apply color to polyline
    g_graph.color[code] = color; // Save color in the global variable, for future display of the same graph
    localStorage.setItem('g_graph_colors',JSON.stringify(g_graph.color)); // Save all current colors in local storage
  }

  // Reset all graph colors to the default ones
  function resetGraphColors() {
    localStorage.removeItem('g_graph_colors'); // Remove locally saved colors
    g_graph.color = {}; // Reset the global variable and fill it with the default colors
    for (let item of columnHeaders) { if (item.color !== undefined) { g_graph.color[item.code] = item.color; } }
    // Update colors of displayed graphs and legends
    for (let code in g_graph.y) {
      let color = g_graph.color[code]; // Get color from updated global variable
      document.getElementById('graphLegendItem_' + code).style.color = color; // Apply color to legend item
      document.getElementById('polyline_' + code).style.stroke = color; // Apply color to polyline
    }
  }

  // Recompute the X graph data arrays, common to all graphs (e.g. at start, or after sorting or filtering the table)
  function updateGraphDataX() {
    // Get a list of non-header rows
    let table = document.querySelector('#divTableBlocks table');
    let rows = table.tBodies[0].rows; // Remark: There is always at least one tbody, even if not explicitely defined
    // Use the spread operator to make an array, and the filter method to keep only the visible rows
    rows = [...rows].filter(row => (row.style.visibility == '' || row.style.visibility == 'visible'));

    // Use the map method to extract arrays with the cell values for the x coordinates
    g_graph.x.h = rows.map(row => row.cells[0].innerText); // Array of the cells in first column (blockheight).
    g_graph.x.row = rows.map((row, index) => rows.length - index); // Array of the row number (bottom to top)
    // In the future, we could also add the block number () or the timestamp ()...

    // Compute min and max (we use the spread operator '...' to expand the array elements)
    let x_min = Math.min(...g_graph.x.row);
    let x_max = Math.max(...g_graph.x.row);
    // Map the x values into the equivalent x coordinates over the width of the SVG graph area
    g_graph.x.svg = g_graph.x.row.map(x => g_graph.padding + g_graph.area.xmin + (g_graph.area.width - 2*g_graph.padding) * (x - x_min) / (x_max - x_min));
  }

  // Recompute one or all the Y graph data arrays (e.g. after checking a checkbox, or after sorting or filtering the table)
  function updateGraphDataY(column) { // If no 'column' parameter is given, then all columns with checkboxes will be considered
    // Get a list of non-header rows
    let table = document.querySelector('#divTableBlocks table');
    let rows = table.tBodies[0].rows; // Remark: There is always at least one tbody, even if not explicitely defined
    // Use the spread operator to make an array, and the filter method to keep only the visible rows
    rows = [...rows].filter(row => (row.style.visibility == '' || row.style.visibility == 'visible'));

    // Check if data should be updated for one or all graphs
    let checkboxes;
    if (column !== undefined) { // Get only the one requested checkbox
      checkboxes = document.querySelectorAll('#checkbox_column_' + column);
    } else { // Gat all the checkboxes
      checkboxes = document.querySelectorAll('.tableGraphCheckbox');
    }

    // Update Y-coordinates for all selected checked checkboxes
    for (let checkbox of checkboxes) {
      // Update the selected data series for the graphs
      if (checkbox.checked == true) {
        let col = checkbox.dataset.column; // Get the column number
        let code = checkbox.previousElementSibling.dataset.code; // Get the column code from the <span> just before the checkbox
        // Use the map method to extract an array with the cell values of the column
        g_graph.y[code] = rows.map(function(row) {
          let val = row.cells[col].innerText; // Return the content of the cell in a given column
          val = val.replace(/,/g,''); // Remove comas so that numbers are recognized as such
          if (val == "") { val = "0" }; // Replace empty values with 0
          return val;
        });
      }
    }
  }

  // Draw one or all graphs from available data
  function drawGraph(code) { // If no 'code' parameter is given, then redraw all the graphs
    // Check if graph(s) should be drawn for one or all graphs
    let codes;
    if (code !== undefined) {
      codes = [code];
      // Delete that previous graph (using the 'for...of' format does not give an error if the element doesn't exist)
      for (let graph of document.querySelectorAll('#polyline_' + code)) { graph.remove(); };
    } else {
      codes = Object.keys(g_graph.y);
      // Delete ALL previous graphs
      for (let graph of document.querySelectorAll('.graphPolyline')) { graph.remove(); };
      // In case the cursor is frozen (and thus potentially displaying graph values in the Legend), reset it.
      graphHoverOff();
    }

    // Prepare HTML for the new SVG content
    let text = '';
    // Go through the requested graph data
    for (let code of codes) {
      // Verify there is enough data for the graph (i.e. more than 2 samples)
      if (code in g_graph.y && g_graph.y[code].length > 1) {
        let color = g_graph.color[code]; // Retrieve graph color
        let y_min = Math.min(...g_graph.y[code]); // Compute the min (the spread operator '...' expands the array elements)
        let y_max = Math.max(...g_graph.y[code]); // Compute the max (the spread operator '...' expands the array elements)
        if (y_min == y_max) {y_min -= 1; y_max += 1}; // Special case if all values are identical
        // Map the y values into the equivalent y coordinates over the height of the SVG graph area
        let y_svg = g_graph.y[code].map(y => g_graph.padding + g_graph.area.ymin + (g_graph.area.height - 2*g_graph.padding) * (y - y_min) / (y_max - y_min));
        // Start a polyline
        text += "<polyline class='graphPolyline' id='polyline_" + code + "' points='";
        // Add all the x,y points to the polyline
        for (let i = 0; i < y_svg.length; i++) { text += " " + g_graph.x.svg[i] + "," + y_svg[i]; }
        // Close the polyline (and add some default style)
        text += "' stroke='" + color + "' stroke-width='1' fill='none' stroke-linecap='round' stroke-linejoin='round' />";
        // If the cursor is active, display the corresponding graph value in legend (in US format)
        if (g_graph.index !== undefined) {
          document.getElementById('graphLegendValue_' + code).innerHTML = " : " + Intl.NumberFormat('en-US').format(g_graph.y[code][g_graph.index]);
        }
      }
    }
    // Add the graphs to the SVG group
    document.getElementById('graphArea').insertAdjacentHTML("beforeend", text);
  }

  // The SVG cursor follows the mouse when hovering over the graph
  function graphHoverOn(e) {
    let g = e.currentTarget;
    // Proceed only if hovering is active and graphs are displayed
    if (g_graph.hover && document.getElementsByClassName('graphPolyline').length > 0) {
      // Convert mouse viewport position into SVG coordinates
      let svg = e.currentTarget.closest('svg'); // Get the whole SVG
      let pt = svg.createSVGPoint(); // Create a SVG point
      pt.x = e.clientX; // Give it the viewport X-position of the mouse
      pt.y = e.clientY; // Give it the viewport Y-position of the mouse
      // Transform these viewport coordinates into SVG coordinates (by applying the inverse transform the SVG is currently under)
      pt = pt.matrixTransform(svg.getScreenCTM().inverse());
      // Get the X-coordinate of the closest graph sample
      let distances = g_graph.x.svg.map(x => Math.abs(pt.x - x)); // Compute an array of all the distances
      let index = distances.indexOf(Math.min(...distances)); // Get the index of the corresponding sample
      let x = g_graph.x.svg[index]; // Get the x coordinate of that sample
      // Move the SVG cursor to that position and have it remember the corresponding index
      let cursor = document.getElementById('graphCursor');
      cursor.setAttribute("x1", x);
      cursor.setAttribute("x2", x);
      g_graph.index = index;
      // Display all graph values in legend (in US format)
      for (let code in g_graph.y) {
        document.getElementById('graphLegendValue_' + code).innerHTML = " : " + Intl.NumberFormat('en-US').format(g_graph.y[code][g_graph.index]);
      }
    }
  }
  function graphHoverOff(e) { // When hovering ends, move the SVG cursor out of view
     // Proceed only if the function is called without argument or if by an active hovering event
    if (e === undefined || g_graph.hover) {
      // Move the SVG cursor out of view (and have it forget its index)
      let cursor = document.getElementById('graphCursor');
      cursor.setAttribute("x1", -10);
      cursor.setAttribute("x2", -10);
      g_graph.index = undefined;
      // Empty all graph values in legend
      for (let value of document.querySelectorAll('.graphLegendValue')) { value.innerHTML = ""; }
      // If function was called without argument, ensure the hovering effect is now active
      if (e === undefined) { g_graph.hover = true; }
    }
  }
  function graphHoverToggle(e) { // Start/Stop listening to hovering events (i.e. freeze/unfreeze the cursor)
    g_graph.hover = !g_graph.hover // Elegant way to toggle a boolean! :-)
  }

</script>

<script> // SELECTION OPTIONS FOR THE TABLE OF BLOCK HEADERS

  function DisplayHdrsOptions() {

    let text ="<div id='tableOptionsContainer'>";

    // Display table options
    text += MakeCollapsibleBegin('Options', 'tableOptions', 'close', 'id="optionsCollapsible" name="tableOptionsCollapsibles"');
    text += "<form id='tableOptionsForm' name='tableOptionsForm' action='javascript:applyHdrsSelection();'>";
    text += "<div id='selectionOptions'>";
    text += "<div id='rowSelectionOptions'>";
    text += "  <button type='submit' id='applySelection' title='Save and reload with the selected parameters'>Apply</button>";
    // Remark on input: We display a placeholder instead of a default value, to allow seeing the full datalist suggestion list
    text += "  <div class='selectRows'><label title='Number of rows to display (2000 max)'>\
                 <span class='labelRows'>Rows: </span>\
                 <input type='number' class='nbrRows' id='nbrRows' list='nbrOfRows' autocomplete='off' min='1' max='2000' step='1' size='4' value='' placeholder='" + g_nMax + "'>\
                 <datalist id='nbrOfRows'>\
                   <option value='100'>100 (default)</option>\
                   <option value='200'>200</option>\
                   <option value='500'>500</option>\
                   <option value='1000'>1000</option>\
                   <option value='2000'>2000 (max)</option>\
                 </datalist>\
               </label></div>";
    // Remark on input: We display a placeholder instead of a default value, just to keep it visually similar to the other input!
    text += "  <div class='selectStep'><label title='Blockheight interval between two rows'>\
                 <span class='labelStep'>Interval: </span>\
                 <input type='number' class='nbrStep' id='nbrStep' list='nbrOfSteps' autocomplete='off' min='1' value='' step='1' size='4' placeholder='" + g_dh + "'>\
                 <datalist id='nbrOfSteps'>\
                   <option value='1'>1 (default)</option>\
                   <option value='60'>60 (~hour)</option>\
                   <option value='1440'>1,440 (~day)</option>\
                   <option value='10080'>10,080 (~week)</option>\
                   <option value='43200'>43,200 (~month)</option>\
                 </datalist>\
               </label></div>";
    text += "  <div class='selectHeight'><label title='Max block height (leave empty for current height)'>\
                 <span class='labelHeight'>Max block height: </span>\
                 <input type='number' class='inputBlockHeight' id='maxHeight' autocomplete='off' min='1' value='" + g_hMax + "' step='1' size='8' placeholder=''>\
               </label></div>";
    text += "</div>";
    // Remark: We use backticks (aka 'template strings') here because of the mix of single and double quotes inside them.
    text += `<div id='columnSelectionOptions'>\
              <span class='selectionOptionsGroup'>\
                <span class='labelColumns'>Columns: </span>\
                <a href='javascript:selectColumns("current");' id='selectCurrentColumns' class='selectionOption' title='Select current columns'>current</a>\
                <span class='itemSeparator'> | </span>\
                <a href='javascript:selectColumns("default");' id='selectDefaultColumns' class='selectionOption' title='Select default columns'>default</a>\
                <span class='itemSeparator'> | </span>\
                <a href='javascript:selectColumns("all");' id='selectAllColumns' class='selectionOption' title='Select all columns'>all</a>\
                <span class='itemSeparator'> | </span>\
                <a href='javascript:openPasteColumns();' id='pasteColumns' class='selectionOption' title='Copy/Paste codes for columns'>paste</a>\
                <span class='itemSeparator'> | </span>\
                <a href='javascript:reorderColumns(columnDefaultOrder);' id='reorderAllColumns' class='selectionOption' title='Reset column order'>reset order</a>\
                <span class='selectionText'>(or reorder with drag and drop)</span>\
              </span>\
              <span id='toggleDescriptions'><a href='javascript:showDescriptions();' title='Show details' id='toggleDescriptionsLink'><svg width='1.5rem' height='1.5rem'><use href='#eye_icon'/></svg></a></span>\
            </div>`;
    text += "</div>";
    text += "<div id='columnOptions'>";
    // Make list of all checkboxes
    let nbr = 0;
    for (let item of columnHeaders) {
      nbr++;
      // Put each checkbox and its text into a div
      text += "<div class='columnOption' id='Option_" + item.code + "'><label title='" + item.description + "'>";
      if (item.code == "h") {
        // First column (the block height) is mandatory: the checkbox is checked and disabled
        text += "<span class='columnOptionCheck'><input type='checkbox' class='columnOptionCheckboxDisabled' title='Always displayed' id='check_" + item.code + "' data-code='" + item.code + "' checked disabled></span>";
      } else {
        text += "<span class='columnOptionCheck'><input type='checkbox' class='columnOptionCheckbox' title='URL code: " + item.code + "' id='check_" + item.code + "' data-code='" + item.code + "'></span>";
      }
      text += "<span class='columnOptionText'>";
      text += "<span class='columnOptionNumber'>" + nbr.toString().padStart(2,'0') + ". </span>";
      text += "<span class='columnOptionLabel'>" + item.title + "</span>";
      text += "<span class='columnOptionDescription hidden'> " + item.description + ".</span>";
      text += "</span>";
      text += "</label></div>";
    }
    text += "</div>";
    text += "</form>";

    // Popup for pasting column codes
    // Remark: We use 'dialog' because 'popover' does not work on Chrome 83.
    // Remark: We reject repetions for now (using a way too complex regexp!), but we should see how to manage them because the node explorer accepts them...
    text += "<dialog id='pasteColumnsPopup'>";
    text += "  <form id='pasteColumnsForm' name='pasteColumnsForm' method='dialog' onsubmit='applyPasteColumns();'>\
                  <div class='pasteColumnsText'>Copy/Paste codes for columns:</div>\
                  <input type='text' id='pasteColumnsInput' value='" + columnDefaultDisplay + "' autocomplete='off' size='30' pattern='^(?:([" + columnDefaultOrder + "])(?!.*\\1))*$' placeholder='Enter column codes here' title='Valid codes are " + columnDefaultOrder + " (without repetition)' autofocus>\
                  <button type='submit' class='popupButton' id='pasteColumnsApply' title='Apply column codes'>Ok</button>\
                  <button type='button' class='popupButton' id='pasteColumnsCancel' title='Cancel' onclick='closePasteColumns();'>Cancel</button>\
               </form>";
    // Display a list of all column codes
    text += "<div class='pasteColumnsList'>";
    for (let item of columnHeaders) {
        text += "<div class='pasteColumnsListItem' title='" + item.description + "'>";
        text += "<span class='pasteColumnsListCode'>" + item.code + " </span>";
        text += "<span class='pasteColumnsListTitle'>" + item.title + "</span>";
        text += "</div>";
    }
    text += "</div>";
    text += "</dialog>";

    text += MakeCollapsibleEnd();

    // Display graph area
    text += MakeCollapsibleBegin('Graph', 'tableOptions', '', 'id="graphCollapsible" name="tableOptionsCollapsibles"');
    text += "<div id='resetColors'><a href='javascript:resetGraphColors();' title='Reset graph colors to default'>Reset colors</a></div>";
    text += "<div id='graphContainer' style='white-space:nowrap'>"; // 'nowrap' added just for the CSS-less display
    // Add empty SVG element
    text += "  <svg id='graphSVG' preserveAspectRatio='none'>Sorry, your browser does not support inline SVG.</svg>";
    text += "</div>";
    text += "<div id='graphLegend'><div id='graphLegendTitle'>Select in the table below the columns to display <span id='graphLegendSubtitle'>(the rows will be read from bottom to top)</span></div>";
    text += MakeCollapsibleEnd();

    text += "</div>";

    return text;
  }

  function showDescriptions() {
    // Show all descriptions of the column selection checkboxes
    for (let myItem of document.querySelectorAll('.columnOptionDescription')) {
      myItem.classList.remove('hidden');
      // Switch action of the clickable symbol
      let icon = document.querySelector('#toggleDescriptionsLink');
      icon.setAttribute('href', 'javascript:hideDescriptions();');
      icon.setAttribute('title', 'Hide details');
    }
  }

  function hideDescriptions() {
    // Hide all descriptions of the column selection checkboxes
    for (let myItem of document.querySelectorAll('.columnOptionDescription')) {
      myItem.classList.add('hidden');
      // Switch action of the clickable symbol
      let icon = document.querySelector('#toggleDescriptionsLink');
      icon.setAttribute('href', 'javascript:showDescriptions();');
      icon.setAttribute('title', 'Show details');
    }
  }

  function selectColumns(param = 'current') { // Mark checkboxes according to a given column selection
    let string, link = document.getElementById('selectAllColumns');
    switch(param) {
      case 'current':
        // Check current checkboxes (as per global variable)
        string = g_cols;
        break;
      case 'default':
        // Check default checkboxes (as per global variable)
        string = columnDefaultDisplay;
        break;
      case 'all':
        // Check all checkboxes (as per global variable)
        string = columnDefaultOrder;
        // Switch action of the link
        link.setAttribute('href', 'javascript:selectColumns("none");');
        link.setAttribute('title', 'Deselect all columns');
        link.textContent = 'none';
        break;
      case 'none':
        // Uncheck all checkboxes
        string = '';
        // Switch action of the link
        link.setAttribute('href', 'javascript:selectColumns("all");');
        link.setAttribute('title', 'Select all columns');
        link.textContent = 'all';
        break;
      default:
        // Check the checkboxes as per given column code
        string = param;
    }

    // Until we adapt the UI for column repetition, we simply ignore them (although they do work when passed in the URL)...
    let str = '';
    for (let c of string) { str += (str.indexOf(c) === -1) ? c : '' }; // We only keep a letter if it has not been added yet
    string = str;

    // Check selected checkboxes
    for (let item of document.querySelectorAll('.columnOptionCheckbox')) {
      item.checked = (string.includes(item.dataset.code)) ? true : false; 
    }
  }

  function reorderColumns(series = '') { // Reorder checkboxes
    let n = 0, series2 = "", fullSeries;
    // 1) If no order is given, check localStorage. If it's also empty, then use the default order.
    if (series == '') {
      series = localStorage.getItem('g_colsAll');
      if (!series) { series = columnDefaultOrder; }

      // Until we adapt the UI for column repetition, we simply ignore them (although they do work when passed in the URL)...
      let str = '';
      for (let c of g_cols) { str += (str.indexOf(c) === -1) ? c : '' }; // We only keep a letter if it has not been added yet

      // Adjust checkboxes order to match the order of the currently displayed columns (global variable 'g_cols')
      // Remark: We only reorder the needed ones (if a letter is any of the displayed ones, we replace it with the next displayed one, in sequence).
      for (let char of series) { series2 += (str.includes(char)) ? str[n++] : char }
      fullSeries = series2;
    }
    // 2) If only a sub-group of letters is given, then simply adjust the current order
    else if (series.length < columnDefaultOrder.length) {
      // Get current order of checkboxes (they are automatically listed in order)
      let currentSeries = '';
      for (let item of document.querySelectorAll('.columnOptionCheckbox')) {
        currentSeries += item.dataset.code; // String of codes for the current order of all checkboxes
      }
      // Adjust current checkboxes order to match the order of the sub-group
      // Remark: We only reorder the needed ones (if a letter is any of the requested ones, we replace it with the next requested one, in sequence).
      for (let char of currentSeries) { series2 += (series.includes(char)) ? series[n++] : char }
      fullSeries = series2;
    }
    // 3) Otherwise, we assume a full sequence (with all letters) has been given
    // Remark: We should probably add some verifications here about the content of 'series'...
    else {
      fullSeries = series;
    }
    // Reorder elements according to the series of letters
    for (let letter of fullSeries) {
      // Get the corresponding checkbox element
      let item = document.getElementById('Option_' + letter);
      // If the item exists, move it at the end of siblings series
      if (item) { item.parentElement.appendChild(item) }
    }
    // Then, update the numbering of the reordered elements
    renumberColumnOptions();
  }

  function openPasteColumns() { // Open popup
    let popup = document.getElementById('pasteColumnsPopup');
    // Get codes for selected checkboxes (they will be automatically listed in their current order)
    let params = '';
    for (let item of document.querySelectorAll('.columnOptionCheckbox')) {
      if (item.checked == true) { params += item.dataset.code }; // String of codes with the selected checkboxes (in the same order)
    }
    // Set form input value to those codes
    document.getElementById('pasteColumnsInput').value = params;
    // Display popup
    popup.showModal();
    // Close popup if we click outside of it (...I'm not sure I understand how this one works!)
    popup.addEventListener('click', function (event) { if (event.target === popup) { popup.close(); } });
  }

  function closePasteColumns() { // Close popup
    document.getElementById('pasteColumnsPopup').close();
  }

  function applyPasteColumns() { // Apply popup selection
    let string = document.getElementById('pasteColumnsInput').value;
    selectColumns(string); // Mark checkboxes as per given column codes
    reorderColumns(string); // Reorder the needed checkboxes to match the selection
    // Remark: No need to close the popup (submitting a form with a 'dialog' method automatically closes the dialog)
  }

  function applyHdrsSelection() {
    // Get number of rows
    let nMax = document.getElementById("nbrRows").value;
    if (nMax) { g_nMax = nMax; };
    // Get row interval
    let dh = document.getElementById("nbrStep").value;
    if (dh) { g_dh = dh; };
    // Get max block height (even when empty)
    g_hMax = document.getElementById("maxHeight").value;

    // Get codes for selected checkboxes (they are automatically listed in their current order)
    let params = '', series = '';
    for (let item of document.querySelectorAll('.columnOptionCheckbox')) {
      series += item.dataset.code; // String of codes with the order of all the checkboxes
      if (item.checked == true) { params += item.dataset.code }; // String of codes with the selected checkboxes only (in the same order)
    }
    // Save results in localStorage
    g_cols = params;
    localStorage.setItem('g_colsAll', series);
    localStorage.setItem('g_cols', g_cols);
    localStorage.setItem('g_nMax', g_nMax);
    localStorage.setItem('g_dh', g_dh);
    //localStorage.setItem('g_hMax', g_hMax);  // We don't store this one in localStorage. It's either in the URL or empty.
    // Create or replace these parameters in the URL search parameters
    let args = new URL(document.location).searchParams;
    args.set('cols', g_cols);
    args.set('nMax', g_nMax);
    args.set('dh', g_dh);
    args.set('hMax', g_hMax);
    // Update the query part of the URL and reload page
    window.location.search = args.toString(); // toString() returns the "foo=1&bar=2&baz=3" part (without "?")
  }

  // DRAG-AND-DROP OPTIONS FOR THE COLUMN HEADERS CHECKBOXES
  function defineDraggableElements () { // Make checkboxes draggable
    // Make column options draggable
    for (let item of document.querySelectorAll('.columnOption')) {
      if (item != item.parentElement.firstElementChild) { // Skip the first element (it remains non-draggable)
        item.setAttribute('draggable', true);
        item.addEventListener('dragstart', dragStart);
        //item.addEventListener('drag', dragMove); // Not used
        item.addEventListener('dragend', dragEnd);
      }
    }
    // Allow dragging-over and dropping
    for (let box of document.querySelectorAll('.columnOption')) {
      box.addEventListener('dragenter', dragEnter);
      box.addEventListener('dragover', dragOver);
      box.addEventListener('dragleave', dragLeave);
      box.addEventListener('drop', dragDrop);
    }
  }

  function dragStart (e) {
    // Store id of the dragged element
    e.dataTransfer.setData('text/plain', e.currentTarget.id);
    // Hide the draggable element from its orignal position (it only shows dragging)
    let item = e.currentTarget;
    setTimeout(() => { item.classList.add('hidden'); }, 0); // Trick!
  }

  function dragEnd (e) {
    // Display back the draggable element
    e.currentTarget.classList.remove('hidden');
  }

  function dragEnter (e) {
    // Allow dropping on a div element (since div is not a valid target by default)
    e.preventDefault();
    // Add class for special display
    e.currentTarget.classList.add('drag-over');
  }

  function dragOver (e) {
    // Allow dropping on a div element (since div is not a valid target by default)
    e.preventDefault();
    // Add class for special display
    e.currentTarget.classList.add('drag-over');
  }

  function dragLeave (e) {
    // Remove class for special display
    e.currentTarget.classList.remove('drag-over');
  }

  function dragDrop (e) {
    // Get element of the event
    let box = e.currentTarget;
    // Remove class for special display
    box.classList.remove('drag-over');
    // Get the dropped element
    let id = e.dataTransfer.getData('text/plain');
    let item = document.getElementById(id);
    // Add the dropped element AFTER this one
    box.parentNode.insertBefore(item, box.nextSibling); // This is a trick to insert AFTER an element...
    // Update numbering of the checkboxes
    renumberColumnOptions();
  }

  function renumberColumnOptions() { // Update numbering of the checkboxes
    let nbr = 0;
    for (let item of document.querySelectorAll('.columnOptionNumber')) {
      nbr++;
      item.innerHTML = nbr.toString().padStart(2,'0') + ". ";
    }
  }
</script>

<script> // ADD SEARCHING AND FILTERING OPTIONS TO TABLES

  // ALLOW ADDING FILTERS TO FIRST ROW OF ALL LONG TABLES
  function addFilterOption() {
    for (let myTable of document.getElementsByTagName('table')) {
      // Ignore tables of certain specific classes
      if (!myTable.classList.contains('tableTotals') && !myTable.classList.contains('tableSummary') && !myTable.closest('.divTableStatus')) {
        let myRow = myTable.rows[0];
        // If first row exists and all its cells are <th> or have a span with a "th" class, then mark the row as header.
        // We also enforce the use of <thead> to ensure that the row won't be included in the tbodies that will be filtered and sorted.
        // And since Chrome 83 (as in Beam Wallet) can only do 'sticky' on 'th' elements, we also change all its 'td' into 'th'.
        if (myRow && (myRow.querySelectorAll('td > span.th').length + myRow.querySelectorAll('th').length == myRow.cells.length)) {
          // If that first row is not already inside a thead (which means it's implicitely inside a tbody), then create a thead and move the row inside it.
          if (myRow.parentNode.nodeName != 'THEAD') {
            let myTHead = myTable.createTHead();
            myTHead.appendChild(myRow);
          }
          // Mark the row as 'header'
          myRow.classList.add('headerRow');
          // Define all cells in this first row as 'th' (remark: any attribute of those cells are lost, but we don't care)
          for (let myTd of myRow.cells) {
            let myTh = document.createElement('th');
            myTh.innerHTML = "<div>" + myTd.innerHTML + "</div>"; // This <div> is important: it will be used later on when filters are activated
            myTd.replaceWith(myTh);
            // Mark the cell as 'header'
            myTh.classList.add('headerCell');
          }
          // Add filters only to tables with more than a 5 lines
          if (myTable.rows.length > 5) {
            myRow.classList.add('filtersOff');
            myRow.addEventListener('click', addSortAndSearch);
            myRow.title = 'Click to activate filters'; // This is for the tooltip
          } else {
            myRow.classList.add('filtersNot');
          }
        }
      }
    }
  }

  // ADD SORT AND SEARCH FILTERS TO FIRST ROW OF A GIVEN TABLE
  function addSortAndSearch(e) {
    // Get element of the event (the first row)
    let myRow = e.currentTarget;

    // Replace previous class and remove event and title (tooltip)
    myRow.classList.remove('filtersOff');
    myRow.classList.add('filtersOn');
    myRow.removeEventListener('click', addSortAndSearch);
    myRow.removeAttribute('title');

    // Apply to each cell of the first row (whether 'th' or 'td', it doesn't matter)
    for (let myHeader of myRow.cells) {
      // Add a class to the existing div (it will be clickable for sorting),
      myHeader.querySelector('div').classList.add('sortable');
      myHeader.querySelector('div').title = 'Sort column';
      // And then add another div below, with a search input.
      let myDiv = document.createElement('div');
      myDiv.classList.add('searchable');
      myDiv.innerHTML = "<input type='text' class='search' title='Enter search term' size='5' placeholder='&#x1F50E;&#xFE0E;&nbsp;' autocomplete='off'>";
      myHeader.appendChild(myDiv);
      // Add event listeners to these elements
      myHeader.querySelector('.sortable').addEventListener('click', sortTable);
      myHeader.querySelector('.search').addEventListener('keyup', filterTable);
    }
  }

  // SORT ROWS BY CLICKING ON HEADERS (first ascending, then descending)
  function sortTable(e) {
    // Declare variables
    let input, col, headRow, table, nbr_tbodies, dir, items;

    // Get element, table and column number of the event
    input = e.currentTarget;
    col = input.closest('th,td').cellIndex;
    headRow = input.closest('tr');
    table = input.closest('table');
    nbr_tbodies = table.tBodies.length;

    // Set the default sorting direction as descending
    // (or switch to ascending if already sorted descending)
    dir = input.classList.contains('desc') ? 'asc' : 'desc';

    // Reset sorting classes and titles in all headers of this table
    for (let myHeader of headRow.getElementsByClassName('sortable')) {
      myHeader.classList.remove('asc');
      myHeader.classList.remove('desc');
      myHeader.title = 'Sort column';
    }

    // Get the list of rows or tbodies to be sorted
    // (Remark: There is always at least one tbody, even if not explictely defined)
    items = nbr_tbodies > 1 ? table.tBodies : table.tBodies[0].rows;
    // Make an array with the items to be sorted
    let itemsArray = Array.from(items);

    // Make an array from the content of the cells in the selected column
    let colArray = itemsArray.map(function (item, index) {
      // Get the content of the cell in the column being sorted
      // (for tbodies with multiple lines, we concatenate the content of their cells in that column)
      let val = '';
      if (nbr_tbodies > 1) {
        // Loop on all rows of the tbody
        for (let trow of item.rows) {
          // Concatenate content of each cell
          if (val != '') { val += '\n' }
          val += trow.cells[col].textContent; // We use 'textContent' because 'innerText' returns and empty string for hidden rows (thus only partially sorting filtered columns)
        }
      } else {
        // Get content of the cell
        val = item.cells[col].textContent;
      }
      // Remove comas (just for numbers to be recognized as such).
      // And add its initial index (it will allow reordering the actual table rows or tbodies).
      let valArray = [val.replace(/,/g, ''), index];
      return valArray;
    });

    // We initialise two collators for sorting:
    // One for "alphabetical sorting" (character by character, insensitive to case and accents).
    // One for "natural sorting" (same, except numbers are treated numerically: "Asset-1" < "Asset-2" < "Asset-10").
    const collator1 = Intl.Collator('en-US', { numeric: false, sensitivity: 'base', usage: 'sort', ignorePunctuation: 'false' });
    const collator2 = Intl.Collator('en-US', { numeric: true, sensitivity: 'base', usage: 'sort', ignorePunctuation: 'false' });

    // Sort the array (in ascending order by default)
    colArray.sort(function ([a, b], [c, d]) {
      // Compare as numbers
      if (!isNaN(a) && !isNaN(c)) { return a - c }
      // Compare as address
      else if (/^[a-fA-F0-9]*$/.test(a) && /^[a-fA-F0-9]*$/.test(c)) { return collator1.compare(a, c) }
      // Compare as other strings
      else { return collator2.compare(a, c) }
    });

    // Reverse the array for descending order
    if (dir == 'desc') { colArray.reverse() }

    // Get the 'parent' of the sorted items (i.e. the tbody in the case of rows, or the table in the case of tbodies)
    // Remark: The parent of a row is always a tbody, even if not explictely defined.
    let parent = items[0].parentNode;
    // Loop through the array of sorted cells to reorder the table rows or tbodies
    for (let sortedCol of colArray) {
      // Move each corresponding row or tbody to the end of the table.
      parent.appendChild(itemsArray[sortedCol[1]]);
    }

    // Update class and title in header by adding the sorting direction
    input.classList.add(dir);
    input.title = dir == 'desc' ? 'Sort ascending' : 'Sort descending';
  }

  // FILTER ROWS (OR GROUPS OF ROWS)
  function filterTable(e) {
    // Declare variables
    let table, tbodies, rows, trows, headers, input, filter, i, ii, j, k, td, txtValue, status;

    // Get tbodies and rows
    table = e.currentTarget.closest('table');
    tbodies = table.tBodies;
    rows = table.rows;
    headers = rows[0].cells;

    // If multiple tbodies are present, filtering will be done by tbodies instead of rows
    // (the inner rows in each tbody thus always being kept together)

    // Initialize results arrays with all 1 (i.e. all rows or tbodies are visible)
    let results_tbodies = new Array(tbodies.length).fill(1);
    let results_rows = new Array(rows.length).fill(1);

    // Always check again all header cells (so that filters on multiple columns can be combined!)
    for (j = 0; j < headers.length; j++) {
      // Get search input field
      input = headers[j].querySelector('.search');
      // Get search query (we use toUpperCase() to perform a case-insensitive search)
      filter = input.value.toUpperCase();
      // Apply search query only if it's non-empty
      if (filter != '') {
        // Loop on all rows within all tbodies
        for (k = 0; k < tbodies.length; k++) {
          // Only test cells if the tbody is not already marked as hidden
          if (results_tbodies[k] != 0) {
            // In case of multiple tbodies, start by hidding the tbody
            // (it will be displayed back if at least one of its rows matches the search query)
            if (tbodies.length > 1) { results_tbodies[k] = 0 }
            // Loop on all rows of the tbody
            trows = tbodies[k].rows;
            for (i = 0; i < trows.length; i++) {
              // Get the overall index of the row in the table (independent of tbodies)
              // Remark: i and ii will be equal in the case of one single tbody
              ii = trows[i].rowIndex;
              // Only test the cell if the row is not already marked as hidden
              if (results_rows[ii] != 0) {
                // Get cell
                td = trows[i].cells[j];
                if (td) {
                  // Get cell content
                  txtValue = td.textContent || td.innerText;
                  // If there are multiple tbodies, then filter by tbodies
                  if (tbodies.length > 1) {
                    // Mark tbody back as visible as soon as one of its rows matches
                    // (and then stop looping on its rows)
                    if (txtValue.toUpperCase().indexOf(filter) != -1) {
                      results_tbodies[k] = 1;
                      break;
                    }
                    // If there is only one tbody, then filter by rows
                  } else {
                    // Hide row if there is no match
                    if (txtValue.toUpperCase().indexOf(filter) == -1) {
                      results_rows[ii] = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    // Special hack to avoid a display bug on Chrome 83 (when used as Beam Wallet DApp):
    // If a tbody is hidden, then each of its rows must also be hidden!
    if (tbodies.length > 1) {
      // Loop on all tbodies
      for (k = 0; k < tbodies.length; k++) {
        // Loop on all rows of the tbody
        trows = tbodies[k].rows;
        for (i = 0; i < trows.length; i++) {
          // Get the overall index of the row in the table (independent of tbodies)
          ii = trows[i].rowIndex;
          // Set status of the row identical to the tbody it belongs to
          results_rows[ii] = results_tbodies[k];
        }
      }
    }
    // Apply final results by setting the visibility of all tbodies and rows
    for (k = 0; k < tbodies.length; k++) {
      status = results_tbodies[k] == 0 ? 'collapse' : 'visible';
      tbodies[k].style.visibility = status;
    }
    for (ii = 1; ii < rows.length; ii++) {
      status = results_rows[ii] == 0 ? 'collapse' : 'visible';
      rows[ii].style.visibility = status;
    }
  }
</script>

<script> // MORE MISCELLANEOUS STUFF

  // SCROLL FUNCTIONS
  window.onscroll = function () { scrollFunction() }

  function scrollFunction() { // When the user scrolls away 40px from top or bottom of the page, show the up or down buttons
    let myTopButton = document.getElementById('TopButton');
    if (document.body.scrollTop > 40 || document.documentElement.scrollTop > 40) {
      myTopButton.style.display = 'block';
    } else {
      myTopButton.style.display = 'none';
    }
    let myBottomButton = document.getElementById('BottomButton');
    if (Math.abs(document.body.scrollHeight - document.body.scrollTop - document.body.clientHeight) > 40 || Math.abs(document.documentElement.scrollHeight - document.documentElement.scrollTop - document.documentElement.clientHeight) > 40) {
      myBottomButton.style.display = 'block';
    } else {
      myBottomButton.style.display = 'none';
    }
  }

  function topFunction() { // Scroll to the top of the document
    document.body.scrollTop = 0; // For Safari
    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
  }

  function bottomFunction() { // Scroll to the bottom of the document
    document.body.scrollTop = Math.abs(document.body.scrollHeight - document.body.clientHeight); // For Safari
    document.documentElement.scrollTop = Math.abs(document.documentElement.scrollHeight - document.documentElement.clientHeight); // For Chrome, Firefox, IE and Opera
  }

  function scrollTo(selector, vertical = 'start', horizontal = 'start', style = 'smooth') { // Scroll up or down to an element in the page
    const destination = document.querySelector(selector); // Returns the first element, or 'null' if there is none
    if (destination) { destination.scrollIntoView({ block:vertical, inline:horizontal, behavior:style }); }
    // Vertical and Horizontal can be: 'start', 'center', 'end' or 'nearest'
    // Style can be: 'smooth', 'instant' or 'auto'
  }

  // TOGGLE DARK MODE
  function toggleDarkMode() {
    let mode = '';
    // For light mode, we add a class to root
    let rootclass = document.querySelector(':root').classList;
    if (rootclass.contains('light')) { rootclass.remove('light') }
    else { rootclass.add('light'); mode = 'light' }
    // Store mode in localStorage (to allow retrieving it across pages)
    localStorage.setItem('mode', mode);
  }
</script>

</body>
</html>
