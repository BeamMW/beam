// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-beam.proto

#ifndef PROTOBUF_INCLUDED_messages_2dbeam_2eproto
#define PROTOBUF_INCLUDED_messages_2dbeam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2dbeam_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2dbeam_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messages_2dbeam_2eproto();
namespace hw {
namespace trezor {
namespace messages {
namespace beam {
class BeamConfirmResponseMessage;
class BeamConfirmResponseMessageDefaultTypeInternal;
extern BeamConfirmResponseMessageDefaultTypeInternal _BeamConfirmResponseMessage_default_instance_;
class BeamDisplayMessage;
class BeamDisplayMessageDefaultTypeInternal;
extern BeamDisplayMessageDefaultTypeInternal _BeamDisplayMessage_default_instance_;
class BeamECCImage;
class BeamECCImageDefaultTypeInternal;
extern BeamECCImageDefaultTypeInternal _BeamECCImage_default_instance_;
class BeamGenerateKey;
class BeamGenerateKeyDefaultTypeInternal;
extern BeamGenerateKeyDefaultTypeInternal _BeamGenerateKey_default_instance_;
class BeamGenerateNonce;
class BeamGenerateNonceDefaultTypeInternal;
extern BeamGenerateNonceDefaultTypeInternal _BeamGenerateNonce_default_instance_;
class BeamGetOwnerKey;
class BeamGetOwnerKeyDefaultTypeInternal;
extern BeamGetOwnerKeyDefaultTypeInternal _BeamGetOwnerKey_default_instance_;
class BeamGetPublicKey;
class BeamGetPublicKeyDefaultTypeInternal;
extern BeamGetPublicKeyDefaultTypeInternal _BeamGetPublicKey_default_instance_;
class BeamKeyIDV;
class BeamKeyIDVDefaultTypeInternal;
extern BeamKeyIDVDefaultTypeInternal _BeamKeyIDV_default_instance_;
class BeamOwnerKey;
class BeamOwnerKeyDefaultTypeInternal;
extern BeamOwnerKeyDefaultTypeInternal _BeamOwnerKey_default_instance_;
class BeamPublicKey;
class BeamPublicKeyDefaultTypeInternal;
extern BeamPublicKeyDefaultTypeInternal _BeamPublicKey_default_instance_;
class BeamSignMessage;
class BeamSignMessageDefaultTypeInternal;
extern BeamSignMessageDefaultTypeInternal _BeamSignMessage_default_instance_;
class BeamSignReceiveTx;
class BeamSignReceiveTxDefaultTypeInternal;
extern BeamSignReceiveTxDefaultTypeInternal _BeamSignReceiveTx_default_instance_;
class BeamSignReceiveTx_BeamPayment;
class BeamSignReceiveTx_BeamPaymentDefaultTypeInternal;
extern BeamSignReceiveTx_BeamPaymentDefaultTypeInternal _BeamSignReceiveTx_BeamPayment_default_instance_;
class BeamSignSendTx;
class BeamSignSendTxDefaultTypeInternal;
extern BeamSignSendTxDefaultTypeInternal _BeamSignSendTx_default_instance_;
class BeamSignSendTx_BeamPayment;
class BeamSignSendTx_BeamPaymentDefaultTypeInternal;
extern BeamSignSendTx_BeamPaymentDefaultTypeInternal _BeamSignSendTx_BeamPayment_default_instance_;
class BeamSignature;
class BeamSignatureDefaultTypeInternal;
extern BeamSignatureDefaultTypeInternal _BeamSignature_default_instance_;
class BeamSignedMessage;
class BeamSignedMessageDefaultTypeInternal;
extern BeamSignedMessageDefaultTypeInternal _BeamSignedMessage_default_instance_;
class BeamSignedTx;
class BeamSignedTxDefaultTypeInternal;
extern BeamSignedTxDefaultTypeInternal _BeamSignedTx_default_instance_;
class BeamVerifyMessage;
class BeamVerifyMessageDefaultTypeInternal;
extern BeamVerifyMessageDefaultTypeInternal _BeamVerifyMessage_default_instance_;
}  // namespace beam
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> ::hw::trezor::messages::beam::BeamConfirmResponseMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamConfirmResponseMessage>(Arena*);
template<> ::hw::trezor::messages::beam::BeamDisplayMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamDisplayMessage>(Arena*);
template<> ::hw::trezor::messages::beam::BeamECCImage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCImage>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGenerateKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGenerateKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGenerateNonce* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGenerateNonce>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGetOwnerKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGetOwnerKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGetPublicKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGetPublicKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamKeyIDV* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamKeyIDV>(Arena*);
template<> ::hw::trezor::messages::beam::BeamOwnerKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamOwnerKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamPublicKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamPublicKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignMessage>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignReceiveTx* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignReceiveTx>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignSendTx* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignSendTx>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignature* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignedMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignedMessage>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignedTx* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignedTx>(Arena*);
template<> ::hw::trezor::messages::beam::BeamVerifyMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamVerifyMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hw {
namespace trezor {
namespace messages {
namespace beam {

// ===================================================================

class BeamKeyIDV final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamKeyIDV) */ {
 public:
  BeamKeyIDV();
  virtual ~BeamKeyIDV();

  BeamKeyIDV(const BeamKeyIDV& from);

  inline BeamKeyIDV& operator=(const BeamKeyIDV& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamKeyIDV(BeamKeyIDV&& from) noexcept
    : BeamKeyIDV() {
    *this = ::std::move(from);
  }

  inline BeamKeyIDV& operator=(BeamKeyIDV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamKeyIDV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamKeyIDV* internal_default_instance() {
    return reinterpret_cast<const BeamKeyIDV*>(
               &_BeamKeyIDV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BeamKeyIDV* other);
  friend void swap(BeamKeyIDV& a, BeamKeyIDV& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamKeyIDV* New() const final {
    return CreateMaybeMessage<BeamKeyIDV>(nullptr);
  }

  BeamKeyIDV* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamKeyIDV>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamKeyIDV& from);
  void MergeFrom(const BeamKeyIDV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamKeyIDV* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 idx = 1;
  bool has_idx() const;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::google::protobuf::uint64 idx() const;
  void set_idx(::google::protobuf::uint64 value);

  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 sub_idx = 3;
  bool has_sub_idx() const;
  void clear_sub_idx();
  static const int kSubIdxFieldNumber = 3;
  ::google::protobuf::uint32 sub_idx() const;
  void set_sub_idx(::google::protobuf::uint32 value);

  // optional uint64 value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamKeyIDV)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 idx_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 sub_idx_;
  ::google::protobuf::uint64 value_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGenerateKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGenerateKey) */ {
 public:
  BeamGenerateKey();
  virtual ~BeamGenerateKey();

  BeamGenerateKey(const BeamGenerateKey& from);

  inline BeamGenerateKey& operator=(const BeamGenerateKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGenerateKey(BeamGenerateKey&& from) noexcept
    : BeamGenerateKey() {
    *this = ::std::move(from);
  }

  inline BeamGenerateKey& operator=(BeamGenerateKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGenerateKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGenerateKey* internal_default_instance() {
    return reinterpret_cast<const BeamGenerateKey*>(
               &_BeamGenerateKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BeamGenerateKey* other);
  friend void swap(BeamGenerateKey& a, BeamGenerateKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGenerateKey* New() const final {
    return CreateMaybeMessage<BeamGenerateKey>(nullptr);
  }

  BeamGenerateKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGenerateKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGenerateKey& from);
  void MergeFrom(const BeamGenerateKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGenerateKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
  bool has_kidv() const;
  void clear_kidv();
  static const int kKidvFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamKeyIDV& kidv() const;
  ::hw::trezor::messages::beam::BeamKeyIDV* release_kidv();
  ::hw::trezor::messages::beam::BeamKeyIDV* mutable_kidv();
  void set_allocated_kidv(::hw::trezor::messages::beam::BeamKeyIDV* kidv);

  // optional bool is_coin_key = 2;
  bool has_is_coin_key() const;
  void clear_is_coin_key();
  static const int kIsCoinKeyFieldNumber = 2;
  bool is_coin_key() const;
  void set_is_coin_key(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGenerateKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamKeyIDV* kidv_;
  bool is_coin_key_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGenerateNonce final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGenerateNonce) */ {
 public:
  BeamGenerateNonce();
  virtual ~BeamGenerateNonce();

  BeamGenerateNonce(const BeamGenerateNonce& from);

  inline BeamGenerateNonce& operator=(const BeamGenerateNonce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGenerateNonce(BeamGenerateNonce&& from) noexcept
    : BeamGenerateNonce() {
    *this = ::std::move(from);
  }

  inline BeamGenerateNonce& operator=(BeamGenerateNonce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGenerateNonce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGenerateNonce* internal_default_instance() {
    return reinterpret_cast<const BeamGenerateNonce*>(
               &_BeamGenerateNonce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BeamGenerateNonce* other);
  friend void swap(BeamGenerateNonce& a, BeamGenerateNonce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGenerateNonce* New() const final {
    return CreateMaybeMessage<BeamGenerateNonce>(nullptr);
  }

  BeamGenerateNonce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGenerateNonce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGenerateNonce& from);
  void MergeFrom(const BeamGenerateNonce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGenerateNonce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 slot = 1;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 1;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGenerateNonce)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 slot_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamECCImage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamECCImage) */ {
 public:
  BeamECCImage();
  virtual ~BeamECCImage();

  BeamECCImage(const BeamECCImage& from);

  inline BeamECCImage& operator=(const BeamECCImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamECCImage(BeamECCImage&& from) noexcept
    : BeamECCImage() {
    *this = ::std::move(from);
  }

  inline BeamECCImage& operator=(BeamECCImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamECCImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamECCImage* internal_default_instance() {
    return reinterpret_cast<const BeamECCImage*>(
               &_BeamECCImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BeamECCImage* other);
  friend void swap(BeamECCImage& a, BeamECCImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamECCImage* New() const final {
    return CreateMaybeMessage<BeamECCImage>(nullptr);
  }

  BeamECCImage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamECCImage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamECCImage& from);
  void MergeFrom(const BeamECCImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamECCImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes image_x = 1;
  bool has_image_x() const;
  void clear_image_x();
  static const int kImageXFieldNumber = 1;
  const ::std::string& image_x() const;
  void set_image_x(const ::std::string& value);
  #if LANG_CXX11
  void set_image_x(::std::string&& value);
  #endif
  void set_image_x(const char* value);
  void set_image_x(const void* value, size_t size);
  ::std::string* mutable_image_x();
  ::std::string* release_image_x();
  void set_allocated_image_x(::std::string* image_x);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamECCImage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr image_x_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignature) */ {
 public:
  BeamSignature();
  virtual ~BeamSignature();

  BeamSignature(const BeamSignature& from);

  inline BeamSignature& operator=(const BeamSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignature(BeamSignature&& from) noexcept
    : BeamSignature() {
    *this = ::std::move(from);
  }

  inline BeamSignature& operator=(BeamSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignature* internal_default_instance() {
    return reinterpret_cast<const BeamSignature*>(
               &_BeamSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BeamSignature* other);
  friend void swap(BeamSignature& a, BeamSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignature* New() const final {
    return CreateMaybeMessage<BeamSignature>(nullptr);
  }

  BeamSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignature& from);
  void MergeFrom(const BeamSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes nonce_pub_x = 1;
  bool has_nonce_pub_x() const;
  void clear_nonce_pub_x();
  static const int kNoncePubXFieldNumber = 1;
  const ::std::string& nonce_pub_x() const;
  void set_nonce_pub_x(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce_pub_x(::std::string&& value);
  #endif
  void set_nonce_pub_x(const char* value);
  void set_nonce_pub_x(const void* value, size_t size);
  ::std::string* mutable_nonce_pub_x();
  ::std::string* release_nonce_pub_x();
  void set_allocated_nonce_pub_x(::std::string* nonce_pub_x);

  // optional bytes nonce_pub_y = 2;
  bool has_nonce_pub_y() const;
  void clear_nonce_pub_y();
  static const int kNoncePubYFieldNumber = 2;
  const ::std::string& nonce_pub_y() const;
  void set_nonce_pub_y(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce_pub_y(::std::string&& value);
  #endif
  void set_nonce_pub_y(const char* value);
  void set_nonce_pub_y(const void* value, size_t size);
  ::std::string* mutable_nonce_pub_y();
  ::std::string* release_nonce_pub_y();
  void set_allocated_nonce_pub_y(::std::string* nonce_pub_y);

  // optional bytes sign_k = 3;
  bool has_sign_k() const;
  void clear_sign_k();
  static const int kSignKFieldNumber = 3;
  const ::std::string& sign_k() const;
  void set_sign_k(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_k(::std::string&& value);
  #endif
  void set_sign_k(const char* value);
  void set_sign_k(const void* value, size_t size);
  ::std::string* mutable_sign_k();
  ::std::string* release_sign_k();
  void set_allocated_sign_k(::std::string* sign_k);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignature)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nonce_pub_x_;
  ::google::protobuf::internal::ArenaStringPtr nonce_pub_y_;
  ::google::protobuf::internal::ArenaStringPtr sign_k_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamDisplayMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamDisplayMessage) */ {
 public:
  BeamDisplayMessage();
  virtual ~BeamDisplayMessage();

  BeamDisplayMessage(const BeamDisplayMessage& from);

  inline BeamDisplayMessage& operator=(const BeamDisplayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamDisplayMessage(BeamDisplayMessage&& from) noexcept
    : BeamDisplayMessage() {
    *this = ::std::move(from);
  }

  inline BeamDisplayMessage& operator=(BeamDisplayMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamDisplayMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamDisplayMessage* internal_default_instance() {
    return reinterpret_cast<const BeamDisplayMessage*>(
               &_BeamDisplayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BeamDisplayMessage* other);
  friend void swap(BeamDisplayMessage& a, BeamDisplayMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamDisplayMessage* New() const final {
    return CreateMaybeMessage<BeamDisplayMessage>(nullptr);
  }

  BeamDisplayMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamDisplayMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamDisplayMessage& from);
  void MergeFrom(const BeamDisplayMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamDisplayMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional bool show_display = 2;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 2;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamDisplayMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamConfirmResponseMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamConfirmResponseMessage) */ {
 public:
  BeamConfirmResponseMessage();
  virtual ~BeamConfirmResponseMessage();

  BeamConfirmResponseMessage(const BeamConfirmResponseMessage& from);

  inline BeamConfirmResponseMessage& operator=(const BeamConfirmResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamConfirmResponseMessage(BeamConfirmResponseMessage&& from) noexcept
    : BeamConfirmResponseMessage() {
    *this = ::std::move(from);
  }

  inline BeamConfirmResponseMessage& operator=(BeamConfirmResponseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamConfirmResponseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamConfirmResponseMessage* internal_default_instance() {
    return reinterpret_cast<const BeamConfirmResponseMessage*>(
               &_BeamConfirmResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BeamConfirmResponseMessage* other);
  friend void swap(BeamConfirmResponseMessage& a, BeamConfirmResponseMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamConfirmResponseMessage* New() const final {
    return CreateMaybeMessage<BeamConfirmResponseMessage>(nullptr);
  }

  BeamConfirmResponseMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamConfirmResponseMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamConfirmResponseMessage& from);
  void MergeFrom(const BeamConfirmResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamConfirmResponseMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional bool response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  bool response() const;
  void set_response(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamConfirmResponseMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  bool response_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignMessage) */ {
 public:
  BeamSignMessage();
  virtual ~BeamSignMessage();

  BeamSignMessage(const BeamSignMessage& from);

  inline BeamSignMessage& operator=(const BeamSignMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignMessage(BeamSignMessage&& from) noexcept
    : BeamSignMessage() {
    *this = ::std::move(from);
  }

  inline BeamSignMessage& operator=(BeamSignMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignMessage* internal_default_instance() {
    return reinterpret_cast<const BeamSignMessage*>(
               &_BeamSignMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BeamSignMessage* other);
  friend void swap(BeamSignMessage& a, BeamSignMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignMessage* New() const final {
    return CreateMaybeMessage<BeamSignMessage>(nullptr);
  }

  BeamSignMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignMessage& from);
  void MergeFrom(const BeamSignMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional bool show_display = 2;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 2;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignedMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignedMessage) */ {
 public:
  BeamSignedMessage();
  virtual ~BeamSignedMessage();

  BeamSignedMessage(const BeamSignedMessage& from);

  inline BeamSignedMessage& operator=(const BeamSignedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignedMessage(BeamSignedMessage&& from) noexcept
    : BeamSignedMessage() {
    *this = ::std::move(from);
  }

  inline BeamSignedMessage& operator=(BeamSignedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignedMessage* internal_default_instance() {
    return reinterpret_cast<const BeamSignedMessage*>(
               &_BeamSignedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BeamSignedMessage* other);
  friend void swap(BeamSignedMessage& a, BeamSignedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignedMessage* New() const final {
    return CreateMaybeMessage<BeamSignedMessage>(nullptr);
  }

  BeamSignedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignedMessage& from);
  void MergeFrom(const BeamSignedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamSignature& signature() const;
  ::hw::trezor::messages::beam::BeamSignature* release_signature();
  ::hw::trezor::messages::beam::BeamSignature* mutable_signature();
  void set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignedMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamSignature* signature_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamVerifyMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamVerifyMessage) */ {
 public:
  BeamVerifyMessage();
  virtual ~BeamVerifyMessage();

  BeamVerifyMessage(const BeamVerifyMessage& from);

  inline BeamVerifyMessage& operator=(const BeamVerifyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamVerifyMessage(BeamVerifyMessage&& from) noexcept
    : BeamVerifyMessage() {
    *this = ::std::move(from);
  }

  inline BeamVerifyMessage& operator=(BeamVerifyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamVerifyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamVerifyMessage* internal_default_instance() {
    return reinterpret_cast<const BeamVerifyMessage*>(
               &_BeamVerifyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BeamVerifyMessage* other);
  friend void swap(BeamVerifyMessage& a, BeamVerifyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamVerifyMessage* New() const final {
    return CreateMaybeMessage<BeamVerifyMessage>(nullptr);
  }

  BeamVerifyMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamVerifyMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamVerifyMessage& from);
  void MergeFrom(const BeamVerifyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamVerifyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamSignature& signature() const;
  ::hw::trezor::messages::beam::BeamSignature* release_signature();
  ::hw::trezor::messages::beam::BeamSignature* mutable_signature();
  void set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature);

  // optional .hw.trezor.messages.beam.BeamPublicKey public_key = 2;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::hw::trezor::messages::beam::BeamPublicKey& public_key() const;
  ::hw::trezor::messages::beam::BeamPublicKey* release_public_key();
  ::hw::trezor::messages::beam::BeamPublicKey* mutable_public_key();
  void set_allocated_public_key(::hw::trezor::messages::beam::BeamPublicKey* public_key);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamVerifyMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::hw::trezor::messages::beam::BeamSignature* signature_;
  ::hw::trezor::messages::beam::BeamPublicKey* public_key_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGetPublicKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGetPublicKey) */ {
 public:
  BeamGetPublicKey();
  virtual ~BeamGetPublicKey();

  BeamGetPublicKey(const BeamGetPublicKey& from);

  inline BeamGetPublicKey& operator=(const BeamGetPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGetPublicKey(BeamGetPublicKey&& from) noexcept
    : BeamGetPublicKey() {
    *this = ::std::move(from);
  }

  inline BeamGetPublicKey& operator=(BeamGetPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGetPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGetPublicKey* internal_default_instance() {
    return reinterpret_cast<const BeamGetPublicKey*>(
               &_BeamGetPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(BeamGetPublicKey* other);
  friend void swap(BeamGetPublicKey& a, BeamGetPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGetPublicKey* New() const final {
    return CreateMaybeMessage<BeamGetPublicKey>(nullptr);
  }

  BeamGetPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGetPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGetPublicKey& from);
  void MergeFrom(const BeamGetPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGetPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool show_display = 1;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 1;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGetPublicKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamPublicKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamPublicKey) */ {
 public:
  BeamPublicKey();
  virtual ~BeamPublicKey();

  BeamPublicKey(const BeamPublicKey& from);

  inline BeamPublicKey& operator=(const BeamPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamPublicKey(BeamPublicKey&& from) noexcept
    : BeamPublicKey() {
    *this = ::std::move(from);
  }

  inline BeamPublicKey& operator=(BeamPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamPublicKey* internal_default_instance() {
    return reinterpret_cast<const BeamPublicKey*>(
               &_BeamPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(BeamPublicKey* other);
  friend void swap(BeamPublicKey& a, BeamPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamPublicKey* New() const final {
    return CreateMaybeMessage<BeamPublicKey>(nullptr);
  }

  BeamPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamPublicKey& from);
  void MergeFrom(const BeamPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes pub_x = 1;
  bool has_pub_x() const;
  void clear_pub_x();
  static const int kPubXFieldNumber = 1;
  const ::std::string& pub_x() const;
  void set_pub_x(const ::std::string& value);
  #if LANG_CXX11
  void set_pub_x(::std::string&& value);
  #endif
  void set_pub_x(const char* value);
  void set_pub_x(const void* value, size_t size);
  ::std::string* mutable_pub_x();
  ::std::string* release_pub_x();
  void set_allocated_pub_x(::std::string* pub_x);

  // optional bytes pub_y = 2;
  bool has_pub_y() const;
  void clear_pub_y();
  static const int kPubYFieldNumber = 2;
  const ::std::string& pub_y() const;
  void set_pub_y(const ::std::string& value);
  #if LANG_CXX11
  void set_pub_y(::std::string&& value);
  #endif
  void set_pub_y(const char* value);
  void set_pub_y(const void* value, size_t size);
  ::std::string* mutable_pub_y();
  ::std::string* release_pub_y();
  void set_allocated_pub_y(::std::string* pub_y);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamPublicKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pub_x_;
  ::google::protobuf::internal::ArenaStringPtr pub_y_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGetOwnerKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGetOwnerKey) */ {
 public:
  BeamGetOwnerKey();
  virtual ~BeamGetOwnerKey();

  BeamGetOwnerKey(const BeamGetOwnerKey& from);

  inline BeamGetOwnerKey& operator=(const BeamGetOwnerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGetOwnerKey(BeamGetOwnerKey&& from) noexcept
    : BeamGetOwnerKey() {
    *this = ::std::move(from);
  }

  inline BeamGetOwnerKey& operator=(BeamGetOwnerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGetOwnerKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGetOwnerKey* internal_default_instance() {
    return reinterpret_cast<const BeamGetOwnerKey*>(
               &_BeamGetOwnerKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(BeamGetOwnerKey* other);
  friend void swap(BeamGetOwnerKey& a, BeamGetOwnerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGetOwnerKey* New() const final {
    return CreateMaybeMessage<BeamGetOwnerKey>(nullptr);
  }

  BeamGetOwnerKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGetOwnerKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGetOwnerKey& from);
  void MergeFrom(const BeamGetOwnerKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGetOwnerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool show_display = 1;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 1;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGetOwnerKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamOwnerKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamOwnerKey) */ {
 public:
  BeamOwnerKey();
  virtual ~BeamOwnerKey();

  BeamOwnerKey(const BeamOwnerKey& from);

  inline BeamOwnerKey& operator=(const BeamOwnerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamOwnerKey(BeamOwnerKey&& from) noexcept
    : BeamOwnerKey() {
    *this = ::std::move(from);
  }

  inline BeamOwnerKey& operator=(BeamOwnerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamOwnerKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamOwnerKey* internal_default_instance() {
    return reinterpret_cast<const BeamOwnerKey*>(
               &_BeamOwnerKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(BeamOwnerKey* other);
  friend void swap(BeamOwnerKey& a, BeamOwnerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamOwnerKey* New() const final {
    return CreateMaybeMessage<BeamOwnerKey>(nullptr);
  }

  BeamOwnerKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamOwnerKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamOwnerKey& from);
  void MergeFrom(const BeamOwnerKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamOwnerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamOwnerKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignSendTx_BeamPayment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment) */ {
 public:
  BeamSignSendTx_BeamPayment();
  virtual ~BeamSignSendTx_BeamPayment();

  BeamSignSendTx_BeamPayment(const BeamSignSendTx_BeamPayment& from);

  inline BeamSignSendTx_BeamPayment& operator=(const BeamSignSendTx_BeamPayment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignSendTx_BeamPayment(BeamSignSendTx_BeamPayment&& from) noexcept
    : BeamSignSendTx_BeamPayment() {
    *this = ::std::move(from);
  }

  inline BeamSignSendTx_BeamPayment& operator=(BeamSignSendTx_BeamPayment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignSendTx_BeamPayment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignSendTx_BeamPayment* internal_default_instance() {
    return reinterpret_cast<const BeamSignSendTx_BeamPayment*>(
               &_BeamSignSendTx_BeamPayment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(BeamSignSendTx_BeamPayment* other);
  friend void swap(BeamSignSendTx_BeamPayment& a, BeamSignSendTx_BeamPayment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignSendTx_BeamPayment* New() const final {
    return CreateMaybeMessage<BeamSignSendTx_BeamPayment>(nullptr);
  }

  BeamSignSendTx_BeamPayment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignSendTx_BeamPayment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignSendTx_BeamPayment& from);
  void MergeFrom(const BeamSignSendTx_BeamPayment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignSendTx_BeamPayment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  #if LANG_CXX11
  void set_destination(::std::string&& value);
  #endif
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);

  // optional uint64 amount = 1;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint32 destination_tag = 3;
  bool has_destination_tag() const;
  void clear_destination_tag();
  static const int kDestinationTagFieldNumber = 3;
  ::google::protobuf::uint32 destination_tag() const;
  void set_destination_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 destination_tag_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignSendTx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignSendTx) */ {
 public:
  BeamSignSendTx();
  virtual ~BeamSignSendTx();

  BeamSignSendTx(const BeamSignSendTx& from);

  inline BeamSignSendTx& operator=(const BeamSignSendTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignSendTx(BeamSignSendTx&& from) noexcept
    : BeamSignSendTx() {
    *this = ::std::move(from);
  }

  inline BeamSignSendTx& operator=(BeamSignSendTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignSendTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignSendTx* internal_default_instance() {
    return reinterpret_cast<const BeamSignSendTx*>(
               &_BeamSignSendTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(BeamSignSendTx* other);
  friend void swap(BeamSignSendTx& a, BeamSignSendTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignSendTx* New() const final {
    return CreateMaybeMessage<BeamSignSendTx>(nullptr);
  }

  BeamSignSendTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignSendTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignSendTx& from);
  void MergeFrom(const BeamSignSendTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignSendTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BeamSignSendTx_BeamPayment BeamPayment;

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional .hw.trezor.messages.beam.BeamSignSendTx.BeamPayment payment = 4;
  bool has_payment() const;
  void clear_payment();
  static const int kPaymentFieldNumber = 4;
  const ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment& payment() const;
  ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* release_payment();
  ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* mutable_payment();
  void set_allocated_payment(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* payment);

  // optional uint64 fee = 2;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 2;
  ::google::protobuf::uint64 fee() const;
  void set_fee(::google::protobuf::uint64 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignSendTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* payment_;
  ::google::protobuf::uint64 fee_;
  ::google::protobuf::uint32 flags_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignReceiveTx_BeamPayment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment) */ {
 public:
  BeamSignReceiveTx_BeamPayment();
  virtual ~BeamSignReceiveTx_BeamPayment();

  BeamSignReceiveTx_BeamPayment(const BeamSignReceiveTx_BeamPayment& from);

  inline BeamSignReceiveTx_BeamPayment& operator=(const BeamSignReceiveTx_BeamPayment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignReceiveTx_BeamPayment(BeamSignReceiveTx_BeamPayment&& from) noexcept
    : BeamSignReceiveTx_BeamPayment() {
    *this = ::std::move(from);
  }

  inline BeamSignReceiveTx_BeamPayment& operator=(BeamSignReceiveTx_BeamPayment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignReceiveTx_BeamPayment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignReceiveTx_BeamPayment* internal_default_instance() {
    return reinterpret_cast<const BeamSignReceiveTx_BeamPayment*>(
               &_BeamSignReceiveTx_BeamPayment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(BeamSignReceiveTx_BeamPayment* other);
  friend void swap(BeamSignReceiveTx_BeamPayment& a, BeamSignReceiveTx_BeamPayment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignReceiveTx_BeamPayment* New() const final {
    return CreateMaybeMessage<BeamSignReceiveTx_BeamPayment>(nullptr);
  }

  BeamSignReceiveTx_BeamPayment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignReceiveTx_BeamPayment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignReceiveTx_BeamPayment& from);
  void MergeFrom(const BeamSignReceiveTx_BeamPayment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignReceiveTx_BeamPayment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  #if LANG_CXX11
  void set_destination(::std::string&& value);
  #endif
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);

  // optional uint64 amount = 1;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint32 destination_tag = 3;
  bool has_destination_tag() const;
  void clear_destination_tag();
  static const int kDestinationTagFieldNumber = 3;
  ::google::protobuf::uint32 destination_tag() const;
  void set_destination_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 destination_tag_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignReceiveTx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignReceiveTx) */ {
 public:
  BeamSignReceiveTx();
  virtual ~BeamSignReceiveTx();

  BeamSignReceiveTx(const BeamSignReceiveTx& from);

  inline BeamSignReceiveTx& operator=(const BeamSignReceiveTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignReceiveTx(BeamSignReceiveTx&& from) noexcept
    : BeamSignReceiveTx() {
    *this = ::std::move(from);
  }

  inline BeamSignReceiveTx& operator=(BeamSignReceiveTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignReceiveTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignReceiveTx* internal_default_instance() {
    return reinterpret_cast<const BeamSignReceiveTx*>(
               &_BeamSignReceiveTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(BeamSignReceiveTx* other);
  friend void swap(BeamSignReceiveTx& a, BeamSignReceiveTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignReceiveTx* New() const final {
    return CreateMaybeMessage<BeamSignReceiveTx>(nullptr);
  }

  BeamSignReceiveTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignReceiveTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignReceiveTx& from);
  void MergeFrom(const BeamSignReceiveTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignReceiveTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BeamSignReceiveTx_BeamPayment BeamPayment;

  // accessors -------------------------------------------------------

  // repeated uint32 address_n = 1;
  int address_n_size() const;
  void clear_address_n();
  static const int kAddressNFieldNumber = 1;
  ::google::protobuf::uint32 address_n(int index) const;
  void set_address_n(int index, ::google::protobuf::uint32 value);
  void add_address_n(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      address_n() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_address_n();

  // optional .hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment payment = 4;
  bool has_payment() const;
  void clear_payment();
  static const int kPaymentFieldNumber = 4;
  const ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment& payment() const;
  ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* release_payment();
  ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* mutable_payment();
  void set_allocated_payment(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* payment);

  // optional .hw.trezor.messages.beam.BeamSignature signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::hw::trezor::messages::beam::BeamSignature& signature() const;
  ::hw::trezor::messages::beam::BeamSignature* release_signature();
  ::hw::trezor::messages::beam::BeamSignature* mutable_signature();
  void set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature);

  // optional uint64 fee = 2;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 2;
  ::google::protobuf::uint64 fee() const;
  void set_fee(::google::protobuf::uint64 value);

  // optional uint32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 3;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignReceiveTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > address_n_;
  ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* payment_;
  ::hw::trezor::messages::beam::BeamSignature* signature_;
  ::google::protobuf::uint64 fee_;
  ::google::protobuf::uint32 flags_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignedTx final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignedTx) */ {
 public:
  BeamSignedTx();
  virtual ~BeamSignedTx();

  BeamSignedTx(const BeamSignedTx& from);

  inline BeamSignedTx& operator=(const BeamSignedTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignedTx(BeamSignedTx&& from) noexcept
    : BeamSignedTx() {
    *this = ::std::move(from);
  }

  inline BeamSignedTx& operator=(BeamSignedTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignedTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignedTx* internal_default_instance() {
    return reinterpret_cast<const BeamSignedTx*>(
               &_BeamSignedTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(BeamSignedTx* other);
  friend void swap(BeamSignedTx& a, BeamSignedTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignedTx* New() const final {
    return CreateMaybeMessage<BeamSignedTx>(nullptr);
  }

  BeamSignedTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignedTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignedTx& from);
  void MergeFrom(const BeamSignedTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignedTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // optional bytes serialized_tx = 2;
  bool has_serialized_tx() const;
  void clear_serialized_tx();
  static const int kSerializedTxFieldNumber = 2;
  const ::std::string& serialized_tx() const;
  void set_serialized_tx(const ::std::string& value);
  #if LANG_CXX11
  void set_serialized_tx(::std::string&& value);
  #endif
  void set_serialized_tx(const char* value);
  void set_serialized_tx(const void* value, size_t size);
  ::std::string* mutable_serialized_tx();
  ::std::string* release_serialized_tx();
  void set_allocated_serialized_tx(::std::string* serialized_tx);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignedTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr serialized_tx_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeamKeyIDV

// optional uint64 idx = 1;
inline bool BeamKeyIDV::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamKeyIDV::clear_idx() {
  idx_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 BeamKeyIDV::idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.idx)
  return idx_;
}
inline void BeamKeyIDV::set_idx(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.idx)
}

// optional uint32 type = 2;
inline bool BeamKeyIDV::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamKeyIDV::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 BeamKeyIDV::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.type)
  return type_;
}
inline void BeamKeyIDV::set_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.type)
}

// optional uint32 sub_idx = 3;
inline bool BeamKeyIDV::has_sub_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamKeyIDV::clear_sub_idx() {
  sub_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamKeyIDV::sub_idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.sub_idx)
  return sub_idx_;
}
inline void BeamKeyIDV::set_sub_idx(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sub_idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.sub_idx)
}

// optional uint64 value = 4;
inline bool BeamKeyIDV::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamKeyIDV::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 BeamKeyIDV::value() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.value)
  return value_;
}
inline void BeamKeyIDV::set_value(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  value_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.value)
}

// -------------------------------------------------------------------

// BeamGenerateKey

// optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
inline bool BeamGenerateKey::has_kidv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGenerateKey::clear_kidv() {
  if (kidv_ != nullptr) kidv_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamKeyIDV& BeamGenerateKey::kidv() const {
  const ::hw::trezor::messages::beam::BeamKeyIDV* p = kidv_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateKey.kidv)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamKeyIDV*>(
      &::hw::trezor::messages::beam::_BeamKeyIDV_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamGenerateKey::release_kidv() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamGenerateKey.kidv)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamKeyIDV* temp = kidv_;
  kidv_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamGenerateKey::mutable_kidv() {
  _has_bits_[0] |= 0x00000001u;
  if (kidv_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamKeyIDV>(GetArenaNoVirtual());
    kidv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamGenerateKey.kidv)
  return kidv_;
}
inline void BeamGenerateKey::set_allocated_kidv(::hw::trezor::messages::beam::BeamKeyIDV* kidv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kidv_;
  }
  if (kidv) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kidv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kidv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kidv_ = kidv;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamGenerateKey.kidv)
}

// optional bool is_coin_key = 2;
inline bool BeamGenerateKey::has_is_coin_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamGenerateKey::clear_is_coin_key() {
  is_coin_key_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BeamGenerateKey::is_coin_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateKey.is_coin_key)
  return is_coin_key_;
}
inline void BeamGenerateKey::set_is_coin_key(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_coin_key_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGenerateKey.is_coin_key)
}

// -------------------------------------------------------------------

// BeamGenerateNonce

// optional uint32 slot = 1;
inline bool BeamGenerateNonce::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGenerateNonce::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 BeamGenerateNonce::slot() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateNonce.slot)
  return slot_;
}
inline void BeamGenerateNonce::set_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGenerateNonce.slot)
}

// -------------------------------------------------------------------

// BeamECCImage

// optional bytes image_x = 1;
inline bool BeamECCImage::has_image_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamECCImage::clear_image_x() {
  image_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamECCImage::image_x() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamECCImage.image_x)
  return image_x_.GetNoArena();
}
inline void BeamECCImage::set_image_x(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamECCImage.image_x)
}
#if LANG_CXX11
inline void BeamECCImage::set_image_x(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamECCImage.image_x)
}
#endif
inline void BeamECCImage::set_image_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamECCImage.image_x)
}
inline void BeamECCImage::set_image_x(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamECCImage.image_x)
}
inline ::std::string* BeamECCImage::mutable_image_x() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamECCImage.image_x)
  return image_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamECCImage::release_image_x() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamECCImage.image_x)
  if (!has_image_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamECCImage::set_allocated_image_x(::std::string* image_x) {
  if (image_x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_x);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamECCImage.image_x)
}

// -------------------------------------------------------------------

// BeamSignature

// optional bytes nonce_pub_x = 1;
inline bool BeamSignature::has_nonce_pub_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignature::clear_nonce_pub_x() {
  nonce_pub_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignature::nonce_pub_x() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
  return nonce_pub_x_.GetNoArena();
}
inline void BeamSignature::set_nonce_pub_x(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nonce_pub_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
}
#if LANG_CXX11
inline void BeamSignature::set_nonce_pub_x(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nonce_pub_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
}
#endif
inline void BeamSignature::set_nonce_pub_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nonce_pub_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
}
inline void BeamSignature::set_nonce_pub_x(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nonce_pub_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
}
inline ::std::string* BeamSignature::mutable_nonce_pub_x() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
  return nonce_pub_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignature::release_nonce_pub_x() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
  if (!has_nonce_pub_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nonce_pub_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignature::set_allocated_nonce_pub_x(::std::string* nonce_pub_x) {
  if (nonce_pub_x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nonce_pub_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce_pub_x);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignature.nonce_pub_x)
}

// optional bytes nonce_pub_y = 2;
inline bool BeamSignature::has_nonce_pub_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignature::clear_nonce_pub_y() {
  nonce_pub_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& BeamSignature::nonce_pub_y() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
  return nonce_pub_y_.GetNoArena();
}
inline void BeamSignature::set_nonce_pub_y(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nonce_pub_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
}
#if LANG_CXX11
inline void BeamSignature::set_nonce_pub_y(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nonce_pub_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
}
#endif
inline void BeamSignature::set_nonce_pub_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nonce_pub_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
}
inline void BeamSignature::set_nonce_pub_y(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nonce_pub_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
}
inline ::std::string* BeamSignature::mutable_nonce_pub_y() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
  return nonce_pub_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignature::release_nonce_pub_y() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
  if (!has_nonce_pub_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nonce_pub_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignature::set_allocated_nonce_pub_y(::std::string* nonce_pub_y) {
  if (nonce_pub_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nonce_pub_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce_pub_y);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignature.nonce_pub_y)
}

// optional bytes sign_k = 3;
inline bool BeamSignature::has_sign_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignature::clear_sign_k() {
  sign_k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& BeamSignature::sign_k() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignature.sign_k)
  return sign_k_.GetNoArena();
}
inline void BeamSignature::set_sign_k(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sign_k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignature.sign_k)
}
#if LANG_CXX11
inline void BeamSignature::set_sign_k(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sign_k_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignature.sign_k)
}
#endif
inline void BeamSignature::set_sign_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sign_k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignature.sign_k)
}
inline void BeamSignature::set_sign_k(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sign_k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignature.sign_k)
}
inline ::std::string* BeamSignature::mutable_sign_k() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignature.sign_k)
  return sign_k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignature::release_sign_k() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignature.sign_k)
  if (!has_sign_k()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sign_k_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignature::set_allocated_sign_k(::std::string* sign_k) {
  if (sign_k != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sign_k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_k);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignature.sign_k)
}

// -------------------------------------------------------------------

// BeamDisplayMessage

// optional string text = 1;
inline bool BeamDisplayMessage::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamDisplayMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamDisplayMessage::text() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamDisplayMessage.text)
  return text_.GetNoArena();
}
inline void BeamDisplayMessage::set_text(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamDisplayMessage.text)
}
#if LANG_CXX11
inline void BeamDisplayMessage::set_text(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamDisplayMessage.text)
}
#endif
inline void BeamDisplayMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamDisplayMessage.text)
}
inline void BeamDisplayMessage::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamDisplayMessage.text)
}
inline ::std::string* BeamDisplayMessage::mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamDisplayMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamDisplayMessage::release_text() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamDisplayMessage.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamDisplayMessage::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamDisplayMessage.text)
}

// optional bool show_display = 2;
inline bool BeamDisplayMessage::has_show_display() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamDisplayMessage::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BeamDisplayMessage::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamDisplayMessage.show_display)
  return show_display_;
}
inline void BeamDisplayMessage::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000002u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamDisplayMessage.show_display)
}

// -------------------------------------------------------------------

// BeamConfirmResponseMessage

// optional string text = 1;
inline bool BeamConfirmResponseMessage::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamConfirmResponseMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamConfirmResponseMessage::text() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
  return text_.GetNoArena();
}
inline void BeamConfirmResponseMessage::set_text(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
}
#if LANG_CXX11
inline void BeamConfirmResponseMessage::set_text(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
}
#endif
inline void BeamConfirmResponseMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
}
inline void BeamConfirmResponseMessage::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
}
inline ::std::string* BeamConfirmResponseMessage::mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamConfirmResponseMessage::release_text() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamConfirmResponseMessage::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamConfirmResponseMessage.text)
}

// optional bool response = 2;
inline bool BeamConfirmResponseMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamConfirmResponseMessage::clear_response() {
  response_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BeamConfirmResponseMessage::response() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamConfirmResponseMessage.response)
  return response_;
}
inline void BeamConfirmResponseMessage::set_response(bool value) {
  _has_bits_[0] |= 0x00000002u;
  response_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamConfirmResponseMessage.response)
}

// -------------------------------------------------------------------

// BeamSignMessage

// optional string msg = 1;
inline bool BeamSignMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignMessage::msg() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignMessage.msg)
  return msg_.GetNoArena();
}
inline void BeamSignMessage::set_msg(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignMessage.msg)
}
#if LANG_CXX11
inline void BeamSignMessage::set_msg(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignMessage.msg)
}
#endif
inline void BeamSignMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignMessage.msg)
}
inline void BeamSignMessage::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignMessage.msg)
}
inline ::std::string* BeamSignMessage::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignMessage::release_msg() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignMessage.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignMessage::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignMessage.msg)
}

// optional bool show_display = 2;
inline bool BeamSignMessage::has_show_display() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignMessage::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BeamSignMessage::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignMessage.show_display)
  return show_display_;
}
inline void BeamSignMessage::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000002u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignMessage.show_display)
}

// -------------------------------------------------------------------

// BeamSignedMessage

// optional .hw.trezor.messages.beam.BeamSignature signature = 1;
inline bool BeamSignedMessage::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignedMessage::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamSignature& BeamSignedMessage::signature() const {
  const ::hw::trezor::messages::beam::BeamSignature* p = signature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignedMessage.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignature*>(
      &::hw::trezor::messages::beam::_BeamSignature_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamSignedMessage::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignedMessage.signature)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamSignature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamSignedMessage::mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignedMessage.signature)
  return signature_;
}
inline void BeamSignedMessage::set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignedMessage.signature)
}

// -------------------------------------------------------------------

// BeamVerifyMessage

// optional .hw.trezor.messages.beam.BeamSignature signature = 1;
inline bool BeamVerifyMessage::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamVerifyMessage::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamSignature& BeamVerifyMessage::signature() const {
  const ::hw::trezor::messages::beam::BeamSignature* p = signature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamVerifyMessage.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignature*>(
      &::hw::trezor::messages::beam::_BeamSignature_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamVerifyMessage::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamVerifyMessage.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamSignature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamVerifyMessage::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamVerifyMessage.signature)
  return signature_;
}
inline void BeamVerifyMessage::set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamVerifyMessage.signature)
}

// optional .hw.trezor.messages.beam.BeamPublicKey public_key = 2;
inline bool BeamVerifyMessage::has_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamVerifyMessage::clear_public_key() {
  if (public_key_ != nullptr) public_key_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hw::trezor::messages::beam::BeamPublicKey& BeamVerifyMessage::public_key() const {
  const ::hw::trezor::messages::beam::BeamPublicKey* p = public_key_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamPublicKey*>(
      &::hw::trezor::messages::beam::_BeamPublicKey_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamPublicKey* BeamVerifyMessage::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
  _has_bits_[0] &= ~0x00000004u;
  ::hw::trezor::messages::beam::BeamPublicKey* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamPublicKey* BeamVerifyMessage::mutable_public_key() {
  _has_bits_[0] |= 0x00000004u;
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamPublicKey>(GetArenaNoVirtual());
    public_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
  return public_key_;
}
inline void BeamVerifyMessage::set_allocated_public_key(::hw::trezor::messages::beam::BeamPublicKey* public_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      public_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
}

// optional bytes message = 3;
inline bool BeamVerifyMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamVerifyMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamVerifyMessage::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamVerifyMessage.message)
  return message_.GetNoArena();
}
inline void BeamVerifyMessage::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
#if LANG_CXX11
inline void BeamVerifyMessage::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
#endif
inline void BeamVerifyMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
inline void BeamVerifyMessage::set_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
inline ::std::string* BeamVerifyMessage::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamVerifyMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamVerifyMessage::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamVerifyMessage.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamVerifyMessage::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamVerifyMessage.message)
}

// -------------------------------------------------------------------

// BeamGetPublicKey

// optional bool show_display = 1;
inline bool BeamGetPublicKey::has_show_display() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGetPublicKey::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BeamGetPublicKey::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGetPublicKey.show_display)
  return show_display_;
}
inline void BeamGetPublicKey::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGetPublicKey.show_display)
}

// -------------------------------------------------------------------

// BeamPublicKey

// optional bytes pub_x = 1;
inline bool BeamPublicKey::has_pub_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamPublicKey::clear_pub_x() {
  pub_x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamPublicKey::pub_x() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamPublicKey.pub_x)
  return pub_x_.GetNoArena();
}
inline void BeamPublicKey::set_pub_x(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pub_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamPublicKey.pub_x)
}
#if LANG_CXX11
inline void BeamPublicKey::set_pub_x(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pub_x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamPublicKey.pub_x)
}
#endif
inline void BeamPublicKey::set_pub_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pub_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamPublicKey.pub_x)
}
inline void BeamPublicKey::set_pub_x(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pub_x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamPublicKey.pub_x)
}
inline ::std::string* BeamPublicKey::mutable_pub_x() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamPublicKey.pub_x)
  return pub_x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamPublicKey::release_pub_x() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamPublicKey.pub_x)
  if (!has_pub_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pub_x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamPublicKey::set_allocated_pub_x(::std::string* pub_x) {
  if (pub_x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pub_x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_x);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamPublicKey.pub_x)
}

// optional bytes pub_y = 2;
inline bool BeamPublicKey::has_pub_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamPublicKey::clear_pub_y() {
  pub_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& BeamPublicKey::pub_y() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamPublicKey.pub_y)
  return pub_y_.GetNoArena();
}
inline void BeamPublicKey::set_pub_y(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pub_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamPublicKey.pub_y)
}
#if LANG_CXX11
inline void BeamPublicKey::set_pub_y(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pub_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamPublicKey.pub_y)
}
#endif
inline void BeamPublicKey::set_pub_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pub_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamPublicKey.pub_y)
}
inline void BeamPublicKey::set_pub_y(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pub_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamPublicKey.pub_y)
}
inline ::std::string* BeamPublicKey::mutable_pub_y() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamPublicKey.pub_y)
  return pub_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamPublicKey::release_pub_y() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamPublicKey.pub_y)
  if (!has_pub_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pub_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamPublicKey::set_allocated_pub_y(::std::string* pub_y) {
  if (pub_y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pub_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pub_y);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamPublicKey.pub_y)
}

// -------------------------------------------------------------------

// BeamGetOwnerKey

// optional bool show_display = 1;
inline bool BeamGetOwnerKey::has_show_display() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGetOwnerKey::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BeamGetOwnerKey::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGetOwnerKey.show_display)
  return show_display_;
}
inline void BeamGetOwnerKey::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGetOwnerKey.show_display)
}

// -------------------------------------------------------------------

// BeamOwnerKey

// optional bytes key = 1;
inline bool BeamOwnerKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamOwnerKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamOwnerKey::key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamOwnerKey.key)
  return key_.GetNoArena();
}
inline void BeamOwnerKey::set_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamOwnerKey.key)
}
#if LANG_CXX11
inline void BeamOwnerKey::set_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamOwnerKey.key)
}
#endif
inline void BeamOwnerKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamOwnerKey.key)
}
inline void BeamOwnerKey::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamOwnerKey.key)
}
inline ::std::string* BeamOwnerKey::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamOwnerKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamOwnerKey::release_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamOwnerKey.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamOwnerKey::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamOwnerKey.key)
}

// -------------------------------------------------------------------

// BeamSignSendTx_BeamPayment

// optional uint64 amount = 1;
inline bool BeamSignSendTx_BeamPayment::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignSendTx_BeamPayment::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 BeamSignSendTx_BeamPayment::amount() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.amount)
  return amount_;
}
inline void BeamSignSendTx_BeamPayment::set_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.amount)
}

// optional string destination = 2;
inline bool BeamSignSendTx_BeamPayment::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignSendTx_BeamPayment::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignSendTx_BeamPayment::destination() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
  return destination_.GetNoArena();
}
inline void BeamSignSendTx_BeamPayment::set_destination(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
}
#if LANG_CXX11
inline void BeamSignSendTx_BeamPayment::set_destination(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
}
#endif
inline void BeamSignSendTx_BeamPayment::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
}
inline void BeamSignSendTx_BeamPayment::set_destination(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
}
inline ::std::string* BeamSignSendTx_BeamPayment::mutable_destination() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignSendTx_BeamPayment::release_destination() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
  if (!has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return destination_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignSendTx_BeamPayment::set_allocated_destination(::std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination)
}

// optional uint32 destination_tag = 3;
inline bool BeamSignSendTx_BeamPayment::has_destination_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignSendTx_BeamPayment::clear_destination_tag() {
  destination_tag_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamSignSendTx_BeamPayment::destination_tag() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination_tag)
  return destination_tag_;
}
inline void BeamSignSendTx_BeamPayment::set_destination_tag(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  destination_tag_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignSendTx.BeamPayment.destination_tag)
}

// -------------------------------------------------------------------

// BeamSignSendTx

// repeated uint32 address_n = 1;
inline int BeamSignSendTx::address_n_size() const {
  return address_n_.size();
}
inline void BeamSignSendTx::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 BeamSignSendTx::address_n(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignSendTx.address_n)
  return address_n_.Get(index);
}
inline void BeamSignSendTx::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignSendTx.address_n)
}
inline void BeamSignSendTx::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.beam.BeamSignSendTx.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BeamSignSendTx::address_n() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.beam.BeamSignSendTx.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BeamSignSendTx::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.beam.BeamSignSendTx.address_n)
  return &address_n_;
}

// optional uint64 fee = 2;
inline bool BeamSignSendTx::has_fee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignSendTx::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 BeamSignSendTx::fee() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignSendTx.fee)
  return fee_;
}
inline void BeamSignSendTx::set_fee(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  fee_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignSendTx.fee)
}

// optional uint32 flags = 3;
inline bool BeamSignSendTx::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignSendTx::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamSignSendTx::flags() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignSendTx.flags)
  return flags_;
}
inline void BeamSignSendTx::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignSendTx.flags)
}

// optional .hw.trezor.messages.beam.BeamSignSendTx.BeamPayment payment = 4;
inline bool BeamSignSendTx::has_payment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignSendTx::clear_payment() {
  if (payment_ != nullptr) payment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment& BeamSignSendTx::payment() const {
  const ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* p = payment_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignSendTx.payment)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment*>(
      &::hw::trezor::messages::beam::_BeamSignSendTx_BeamPayment_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* BeamSignSendTx::release_payment() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignSendTx.payment)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* temp = payment_;
  payment_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* BeamSignSendTx::mutable_payment() {
  _has_bits_[0] |= 0x00000001u;
  if (payment_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment>(GetArenaNoVirtual());
    payment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignSendTx.payment)
  return payment_;
}
inline void BeamSignSendTx::set_allocated_payment(::hw::trezor::messages::beam::BeamSignSendTx_BeamPayment* payment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete payment_;
  }
  if (payment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payment_ = payment;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignSendTx.payment)
}

// -------------------------------------------------------------------

// BeamSignReceiveTx_BeamPayment

// optional uint64 amount = 1;
inline bool BeamSignReceiveTx_BeamPayment::has_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignReceiveTx_BeamPayment::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 BeamSignReceiveTx_BeamPayment::amount() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.amount)
  return amount_;
}
inline void BeamSignReceiveTx_BeamPayment::set_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.amount)
}

// optional string destination = 2;
inline bool BeamSignReceiveTx_BeamPayment::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignReceiveTx_BeamPayment::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignReceiveTx_BeamPayment::destination() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
  return destination_.GetNoArena();
}
inline void BeamSignReceiveTx_BeamPayment::set_destination(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
}
#if LANG_CXX11
inline void BeamSignReceiveTx_BeamPayment::set_destination(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
}
#endif
inline void BeamSignReceiveTx_BeamPayment::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
}
inline void BeamSignReceiveTx_BeamPayment::set_destination(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
}
inline ::std::string* BeamSignReceiveTx_BeamPayment::mutable_destination() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignReceiveTx_BeamPayment::release_destination() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
  if (!has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return destination_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignReceiveTx_BeamPayment::set_allocated_destination(::std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination)
}

// optional uint32 destination_tag = 3;
inline bool BeamSignReceiveTx_BeamPayment::has_destination_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignReceiveTx_BeamPayment::clear_destination_tag() {
  destination_tag_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamSignReceiveTx_BeamPayment::destination_tag() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination_tag)
  return destination_tag_;
}
inline void BeamSignReceiveTx_BeamPayment::set_destination_tag(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  destination_tag_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment.destination_tag)
}

// -------------------------------------------------------------------

// BeamSignReceiveTx

// repeated uint32 address_n = 1;
inline int BeamSignReceiveTx::address_n_size() const {
  return address_n_.size();
}
inline void BeamSignReceiveTx::clear_address_n() {
  address_n_.Clear();
}
inline ::google::protobuf::uint32 BeamSignReceiveTx::address_n(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.address_n)
  return address_n_.Get(index);
}
inline void BeamSignReceiveTx::set_address_n(int index, ::google::protobuf::uint32 value) {
  address_n_.Set(index, value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignReceiveTx.address_n)
}
inline void BeamSignReceiveTx::add_address_n(::google::protobuf::uint32 value) {
  address_n_.Add(value);
  // @@protoc_insertion_point(field_add:hw.trezor.messages.beam.BeamSignReceiveTx.address_n)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BeamSignReceiveTx::address_n() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.beam.BeamSignReceiveTx.address_n)
  return address_n_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BeamSignReceiveTx::mutable_address_n() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.beam.BeamSignReceiveTx.address_n)
  return &address_n_;
}

// optional uint64 fee = 2;
inline bool BeamSignReceiveTx::has_fee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignReceiveTx::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 BeamSignReceiveTx::fee() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.fee)
  return fee_;
}
inline void BeamSignReceiveTx::set_fee(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  fee_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignReceiveTx.fee)
}

// optional uint32 flags = 3;
inline bool BeamSignReceiveTx::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamSignReceiveTx::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 BeamSignReceiveTx::flags() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.flags)
  return flags_;
}
inline void BeamSignReceiveTx::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignReceiveTx.flags)
}

// optional .hw.trezor.messages.beam.BeamSignReceiveTx.BeamPayment payment = 4;
inline bool BeamSignReceiveTx::has_payment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignReceiveTx::clear_payment() {
  if (payment_ != nullptr) payment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment& BeamSignReceiveTx::payment() const {
  const ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* p = payment_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.payment)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment*>(
      &::hw::trezor::messages::beam::_BeamSignReceiveTx_BeamPayment_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* BeamSignReceiveTx::release_payment() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignReceiveTx.payment)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* temp = payment_;
  payment_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* BeamSignReceiveTx::mutable_payment() {
  _has_bits_[0] |= 0x00000001u;
  if (payment_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment>(GetArenaNoVirtual());
    payment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignReceiveTx.payment)
  return payment_;
}
inline void BeamSignReceiveTx::set_allocated_payment(::hw::trezor::messages::beam::BeamSignReceiveTx_BeamPayment* payment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete payment_;
  }
  if (payment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payment_ = payment;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignReceiveTx.payment)
}

// optional .hw.trezor.messages.beam.BeamSignature signature = 5;
inline bool BeamSignReceiveTx::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignReceiveTx::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamSignature& BeamSignReceiveTx::signature() const {
  const ::hw::trezor::messages::beam::BeamSignature* p = signature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignReceiveTx.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignature*>(
      &::hw::trezor::messages::beam::_BeamSignature_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamSignReceiveTx::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignReceiveTx.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamSignature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamSignReceiveTx::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignReceiveTx.signature)
  return signature_;
}
inline void BeamSignReceiveTx::set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignReceiveTx.signature)
}

// -------------------------------------------------------------------

// BeamSignedTx

// optional bytes signature = 1;
inline bool BeamSignedTx::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignedTx::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignedTx::signature() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignedTx.signature)
  return signature_.GetNoArena();
}
inline void BeamSignedTx::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignedTx.signature)
}
#if LANG_CXX11
inline void BeamSignedTx::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignedTx.signature)
}
#endif
inline void BeamSignedTx::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignedTx.signature)
}
inline void BeamSignedTx::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignedTx.signature)
}
inline ::std::string* BeamSignedTx::mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignedTx.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignedTx::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignedTx.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignedTx::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignedTx.signature)
}

// optional bytes serialized_tx = 2;
inline bool BeamSignedTx::has_serialized_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignedTx::clear_serialized_tx() {
  serialized_tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& BeamSignedTx::serialized_tx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
  return serialized_tx_.GetNoArena();
}
inline void BeamSignedTx::set_serialized_tx(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
}
#if LANG_CXX11
inline void BeamSignedTx::set_serialized_tx(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
}
#endif
inline void BeamSignedTx::set_serialized_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
}
inline void BeamSignedTx::set_serialized_tx(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
}
inline ::std::string* BeamSignedTx::mutable_serialized_tx() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
  return serialized_tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignedTx::release_serialized_tx() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
  if (!has_serialized_tx()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_tx_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignedTx::set_allocated_serialized_tx(::std::string* serialized_tx) {
  if (serialized_tx != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_tx);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignedTx.serialized_tx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beam
}  // namespace messages
}  // namespace trezor
}  // namespace hw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messages_2dbeam_2eproto
