// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-common.proto

#ifndef PROTOBUF_INCLUDED_messages_2dcommon_2eproto
#define PROTOBUF_INCLUDED_messages_2dcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2dcommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2dcommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messages_2dcommon_2eproto();
namespace hw {
namespace trezor {
namespace messages {
namespace common {
class ButtonAck;
class ButtonAckDefaultTypeInternal;
extern ButtonAckDefaultTypeInternal _ButtonAck_default_instance_;
class ButtonRequest;
class ButtonRequestDefaultTypeInternal;
extern ButtonRequestDefaultTypeInternal _ButtonRequest_default_instance_;
class Failure;
class FailureDefaultTypeInternal;
extern FailureDefaultTypeInternal _Failure_default_instance_;
class HDNodeType;
class HDNodeTypeDefaultTypeInternal;
extern HDNodeTypeDefaultTypeInternal _HDNodeType_default_instance_;
class PassphraseAck;
class PassphraseAckDefaultTypeInternal;
extern PassphraseAckDefaultTypeInternal _PassphraseAck_default_instance_;
class PassphraseRequest;
class PassphraseRequestDefaultTypeInternal;
extern PassphraseRequestDefaultTypeInternal _PassphraseRequest_default_instance_;
class PassphraseStateAck;
class PassphraseStateAckDefaultTypeInternal;
extern PassphraseStateAckDefaultTypeInternal _PassphraseStateAck_default_instance_;
class PassphraseStateRequest;
class PassphraseStateRequestDefaultTypeInternal;
extern PassphraseStateRequestDefaultTypeInternal _PassphraseStateRequest_default_instance_;
class PinMatrixAck;
class PinMatrixAckDefaultTypeInternal;
extern PinMatrixAckDefaultTypeInternal _PinMatrixAck_default_instance_;
class PinMatrixRequest;
class PinMatrixRequestDefaultTypeInternal;
extern PinMatrixRequestDefaultTypeInternal _PinMatrixRequest_default_instance_;
class Success;
class SuccessDefaultTypeInternal;
extern SuccessDefaultTypeInternal _Success_default_instance_;
}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> ::hw::trezor::messages::common::ButtonAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::ButtonAck>(Arena*);
template<> ::hw::trezor::messages::common::ButtonRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::ButtonRequest>(Arena*);
template<> ::hw::trezor::messages::common::Failure* Arena::CreateMaybeMessage<::hw::trezor::messages::common::Failure>(Arena*);
template<> ::hw::trezor::messages::common::HDNodeType* Arena::CreateMaybeMessage<::hw::trezor::messages::common::HDNodeType>(Arena*);
template<> ::hw::trezor::messages::common::PassphraseAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PassphraseAck>(Arena*);
template<> ::hw::trezor::messages::common::PassphraseRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PassphraseRequest>(Arena*);
template<> ::hw::trezor::messages::common::PassphraseStateAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PassphraseStateAck>(Arena*);
template<> ::hw::trezor::messages::common::PassphraseStateRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PassphraseStateRequest>(Arena*);
template<> ::hw::trezor::messages::common::PinMatrixAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PinMatrixAck>(Arena*);
template<> ::hw::trezor::messages::common::PinMatrixRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PinMatrixRequest>(Arena*);
template<> ::hw::trezor::messages::common::Success* Arena::CreateMaybeMessage<::hw::trezor::messages::common::Success>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hw {
namespace trezor {
namespace messages {
namespace common {

enum Failure_FailureType {
  Failure_FailureType_Failure_UnexpectedMessage = 1,
  Failure_FailureType_Failure_ButtonExpected = 2,
  Failure_FailureType_Failure_DataError = 3,
  Failure_FailureType_Failure_ActionCancelled = 4,
  Failure_FailureType_Failure_PinExpected = 5,
  Failure_FailureType_Failure_PinCancelled = 6,
  Failure_FailureType_Failure_PinInvalid = 7,
  Failure_FailureType_Failure_InvalidSignature = 8,
  Failure_FailureType_Failure_ProcessError = 9,
  Failure_FailureType_Failure_NotEnoughFunds = 10,
  Failure_FailureType_Failure_NotInitialized = 11,
  Failure_FailureType_Failure_PinMismatch = 12,
  Failure_FailureType_Failure_FirmwareError = 99
};
bool Failure_FailureType_IsValid(int value);
const Failure_FailureType Failure_FailureType_FailureType_MIN = Failure_FailureType_Failure_UnexpectedMessage;
const Failure_FailureType Failure_FailureType_FailureType_MAX = Failure_FailureType_Failure_FirmwareError;
const int Failure_FailureType_FailureType_ARRAYSIZE = Failure_FailureType_FailureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Failure_FailureType_descriptor();
inline const ::std::string& Failure_FailureType_Name(Failure_FailureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Failure_FailureType_descriptor(), value);
}
inline bool Failure_FailureType_Parse(
    const ::std::string& name, Failure_FailureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Failure_FailureType>(
    Failure_FailureType_descriptor(), name, value);
}
enum ButtonRequest_ButtonRequestType {
  ButtonRequest_ButtonRequestType_ButtonRequest_Other = 1,
  ButtonRequest_ButtonRequestType_ButtonRequest_FeeOverThreshold = 2,
  ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmOutput = 3,
  ButtonRequest_ButtonRequestType_ButtonRequest_ResetDevice = 4,
  ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmWord = 5,
  ButtonRequest_ButtonRequestType_ButtonRequest_WipeDevice = 6,
  ButtonRequest_ButtonRequestType_ButtonRequest_ProtectCall = 7,
  ButtonRequest_ButtonRequestType_ButtonRequest_SignTx = 8,
  ButtonRequest_ButtonRequestType_ButtonRequest_FirmwareCheck = 9,
  ButtonRequest_ButtonRequestType_ButtonRequest_Address = 10,
  ButtonRequest_ButtonRequestType_ButtonRequest_PublicKey = 11,
  ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicWordCount = 12,
  ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicInput = 13,
  ButtonRequest_ButtonRequestType_ButtonRequest_PassphraseType = 14,
  ButtonRequest_ButtonRequestType_ButtonRequest_UnknownDerivationPath = 15
};
bool ButtonRequest_ButtonRequestType_IsValid(int value);
const ButtonRequest_ButtonRequestType ButtonRequest_ButtonRequestType_ButtonRequestType_MIN = ButtonRequest_ButtonRequestType_ButtonRequest_Other;
const ButtonRequest_ButtonRequestType ButtonRequest_ButtonRequestType_ButtonRequestType_MAX = ButtonRequest_ButtonRequestType_ButtonRequest_UnknownDerivationPath;
const int ButtonRequest_ButtonRequestType_ButtonRequestType_ARRAYSIZE = ButtonRequest_ButtonRequestType_ButtonRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ButtonRequest_ButtonRequestType_descriptor();
inline const ::std::string& ButtonRequest_ButtonRequestType_Name(ButtonRequest_ButtonRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ButtonRequest_ButtonRequestType_descriptor(), value);
}
inline bool ButtonRequest_ButtonRequestType_Parse(
    const ::std::string& name, ButtonRequest_ButtonRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ButtonRequest_ButtonRequestType>(
    ButtonRequest_ButtonRequestType_descriptor(), name, value);
}
enum PinMatrixRequest_PinMatrixRequestType {
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current = 1,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewFirst = 2,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond = 3
};
bool PinMatrixRequest_PinMatrixRequestType_IsValid(int value);
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MIN = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current;
const PinMatrixRequest_PinMatrixRequestType PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond;
const int PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_ARRAYSIZE = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PinMatrixRequest_PinMatrixRequestType_descriptor();
inline const ::std::string& PinMatrixRequest_PinMatrixRequestType_Name(PinMatrixRequest_PinMatrixRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PinMatrixRequest_PinMatrixRequestType_descriptor(), value);
}
inline bool PinMatrixRequest_PinMatrixRequestType_Parse(
    const ::std::string& name, PinMatrixRequest_PinMatrixRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PinMatrixRequest_PinMatrixRequestType>(
    PinMatrixRequest_PinMatrixRequestType_descriptor(), name, value);
}
// ===================================================================

class Success final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.Success) */ {
 public:
  Success();
  virtual ~Success();

  Success(const Success& from);

  inline Success& operator=(const Success& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Success(Success&& from) noexcept
    : Success() {
    *this = ::std::move(from);
  }

  inline Success& operator=(Success&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Success& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Success* internal_default_instance() {
    return reinterpret_cast<const Success*>(
               &_Success_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Success* other);
  friend void swap(Success& a, Success& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Success* New() const final {
    return CreateMaybeMessage<Success>(nullptr);
  }

  Success* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Success>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Success& from);
  void MergeFrom(const Success& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Success* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.Success)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class Failure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.Failure) */ {
 public:
  Failure();
  virtual ~Failure();

  Failure(const Failure& from);

  inline Failure& operator=(const Failure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Failure(Failure&& from) noexcept
    : Failure() {
    *this = ::std::move(from);
  }

  inline Failure& operator=(Failure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Failure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Failure* internal_default_instance() {
    return reinterpret_cast<const Failure*>(
               &_Failure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Failure* other);
  friend void swap(Failure& a, Failure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Failure* New() const final {
    return CreateMaybeMessage<Failure>(nullptr);
  }

  Failure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Failure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Failure& from);
  void MergeFrom(const Failure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Failure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Failure_FailureType FailureType;
  static const FailureType Failure_UnexpectedMessage =
    Failure_FailureType_Failure_UnexpectedMessage;
  static const FailureType Failure_ButtonExpected =
    Failure_FailureType_Failure_ButtonExpected;
  static const FailureType Failure_DataError =
    Failure_FailureType_Failure_DataError;
  static const FailureType Failure_ActionCancelled =
    Failure_FailureType_Failure_ActionCancelled;
  static const FailureType Failure_PinExpected =
    Failure_FailureType_Failure_PinExpected;
  static const FailureType Failure_PinCancelled =
    Failure_FailureType_Failure_PinCancelled;
  static const FailureType Failure_PinInvalid =
    Failure_FailureType_Failure_PinInvalid;
  static const FailureType Failure_InvalidSignature =
    Failure_FailureType_Failure_InvalidSignature;
  static const FailureType Failure_ProcessError =
    Failure_FailureType_Failure_ProcessError;
  static const FailureType Failure_NotEnoughFunds =
    Failure_FailureType_Failure_NotEnoughFunds;
  static const FailureType Failure_NotInitialized =
    Failure_FailureType_Failure_NotInitialized;
  static const FailureType Failure_PinMismatch =
    Failure_FailureType_Failure_PinMismatch;
  static const FailureType Failure_FirmwareError =
    Failure_FailureType_Failure_FirmwareError;
  static inline bool FailureType_IsValid(int value) {
    return Failure_FailureType_IsValid(value);
  }
  static const FailureType FailureType_MIN =
    Failure_FailureType_FailureType_MIN;
  static const FailureType FailureType_MAX =
    Failure_FailureType_FailureType_MAX;
  static const int FailureType_ARRAYSIZE =
    Failure_FailureType_FailureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FailureType_descriptor() {
    return Failure_FailureType_descriptor();
  }
  static inline const ::std::string& FailureType_Name(FailureType value) {
    return Failure_FailureType_Name(value);
  }
  static inline bool FailureType_Parse(const ::std::string& name,
      FailureType* value) {
    return Failure_FailureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::hw::trezor::messages::common::Failure_FailureType code() const;
  void set_code(::hw::trezor::messages::common::Failure_FailureType value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.Failure)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class ButtonRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.ButtonRequest) */ {
 public:
  ButtonRequest();
  virtual ~ButtonRequest();

  ButtonRequest(const ButtonRequest& from);

  inline ButtonRequest& operator=(const ButtonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ButtonRequest(ButtonRequest&& from) noexcept
    : ButtonRequest() {
    *this = ::std::move(from);
  }

  inline ButtonRequest& operator=(ButtonRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ButtonRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ButtonRequest* internal_default_instance() {
    return reinterpret_cast<const ButtonRequest*>(
               &_ButtonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ButtonRequest* other);
  friend void swap(ButtonRequest& a, ButtonRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ButtonRequest* New() const final {
    return CreateMaybeMessage<ButtonRequest>(nullptr);
  }

  ButtonRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ButtonRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ButtonRequest& from);
  void MergeFrom(const ButtonRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ButtonRequest_ButtonRequestType ButtonRequestType;
  static const ButtonRequestType ButtonRequest_Other =
    ButtonRequest_ButtonRequestType_ButtonRequest_Other;
  static const ButtonRequestType ButtonRequest_FeeOverThreshold =
    ButtonRequest_ButtonRequestType_ButtonRequest_FeeOverThreshold;
  static const ButtonRequestType ButtonRequest_ConfirmOutput =
    ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmOutput;
  static const ButtonRequestType ButtonRequest_ResetDevice =
    ButtonRequest_ButtonRequestType_ButtonRequest_ResetDevice;
  static const ButtonRequestType ButtonRequest_ConfirmWord =
    ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmWord;
  static const ButtonRequestType ButtonRequest_WipeDevice =
    ButtonRequest_ButtonRequestType_ButtonRequest_WipeDevice;
  static const ButtonRequestType ButtonRequest_ProtectCall =
    ButtonRequest_ButtonRequestType_ButtonRequest_ProtectCall;
  static const ButtonRequestType ButtonRequest_SignTx =
    ButtonRequest_ButtonRequestType_ButtonRequest_SignTx;
  static const ButtonRequestType ButtonRequest_FirmwareCheck =
    ButtonRequest_ButtonRequestType_ButtonRequest_FirmwareCheck;
  static const ButtonRequestType ButtonRequest_Address =
    ButtonRequest_ButtonRequestType_ButtonRequest_Address;
  static const ButtonRequestType ButtonRequest_PublicKey =
    ButtonRequest_ButtonRequestType_ButtonRequest_PublicKey;
  static const ButtonRequestType ButtonRequest_MnemonicWordCount =
    ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicWordCount;
  static const ButtonRequestType ButtonRequest_MnemonicInput =
    ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicInput;
  static const ButtonRequestType ButtonRequest_PassphraseType =
    ButtonRequest_ButtonRequestType_ButtonRequest_PassphraseType;
  static const ButtonRequestType ButtonRequest_UnknownDerivationPath =
    ButtonRequest_ButtonRequestType_ButtonRequest_UnknownDerivationPath;
  static inline bool ButtonRequestType_IsValid(int value) {
    return ButtonRequest_ButtonRequestType_IsValid(value);
  }
  static const ButtonRequestType ButtonRequestType_MIN =
    ButtonRequest_ButtonRequestType_ButtonRequestType_MIN;
  static const ButtonRequestType ButtonRequestType_MAX =
    ButtonRequest_ButtonRequestType_ButtonRequestType_MAX;
  static const int ButtonRequestType_ARRAYSIZE =
    ButtonRequest_ButtonRequestType_ButtonRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ButtonRequestType_descriptor() {
    return ButtonRequest_ButtonRequestType_descriptor();
  }
  static inline const ::std::string& ButtonRequestType_Name(ButtonRequestType value) {
    return ButtonRequest_ButtonRequestType_Name(value);
  }
  static inline bool ButtonRequestType_Parse(const ::std::string& name,
      ButtonRequestType* value) {
    return ButtonRequest_ButtonRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType code() const;
  void set_code(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.ButtonRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int code_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class ButtonAck final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.ButtonAck) */ {
 public:
  ButtonAck();
  virtual ~ButtonAck();

  ButtonAck(const ButtonAck& from);

  inline ButtonAck& operator=(const ButtonAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ButtonAck(ButtonAck&& from) noexcept
    : ButtonAck() {
    *this = ::std::move(from);
  }

  inline ButtonAck& operator=(ButtonAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ButtonAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ButtonAck* internal_default_instance() {
    return reinterpret_cast<const ButtonAck*>(
               &_ButtonAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ButtonAck* other);
  friend void swap(ButtonAck& a, ButtonAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ButtonAck* New() const final {
    return CreateMaybeMessage<ButtonAck>(nullptr);
  }

  ButtonAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ButtonAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ButtonAck& from);
  void MergeFrom(const ButtonAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.ButtonAck)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PinMatrixRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PinMatrixRequest) */ {
 public:
  PinMatrixRequest();
  virtual ~PinMatrixRequest();

  PinMatrixRequest(const PinMatrixRequest& from);

  inline PinMatrixRequest& operator=(const PinMatrixRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PinMatrixRequest(PinMatrixRequest&& from) noexcept
    : PinMatrixRequest() {
    *this = ::std::move(from);
  }

  inline PinMatrixRequest& operator=(PinMatrixRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PinMatrixRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PinMatrixRequest* internal_default_instance() {
    return reinterpret_cast<const PinMatrixRequest*>(
               &_PinMatrixRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PinMatrixRequest* other);
  friend void swap(PinMatrixRequest& a, PinMatrixRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PinMatrixRequest* New() const final {
    return CreateMaybeMessage<PinMatrixRequest>(nullptr);
  }

  PinMatrixRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PinMatrixRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PinMatrixRequest& from);
  void MergeFrom(const PinMatrixRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinMatrixRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PinMatrixRequest_PinMatrixRequestType PinMatrixRequestType;
  static const PinMatrixRequestType PinMatrixRequestType_Current =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current;
  static const PinMatrixRequestType PinMatrixRequestType_NewFirst =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewFirst;
  static const PinMatrixRequestType PinMatrixRequestType_NewSecond =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond;
  static inline bool PinMatrixRequestType_IsValid(int value) {
    return PinMatrixRequest_PinMatrixRequestType_IsValid(value);
  }
  static const PinMatrixRequestType PinMatrixRequestType_MIN =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MIN;
  static const PinMatrixRequestType PinMatrixRequestType_MAX =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX;
  static const int PinMatrixRequestType_ARRAYSIZE =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PinMatrixRequestType_descriptor() {
    return PinMatrixRequest_PinMatrixRequestType_descriptor();
  }
  static inline const ::std::string& PinMatrixRequestType_Name(PinMatrixRequestType value) {
    return PinMatrixRequest_PinMatrixRequestType_Name(value);
  }
  static inline bool PinMatrixRequestType_Parse(const ::std::string& name,
      PinMatrixRequestType* value) {
    return PinMatrixRequest_PinMatrixRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType type() const;
  void set_type(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PinMatrixRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PinMatrixAck final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PinMatrixAck) */ {
 public:
  PinMatrixAck();
  virtual ~PinMatrixAck();

  PinMatrixAck(const PinMatrixAck& from);

  inline PinMatrixAck& operator=(const PinMatrixAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PinMatrixAck(PinMatrixAck&& from) noexcept
    : PinMatrixAck() {
    *this = ::std::move(from);
  }

  inline PinMatrixAck& operator=(PinMatrixAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PinMatrixAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PinMatrixAck* internal_default_instance() {
    return reinterpret_cast<const PinMatrixAck*>(
               &_PinMatrixAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PinMatrixAck* other);
  friend void swap(PinMatrixAck& a, PinMatrixAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PinMatrixAck* New() const final {
    return CreateMaybeMessage<PinMatrixAck>(nullptr);
  }

  PinMatrixAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PinMatrixAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PinMatrixAck& from);
  void MergeFrom(const PinMatrixAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinMatrixAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  const ::std::string& pin() const;
  void set_pin(const ::std::string& value);
  #if LANG_CXX11
  void set_pin(::std::string&& value);
  #endif
  void set_pin(const char* value);
  void set_pin(const char* value, size_t size);
  ::std::string* mutable_pin();
  ::std::string* release_pin();
  void set_allocated_pin(::std::string* pin);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PinMatrixAck)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pin_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PassphraseRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PassphraseRequest) */ {
 public:
  PassphraseRequest();
  virtual ~PassphraseRequest();

  PassphraseRequest(const PassphraseRequest& from);

  inline PassphraseRequest& operator=(const PassphraseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PassphraseRequest(PassphraseRequest&& from) noexcept
    : PassphraseRequest() {
    *this = ::std::move(from);
  }

  inline PassphraseRequest& operator=(PassphraseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PassphraseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassphraseRequest* internal_default_instance() {
    return reinterpret_cast<const PassphraseRequest*>(
               &_PassphraseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PassphraseRequest* other);
  friend void swap(PassphraseRequest& a, PassphraseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PassphraseRequest* New() const final {
    return CreateMaybeMessage<PassphraseRequest>(nullptr);
  }

  PassphraseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PassphraseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PassphraseRequest& from);
  void MergeFrom(const PassphraseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassphraseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool on_device = 1;
  bool has_on_device() const;
  void clear_on_device();
  static const int kOnDeviceFieldNumber = 1;
  bool on_device() const;
  void set_on_device(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PassphraseRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool on_device_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PassphraseAck final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PassphraseAck) */ {
 public:
  PassphraseAck();
  virtual ~PassphraseAck();

  PassphraseAck(const PassphraseAck& from);

  inline PassphraseAck& operator=(const PassphraseAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PassphraseAck(PassphraseAck&& from) noexcept
    : PassphraseAck() {
    *this = ::std::move(from);
  }

  inline PassphraseAck& operator=(PassphraseAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PassphraseAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassphraseAck* internal_default_instance() {
    return reinterpret_cast<const PassphraseAck*>(
               &_PassphraseAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PassphraseAck* other);
  friend void swap(PassphraseAck& a, PassphraseAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PassphraseAck* New() const final {
    return CreateMaybeMessage<PassphraseAck>(nullptr);
  }

  PassphraseAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PassphraseAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PassphraseAck& from);
  void MergeFrom(const PassphraseAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassphraseAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string passphrase = 1;
  bool has_passphrase() const;
  void clear_passphrase();
  static const int kPassphraseFieldNumber = 1;
  const ::std::string& passphrase() const;
  void set_passphrase(const ::std::string& value);
  #if LANG_CXX11
  void set_passphrase(::std::string&& value);
  #endif
  void set_passphrase(const char* value);
  void set_passphrase(const char* value, size_t size);
  ::std::string* mutable_passphrase();
  ::std::string* release_passphrase();
  void set_allocated_passphrase(::std::string* passphrase);

  // optional bytes state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PassphraseAck)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr passphrase_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PassphraseStateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PassphraseStateRequest) */ {
 public:
  PassphraseStateRequest();
  virtual ~PassphraseStateRequest();

  PassphraseStateRequest(const PassphraseStateRequest& from);

  inline PassphraseStateRequest& operator=(const PassphraseStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PassphraseStateRequest(PassphraseStateRequest&& from) noexcept
    : PassphraseStateRequest() {
    *this = ::std::move(from);
  }

  inline PassphraseStateRequest& operator=(PassphraseStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PassphraseStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassphraseStateRequest* internal_default_instance() {
    return reinterpret_cast<const PassphraseStateRequest*>(
               &_PassphraseStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PassphraseStateRequest* other);
  friend void swap(PassphraseStateRequest& a, PassphraseStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PassphraseStateRequest* New() const final {
    return CreateMaybeMessage<PassphraseStateRequest>(nullptr);
  }

  PassphraseStateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PassphraseStateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PassphraseStateRequest& from);
  void MergeFrom(const PassphraseStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassphraseStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PassphraseStateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PassphraseStateAck final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PassphraseStateAck) */ {
 public:
  PassphraseStateAck();
  virtual ~PassphraseStateAck();

  PassphraseStateAck(const PassphraseStateAck& from);

  inline PassphraseStateAck& operator=(const PassphraseStateAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PassphraseStateAck(PassphraseStateAck&& from) noexcept
    : PassphraseStateAck() {
    *this = ::std::move(from);
  }

  inline PassphraseStateAck& operator=(PassphraseStateAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PassphraseStateAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassphraseStateAck* internal_default_instance() {
    return reinterpret_cast<const PassphraseStateAck*>(
               &_PassphraseStateAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(PassphraseStateAck* other);
  friend void swap(PassphraseStateAck& a, PassphraseStateAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PassphraseStateAck* New() const final {
    return CreateMaybeMessage<PassphraseStateAck>(nullptr);
  }

  PassphraseStateAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PassphraseStateAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PassphraseStateAck& from);
  void MergeFrom(const PassphraseStateAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassphraseStateAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PassphraseStateAck)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class HDNodeType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.HDNodeType) */ {
 public:
  HDNodeType();
  virtual ~HDNodeType();

  HDNodeType(const HDNodeType& from);

  inline HDNodeType& operator=(const HDNodeType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDNodeType(HDNodeType&& from) noexcept
    : HDNodeType() {
    *this = ::std::move(from);
  }

  inline HDNodeType& operator=(HDNodeType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HDNodeType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDNodeType* internal_default_instance() {
    return reinterpret_cast<const HDNodeType*>(
               &_HDNodeType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(HDNodeType* other);
  friend void swap(HDNodeType& a, HDNodeType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDNodeType* New() const final {
    return CreateMaybeMessage<HDNodeType>(nullptr);
  }

  HDNodeType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HDNodeType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HDNodeType& from);
  void MergeFrom(const HDNodeType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDNodeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes chain_code = 4;
  bool has_chain_code() const;
  void clear_chain_code();
  static const int kChainCodeFieldNumber = 4;
  const ::std::string& chain_code() const;
  void set_chain_code(const ::std::string& value);
  #if LANG_CXX11
  void set_chain_code(::std::string&& value);
  #endif
  void set_chain_code(const char* value);
  void set_chain_code(const void* value, size_t size);
  ::std::string* mutable_chain_code();
  ::std::string* release_chain_code();
  void set_allocated_chain_code(::std::string* chain_code);

  // optional bytes private_key = 5;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 5;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional bytes public_key = 6;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 6;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // required uint32 depth = 1;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  ::google::protobuf::uint32 depth() const;
  void set_depth(::google::protobuf::uint32 value);

  // required uint32 fingerprint = 2;
  bool has_fingerprint() const;
  void clear_fingerprint();
  static const int kFingerprintFieldNumber = 2;
  ::google::protobuf::uint32 fingerprint() const;
  void set_fingerprint(::google::protobuf::uint32 value);

  // required uint32 child_num = 3;
  bool has_child_num() const;
  void clear_child_num();
  static const int kChildNumFieldNumber = 3;
  ::google::protobuf::uint32 child_num() const;
  void set_child_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.HDNodeType)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chain_code_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::uint32 depth_;
  ::google::protobuf::uint32 fingerprint_;
  ::google::protobuf::uint32 child_num_;
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Success

// optional string message = 1;
inline bool Success::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Success::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Success::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.Success.message)
  return message_.GetNoArena();
}
inline void Success::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.Success.message)
}
#if LANG_CXX11
inline void Success::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.Success.message)
}
#endif
inline void Success::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.Success.message)
}
inline void Success::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.Success.message)
}
inline ::std::string* Success::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.Success.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Success::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.Success.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Success::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.Success.message)
}

// -------------------------------------------------------------------

// Failure

// optional .hw.trezor.messages.common.Failure.FailureType code = 1;
inline bool Failure::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Failure::clear_code() {
  code_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hw::trezor::messages::common::Failure_FailureType Failure::code() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.Failure.code)
  return static_cast< ::hw::trezor::messages::common::Failure_FailureType >(code_);
}
inline void Failure::set_code(::hw::trezor::messages::common::Failure_FailureType value) {
  assert(::hw::trezor::messages::common::Failure_FailureType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.Failure.code)
}

// optional string message = 2;
inline bool Failure::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Failure::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Failure::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.Failure.message)
  return message_.GetNoArena();
}
inline void Failure::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.Failure.message)
}
#if LANG_CXX11
inline void Failure::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.Failure.message)
}
#endif
inline void Failure::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.Failure.message)
}
inline void Failure::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.Failure.message)
}
inline ::std::string* Failure::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.Failure.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Failure::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.Failure.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Failure::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.Failure.message)
}

// -------------------------------------------------------------------

// ButtonRequest

// optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
inline bool ButtonRequest::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonRequest::clear_code() {
  code_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType ButtonRequest::code() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.ButtonRequest.code)
  return static_cast< ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType >(code_);
}
inline void ButtonRequest::set_code(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType value) {
  assert(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.ButtonRequest.code)
}

// optional string data = 2;
inline bool ButtonRequest::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ButtonRequest::data() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.ButtonRequest.data)
  return data_.GetNoArena();
}
inline void ButtonRequest::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.ButtonRequest.data)
}
#if LANG_CXX11
inline void ButtonRequest::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.ButtonRequest.data)
}
#endif
inline void ButtonRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.ButtonRequest.data)
}
inline void ButtonRequest::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.ButtonRequest.data)
}
inline ::std::string* ButtonRequest::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.ButtonRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ButtonRequest::release_data() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.ButtonRequest.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ButtonRequest::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.ButtonRequest.data)
}

// -------------------------------------------------------------------

// ButtonAck

// -------------------------------------------------------------------

// PinMatrixRequest

// optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
inline bool PinMatrixRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PinMatrixRequest::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PinMatrixRequest.type)
  return static_cast< ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType >(type_);
}
inline void PinMatrixRequest::set_type(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType value) {
  assert(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PinMatrixRequest.type)
}

// -------------------------------------------------------------------

// PinMatrixAck

// required string pin = 1;
inline bool PinMatrixAck::has_pin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PinMatrixAck::clear_pin() {
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& PinMatrixAck::pin() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PinMatrixAck.pin)
  return pin_.GetNoArena();
}
inline void PinMatrixAck::set_pin(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PinMatrixAck.pin)
}
#if LANG_CXX11
inline void PinMatrixAck::set_pin(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.PinMatrixAck.pin)
}
#endif
inline void PinMatrixAck::set_pin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.PinMatrixAck.pin)
}
inline void PinMatrixAck::set_pin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.PinMatrixAck.pin)
}
inline ::std::string* PinMatrixAck::mutable_pin() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.PinMatrixAck.pin)
  return pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PinMatrixAck::release_pin() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.PinMatrixAck.pin)
  if (!has_pin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pin_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PinMatrixAck::set_allocated_pin(::std::string* pin) {
  if (pin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.PinMatrixAck.pin)
}

// -------------------------------------------------------------------

// PassphraseRequest

// optional bool on_device = 1;
inline bool PassphraseRequest::has_on_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassphraseRequest::clear_on_device() {
  on_device_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PassphraseRequest::on_device() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseRequest.on_device)
  return on_device_;
}
inline void PassphraseRequest::set_on_device(bool value) {
  _has_bits_[0] |= 0x00000001u;
  on_device_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseRequest.on_device)
}

// -------------------------------------------------------------------

// PassphraseAck

// optional string passphrase = 1;
inline bool PassphraseAck::has_passphrase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassphraseAck::clear_passphrase() {
  passphrase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& PassphraseAck::passphrase() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseAck.passphrase)
  return passphrase_.GetNoArena();
}
inline void PassphraseAck::set_passphrase(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  passphrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseAck.passphrase)
}
#if LANG_CXX11
inline void PassphraseAck::set_passphrase(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  passphrase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.PassphraseAck.passphrase)
}
#endif
inline void PassphraseAck::set_passphrase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  passphrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.PassphraseAck.passphrase)
}
inline void PassphraseAck::set_passphrase(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  passphrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.PassphraseAck.passphrase)
}
inline ::std::string* PassphraseAck::mutable_passphrase() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.PassphraseAck.passphrase)
  return passphrase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PassphraseAck::release_passphrase() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.PassphraseAck.passphrase)
  if (!has_passphrase()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return passphrase_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PassphraseAck::set_allocated_passphrase(::std::string* passphrase) {
  if (passphrase != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  passphrase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passphrase);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.PassphraseAck.passphrase)
}

// optional bytes state = 2;
inline bool PassphraseAck::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassphraseAck::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& PassphraseAck::state() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseAck.state)
  return state_.GetNoArena();
}
inline void PassphraseAck::set_state(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseAck.state)
}
#if LANG_CXX11
inline void PassphraseAck::set_state(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.PassphraseAck.state)
}
#endif
inline void PassphraseAck::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.PassphraseAck.state)
}
inline void PassphraseAck::set_state(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.PassphraseAck.state)
}
inline ::std::string* PassphraseAck::mutable_state() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.PassphraseAck.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PassphraseAck::release_state() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.PassphraseAck.state)
  if (!has_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PassphraseAck::set_allocated_state(::std::string* state) {
  if (state != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.PassphraseAck.state)
}

// -------------------------------------------------------------------

// PassphraseStateRequest

// optional bytes state = 1;
inline bool PassphraseStateRequest::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassphraseStateRequest::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& PassphraseStateRequest::state() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseStateRequest.state)
  return state_.GetNoArena();
}
inline void PassphraseStateRequest::set_state(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseStateRequest.state)
}
#if LANG_CXX11
inline void PassphraseStateRequest::set_state(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.PassphraseStateRequest.state)
}
#endif
inline void PassphraseStateRequest::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.PassphraseStateRequest.state)
}
inline void PassphraseStateRequest::set_state(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.PassphraseStateRequest.state)
}
inline ::std::string* PassphraseStateRequest::mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.PassphraseStateRequest.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PassphraseStateRequest::release_state() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.PassphraseStateRequest.state)
  if (!has_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PassphraseStateRequest::set_allocated_state(::std::string* state) {
  if (state != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.PassphraseStateRequest.state)
}

// -------------------------------------------------------------------

// PassphraseStateAck

// -------------------------------------------------------------------

// HDNodeType

// required uint32 depth = 1;
inline bool HDNodeType::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HDNodeType::clear_depth() {
  depth_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 HDNodeType::depth() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.depth)
  return depth_;
}
inline void HDNodeType::set_depth(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  depth_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.depth)
}

// required uint32 fingerprint = 2;
inline bool HDNodeType::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HDNodeType::clear_fingerprint() {
  fingerprint_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 HDNodeType::fingerprint() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.fingerprint)
  return fingerprint_;
}
inline void HDNodeType::set_fingerprint(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  fingerprint_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.fingerprint)
}

// required uint32 child_num = 3;
inline bool HDNodeType::has_child_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HDNodeType::clear_child_num() {
  child_num_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 HDNodeType::child_num() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.child_num)
  return child_num_;
}
inline void HDNodeType::set_child_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  child_num_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.child_num)
}

// required bytes chain_code = 4;
inline bool HDNodeType::has_chain_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDNodeType::clear_chain_code() {
  chain_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HDNodeType::chain_code() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.chain_code)
  return chain_code_.GetNoArena();
}
inline void HDNodeType::set_chain_code(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  chain_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.chain_code)
}
#if LANG_CXX11
inline void HDNodeType::set_chain_code(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  chain_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.HDNodeType.chain_code)
}
#endif
inline void HDNodeType::set_chain_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  chain_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.HDNodeType.chain_code)
}
inline void HDNodeType::set_chain_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  chain_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.HDNodeType.chain_code)
}
inline ::std::string* HDNodeType::mutable_chain_code() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.HDNodeType.chain_code)
  return chain_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDNodeType::release_chain_code() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.HDNodeType.chain_code)
  if (!has_chain_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return chain_code_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDNodeType::set_allocated_chain_code(::std::string* chain_code) {
  if (chain_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chain_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_code);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.HDNodeType.chain_code)
}

// optional bytes private_key = 5;
inline bool HDNodeType::has_private_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDNodeType::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& HDNodeType::private_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.private_key)
  return private_key_.GetNoArena();
}
inline void HDNodeType::set_private_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.private_key)
}
#if LANG_CXX11
inline void HDNodeType::set_private_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.HDNodeType.private_key)
}
#endif
inline void HDNodeType::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.HDNodeType.private_key)
}
inline void HDNodeType::set_private_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.HDNodeType.private_key)
}
inline ::std::string* HDNodeType::mutable_private_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.HDNodeType.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDNodeType::release_private_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.HDNodeType.private_key)
  if (!has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return private_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDNodeType::set_allocated_private_key(::std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.HDNodeType.private_key)
}

// optional bytes public_key = 6;
inline bool HDNodeType::has_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDNodeType::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& HDNodeType::public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.public_key)
  return public_key_.GetNoArena();
}
inline void HDNodeType::set_public_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.public_key)
}
#if LANG_CXX11
inline void HDNodeType::set_public_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.common.HDNodeType.public_key)
}
#endif
inline void HDNodeType::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.common.HDNodeType.public_key)
}
inline void HDNodeType::set_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.common.HDNodeType.public_key)
}
inline ::std::string* HDNodeType::mutable_public_key() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.HDNodeType.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDNodeType::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.HDNodeType.public_key)
  if (!has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return public_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDNodeType::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.HDNodeType.public_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hw::trezor::messages::common::Failure_FailureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::common::Failure_FailureType>() {
  return ::hw::trezor::messages::common::Failure_FailureType_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType>() {
  return ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType>() {
  return ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messages_2dcommon_2eproto
