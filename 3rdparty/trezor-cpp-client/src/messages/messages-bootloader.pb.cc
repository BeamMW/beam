// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-bootloader.proto

#include "messages-bootloader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace hw {
namespace trezor {
namespace messages {
namespace bootloader {
class FirmwareEraseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareErase> _instance;
} _FirmwareErase_default_instance_;
class FirmwareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareRequest> _instance;
} _FirmwareRequest_default_instance_;
class FirmwareUploadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FirmwareUpload> _instance;
} _FirmwareUpload_default_instance_;
class SelfTestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SelfTest> _instance;
} _SelfTest_default_instance_;
}  // namespace bootloader
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsFirmwareErase_messages_2dbootloader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::bootloader::_FirmwareErase_default_instance_;
    new (ptr) ::hw::trezor::messages::bootloader::FirmwareErase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::bootloader::FirmwareErase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareErase_messages_2dbootloader_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirmwareErase_messages_2dbootloader_2eproto}, {}};

static void InitDefaultsFirmwareRequest_messages_2dbootloader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::bootloader::_FirmwareRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::bootloader::FirmwareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::bootloader::FirmwareRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareRequest_messages_2dbootloader_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirmwareRequest_messages_2dbootloader_2eproto}, {}};

static void InitDefaultsFirmwareUpload_messages_2dbootloader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::bootloader::_FirmwareUpload_default_instance_;
    new (ptr) ::hw::trezor::messages::bootloader::FirmwareUpload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::bootloader::FirmwareUpload::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FirmwareUpload_messages_2dbootloader_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFirmwareUpload_messages_2dbootloader_2eproto}, {}};

static void InitDefaultsSelfTest_messages_2dbootloader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::bootloader::_SelfTest_default_instance_;
    new (ptr) ::hw::trezor::messages::bootloader::SelfTest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::bootloader::SelfTest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SelfTest_messages_2dbootloader_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSelfTest_messages_2dbootloader_2eproto}, {}};

void InitDefaults_messages_2dbootloader_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareErase_messages_2dbootloader_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareRequest_messages_2dbootloader_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FirmwareUpload_messages_2dbootloader_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SelfTest_messages_2dbootloader_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2dbootloader_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2dbootloader_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2dbootloader_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2dbootloader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareErase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareErase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareErase, length_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareRequest, length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareUpload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareUpload, payload_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::FirmwareUpload, hash_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::SelfTest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::SelfTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::bootloader::SelfTest, payload_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hw::trezor::messages::bootloader::FirmwareErase)},
  { 7, 14, sizeof(::hw::trezor::messages::bootloader::FirmwareRequest)},
  { 16, 23, sizeof(::hw::trezor::messages::bootloader::FirmwareUpload)},
  { 25, 31, sizeof(::hw::trezor::messages::bootloader::SelfTest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::bootloader::_FirmwareErase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::bootloader::_FirmwareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::bootloader::_FirmwareUpload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::bootloader::_SelfTest_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2dbootloader_2eproto = {
  {}, AddDescriptors_messages_2dbootloader_2eproto, "messages-bootloader.proto", schemas,
  file_default_instances, TableStruct_messages_2dbootloader_2eproto::offsets,
  file_level_metadata_messages_2dbootloader_2eproto, 4, file_level_enum_descriptors_messages_2dbootloader_2eproto, file_level_service_descriptors_messages_2dbootloader_2eproto,
};

const char descriptor_table_protodef_messages_2dbootloader_2eproto[] =
  "\n\031messages-bootloader.proto\022\035hw.trezor.m"
  "essages.bootloader\"\037\n\rFirmwareErase\022\016\n\006l"
  "ength\030\001 \001(\r\"1\n\017FirmwareRequest\022\016\n\006offset"
  "\030\001 \001(\r\022\016\n\006length\030\002 \001(\r\"/\n\016FirmwareUpload"
  "\022\017\n\007payload\030\001 \002(\014\022\014\n\004hash\030\002 \001(\014\"\033\n\010SelfT"
  "est\022\017\n\007payload\030\001 \001(\014B>\n#com.satoshilabs."
  "trezor.lib.protobufB\027TrezorMessageBootlo"
  "ader"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2dbootloader_2eproto = {
  false, InitDefaults_messages_2dbootloader_2eproto, 
  descriptor_table_protodef_messages_2dbootloader_2eproto,
  "messages-bootloader.proto", &assign_descriptors_table_messages_2dbootloader_2eproto, 284,
};

void AddDescriptors_messages_2dbootloader_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2dbootloader_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dbootloader_2eproto = []() { AddDescriptors_messages_2dbootloader_2eproto(); return true; }();
namespace hw {
namespace trezor {
namespace messages {
namespace bootloader {

// ===================================================================

void FirmwareErase::InitAsDefaultInstance() {
}
class FirmwareErase::HasBitSetters {
 public:
  static void set_has_length(FirmwareErase* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareErase::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareErase::FirmwareErase()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.bootloader.FirmwareErase)
}
FirmwareErase::FirmwareErase(const FirmwareErase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.bootloader.FirmwareErase)
}

void FirmwareErase::SharedCtor() {
  length_ = 0u;
}

FirmwareErase::~FirmwareErase() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.bootloader.FirmwareErase)
  SharedDtor();
}

void FirmwareErase::SharedDtor() {
}

void FirmwareErase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirmwareErase& FirmwareErase::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FirmwareErase_messages_2dbootloader_2eproto.base);
  return *internal_default_instance();
}


void FirmwareErase::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.bootloader.FirmwareErase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FirmwareErase::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FirmwareErase*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 length = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FirmwareErase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.bootloader.FirmwareErase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.bootloader.FirmwareErase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.bootloader.FirmwareErase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FirmwareErase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.bootloader.FirmwareErase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.bootloader.FirmwareErase)
}

::google::protobuf::uint8* FirmwareErase::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.bootloader.FirmwareErase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.bootloader.FirmwareErase)
  return target;
}

size_t FirmwareErase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.bootloader.FirmwareErase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 length = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareErase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.bootloader.FirmwareErase)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareErase* source =
      ::google::protobuf::DynamicCastToGenerated<FirmwareErase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.bootloader.FirmwareErase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.bootloader.FirmwareErase)
    MergeFrom(*source);
  }
}

void FirmwareErase::MergeFrom(const FirmwareErase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.bootloader.FirmwareErase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_length()) {
    set_length(from.length());
  }
}

void FirmwareErase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.bootloader.FirmwareErase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareErase::CopyFrom(const FirmwareErase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.bootloader.FirmwareErase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareErase::IsInitialized() const {
  return true;
}

void FirmwareErase::Swap(FirmwareErase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareErase::InternalSwap(FirmwareErase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(length_, other->length_);
}

::google::protobuf::Metadata FirmwareErase::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbootloader_2eproto);
  return ::file_level_metadata_messages_2dbootloader_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FirmwareRequest::InitAsDefaultInstance() {
}
class FirmwareRequest::HasBitSetters {
 public:
  static void set_has_offset(FirmwareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_length(FirmwareRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareRequest::kOffsetFieldNumber;
const int FirmwareRequest::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareRequest::FirmwareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.bootloader.FirmwareRequest)
}
FirmwareRequest::FirmwareRequest(const FirmwareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.bootloader.FirmwareRequest)
}

void FirmwareRequest::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

FirmwareRequest::~FirmwareRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.bootloader.FirmwareRequest)
  SharedDtor();
}

void FirmwareRequest::SharedDtor() {
}

void FirmwareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirmwareRequest& FirmwareRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FirmwareRequest_messages_2dbootloader_2eproto.base);
  return *internal_default_instance();
}


void FirmwareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.bootloader.FirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FirmwareRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FirmwareRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 offset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 length = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_length(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FirmwareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.bootloader.FirmwareRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_offset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.bootloader.FirmwareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.bootloader.FirmwareRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FirmwareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.bootloader.FirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 offset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.bootloader.FirmwareRequest)
}

::google::protobuf::uint8* FirmwareRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.bootloader.FirmwareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.bootloader.FirmwareRequest)
  return target;
}

size_t FirmwareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.bootloader.FirmwareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.bootloader.FirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FirmwareRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.bootloader.FirmwareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.bootloader.FirmwareRequest)
    MergeFrom(*source);
  }
}

void FirmwareRequest::MergeFrom(const FirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.bootloader.FirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FirmwareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.bootloader.FirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareRequest::CopyFrom(const FirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.bootloader.FirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareRequest::IsInitialized() const {
  return true;
}

void FirmwareRequest::Swap(FirmwareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareRequest::InternalSwap(FirmwareRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(offset_, other->offset_);
  swap(length_, other->length_);
}

::google::protobuf::Metadata FirmwareRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbootloader_2eproto);
  return ::file_level_metadata_messages_2dbootloader_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FirmwareUpload::InitAsDefaultInstance() {
}
class FirmwareUpload::HasBitSetters {
 public:
  static void set_has_payload(FirmwareUpload* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hash(FirmwareUpload* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FirmwareUpload::kPayloadFieldNumber;
const int FirmwareUpload::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FirmwareUpload::FirmwareUpload()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.bootloader.FirmwareUpload)
}
FirmwareUpload::FirmwareUpload(const FirmwareUpload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.bootloader.FirmwareUpload)
}

void FirmwareUpload::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FirmwareUpload_messages_2dbootloader_2eproto.base);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FirmwareUpload::~FirmwareUpload() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.bootloader.FirmwareUpload)
  SharedDtor();
}

void FirmwareUpload::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FirmwareUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirmwareUpload& FirmwareUpload::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FirmwareUpload_messages_2dbootloader_2eproto.base);
  return *internal_default_instance();
}


void FirmwareUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.bootloader.FirmwareUpload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FirmwareUpload::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FirmwareUpload*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes payload = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes hash = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FirmwareUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.bootloader.FirmwareUpload)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes payload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.bootloader.FirmwareUpload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.bootloader.FirmwareUpload)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FirmwareUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.bootloader.FirmwareUpload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes payload = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  // optional bytes hash = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.bootloader.FirmwareUpload)
}

::google::protobuf::uint8* FirmwareUpload::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.bootloader.FirmwareUpload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes payload = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  // optional bytes hash = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.bootloader.FirmwareUpload)
  return target;
}

size_t FirmwareUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.bootloader.FirmwareUpload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes payload = 1;
  if (has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes hash = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirmwareUpload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.bootloader.FirmwareUpload)
  GOOGLE_DCHECK_NE(&from, this);
  const FirmwareUpload* source =
      ::google::protobuf::DynamicCastToGenerated<FirmwareUpload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.bootloader.FirmwareUpload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.bootloader.FirmwareUpload)
    MergeFrom(*source);
  }
}

void FirmwareUpload::MergeFrom(const FirmwareUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.bootloader.FirmwareUpload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
  }
}

void FirmwareUpload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.bootloader.FirmwareUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirmwareUpload::CopyFrom(const FirmwareUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.bootloader.FirmwareUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirmwareUpload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FirmwareUpload::Swap(FirmwareUpload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FirmwareUpload::InternalSwap(FirmwareUpload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FirmwareUpload::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbootloader_2eproto);
  return ::file_level_metadata_messages_2dbootloader_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SelfTest::InitAsDefaultInstance() {
}
class SelfTest::HasBitSetters {
 public:
  static void set_has_payload(SelfTest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelfTest::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelfTest::SelfTest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.bootloader.SelfTest)
}
SelfTest::SelfTest(const SelfTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.bootloader.SelfTest)
}

void SelfTest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SelfTest_messages_2dbootloader_2eproto.base);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SelfTest::~SelfTest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.bootloader.SelfTest)
  SharedDtor();
}

void SelfTest::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SelfTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelfTest& SelfTest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SelfTest_messages_2dbootloader_2eproto.base);
  return *internal_default_instance();
}


void SelfTest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.bootloader.SelfTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SelfTest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SelfTest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes payload = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SelfTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.bootloader.SelfTest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes payload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.bootloader.SelfTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.bootloader.SelfTest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SelfTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.bootloader.SelfTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes payload = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.bootloader.SelfTest)
}

::google::protobuf::uint8* SelfTest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.bootloader.SelfTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes payload = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.bootloader.SelfTest)
  return target;
}

size_t SelfTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.bootloader.SelfTest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes payload = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelfTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.bootloader.SelfTest)
  GOOGLE_DCHECK_NE(&from, this);
  const SelfTest* source =
      ::google::protobuf::DynamicCastToGenerated<SelfTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.bootloader.SelfTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.bootloader.SelfTest)
    MergeFrom(*source);
  }
}

void SelfTest::MergeFrom(const SelfTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.bootloader.SelfTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_payload()) {
    _has_bits_[0] |= 0x00000001u;
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void SelfTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.bootloader.SelfTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfTest::CopyFrom(const SelfTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.bootloader.SelfTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfTest::IsInitialized() const {
  return true;
}

void SelfTest::Swap(SelfTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelfTest::InternalSwap(SelfTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SelfTest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbootloader_2eproto);
  return ::file_level_metadata_messages_2dbootloader_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bootloader
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::bootloader::FirmwareErase* Arena::CreateMaybeMessage< ::hw::trezor::messages::bootloader::FirmwareErase >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::bootloader::FirmwareErase >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::bootloader::FirmwareRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::bootloader::FirmwareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::bootloader::FirmwareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::bootloader::FirmwareUpload* Arena::CreateMaybeMessage< ::hw::trezor::messages::bootloader::FirmwareUpload >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::bootloader::FirmwareUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::bootloader::SelfTest* Arena::CreateMaybeMessage< ::hw::trezor::messages::bootloader::SelfTest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::bootloader::SelfTest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
