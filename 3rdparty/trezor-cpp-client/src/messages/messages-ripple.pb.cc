// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-ripple.proto

#include "messages-ripple.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2dripple_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RippleSignTx_RipplePayment_messages_2dripple_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace ripple {
class RippleGetAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleGetAddress> _instance;
} _RippleGetAddress_default_instance_;
class RippleAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleAddress> _instance;
} _RippleAddress_default_instance_;
class RippleSignTx_RipplePaymentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleSignTx_RipplePayment> _instance;
} _RippleSignTx_RipplePayment_default_instance_;
class RippleSignTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleSignTx> _instance;
} _RippleSignTx_default_instance_;
class RippleSignedTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleSignedTx> _instance;
} _RippleSignedTx_default_instance_;
}  // namespace ripple
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsRippleGetAddress_messages_2dripple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleGetAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleGetAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleGetAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleGetAddress_messages_2dripple_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleGetAddress_messages_2dripple_2eproto}, {}};

static void InitDefaultsRippleAddress_messages_2dripple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleAddress_messages_2dripple_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleAddress_messages_2dripple_2eproto}, {}};

static void InitDefaultsRippleSignTx_RipplePayment_messages_2dripple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleSignTx_RipplePayment_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleSignTx_RipplePayment_messages_2dripple_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleSignTx_RipplePayment_messages_2dripple_2eproto}, {}};

static void InitDefaultsRippleSignTx_messages_2dripple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleSignTx_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleSignTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleSignTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RippleSignTx_messages_2dripple_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRippleSignTx_messages_2dripple_2eproto}, {
      &scc_info_RippleSignTx_RipplePayment_messages_2dripple_2eproto.base,}};

static void InitDefaultsRippleSignedTx_messages_2dripple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleSignedTx_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleSignedTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleSignedTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleSignedTx_messages_2dripple_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleSignedTx_messages_2dripple_2eproto}, {}};

void InitDefaults_messages_2dripple_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RippleGetAddress_messages_2dripple_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleAddress_messages_2dripple_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleSignTx_RipplePayment_messages_2dripple_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleSignTx_messages_2dripple_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleSignedTx_messages_2dripple_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2dripple_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2dripple_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2dripple_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2dripple_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, show_display_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleAddress, address_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, destination_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, destination_tag_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, fee_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, flags_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, sequence_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, last_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, payment_),
  ~0u,
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, serialized_tx_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hw::trezor::messages::ripple::RippleGetAddress)},
  { 9, 15, sizeof(::hw::trezor::messages::ripple::RippleAddress)},
  { 16, 24, sizeof(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment)},
  { 27, 38, sizeof(::hw::trezor::messages::ripple::RippleSignTx)},
  { 44, 51, sizeof(::hw::trezor::messages::ripple::RippleSignedTx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleGetAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleSignTx_RipplePayment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleSignTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleSignedTx_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2dripple_2eproto = {
  {}, AddDescriptors_messages_2dripple_2eproto, "messages-ripple.proto", schemas,
  file_default_instances, TableStruct_messages_2dripple_2eproto::offsets,
  file_level_metadata_messages_2dripple_2eproto, 5, file_level_enum_descriptors_messages_2dripple_2eproto, file_level_service_descriptors_messages_2dripple_2eproto,
};

const char descriptor_table_protodef_messages_2dripple_2eproto[] =
  "\n\025messages-ripple.proto\022\031hw.trezor.messa"
  "ges.ripple\";\n\020RippleGetAddress\022\021\n\taddres"
  "s_n\030\001 \003(\r\022\024\n\014show_display\030\002 \001(\010\" \n\rRippl"
  "eAddress\022\017\n\007address\030\001 \001(\t\"\204\002\n\014RippleSign"
  "Tx\022\021\n\taddress_n\030\001 \003(\r\022\013\n\003fee\030\002 \001(\004\022\r\n\005fl"
  "ags\030\003 \001(\r\022\020\n\010sequence\030\004 \001(\r\022\034\n\024last_ledg"
  "er_sequence\030\005 \001(\r\022F\n\007payment\030\006 \001(\01325.hw."
  "trezor.messages.ripple.RippleSignTx.Ripp"
  "lePayment\032M\n\rRipplePayment\022\016\n\006amount\030\001 \001"
  "(\004\022\023\n\013destination\030\002 \001(\t\022\027\n\017destination_t"
  "ag\030\003 \001(\r\":\n\016RippleSignedTx\022\021\n\tsignature\030"
  "\001 \001(\014\022\025\n\rserialized_tx\030\002 \001(\014B:\n#com.sato"
  "shilabs.trezor.lib.protobufB\023TrezorMessa"
  "geRipple"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2dripple_2eproto = {
  false, InitDefaults_messages_2dripple_2eproto, 
  descriptor_table_protodef_messages_2dripple_2eproto,
  "messages-ripple.proto", &assign_descriptors_table_messages_2dripple_2eproto, 528,
};

void AddDescriptors_messages_2dripple_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2dripple_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dripple_2eproto = []() { AddDescriptors_messages_2dripple_2eproto(); return true; }();
namespace hw {
namespace trezor {
namespace messages {
namespace ripple {

// ===================================================================

void RippleGetAddress::InitAsDefaultInstance() {
}
class RippleGetAddress::HasBitSetters {
 public:
  static void set_has_show_display(RippleGetAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleGetAddress::kAddressNFieldNumber;
const int RippleGetAddress::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleGetAddress::RippleGetAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleGetAddress)
}
RippleGetAddress::RippleGetAddress(const RippleGetAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleGetAddress)
}

void RippleGetAddress::SharedCtor() {
  show_display_ = false;
}

RippleGetAddress::~RippleGetAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleGetAddress)
  SharedDtor();
}

void RippleGetAddress::SharedDtor() {
}

void RippleGetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RippleGetAddress& RippleGetAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RippleGetAddress_messages_2dripple_2eproto.base);
  return *internal_default_instance();
}


void RippleGetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RippleGetAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RippleGetAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RippleGetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleGetAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleGetAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleGetAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RippleGetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleGetAddress)
}

::google::protobuf::uint8* RippleGetAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleGetAddress)
  return target;
}

size_t RippleGetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleGetAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleGetAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleGetAddress* source =
      ::google::protobuf::DynamicCastToGenerated<RippleGetAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleGetAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleGetAddress)
    MergeFrom(*source);
  }
}

void RippleGetAddress::MergeFrom(const RippleGetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void RippleGetAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleGetAddress::CopyFrom(const RippleGetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleGetAddress::IsInitialized() const {
  return true;
}

void RippleGetAddress::Swap(RippleGetAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleGetAddress::InternalSwap(RippleGetAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata RippleGetAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dripple_2eproto);
  return ::file_level_metadata_messages_2dripple_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RippleAddress::InitAsDefaultInstance() {
}
class RippleAddress::HasBitSetters {
 public:
  static void set_has_address(RippleAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleAddress::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleAddress::RippleAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleAddress)
}
RippleAddress::RippleAddress(const RippleAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleAddress)
}

void RippleAddress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RippleAddress_messages_2dripple_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RippleAddress::~RippleAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleAddress)
  SharedDtor();
}

void RippleAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RippleAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RippleAddress& RippleAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RippleAddress_messages_2dripple_2eproto.base);
  return *internal_default_instance();
}


void RippleAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RippleAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RippleAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.ripple.RippleAddress.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RippleAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.ripple.RippleAddress.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RippleAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleAddress)
}

::google::protobuf::uint8* RippleAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleAddress)
  return target;
}

size_t RippleAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string address = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleAddress* source =
      ::google::protobuf::DynamicCastToGenerated<RippleAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleAddress)
    MergeFrom(*source);
  }
}

void RippleAddress::MergeFrom(const RippleAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _has_bits_[0] |= 0x00000001u;
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void RippleAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleAddress::CopyFrom(const RippleAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleAddress::IsInitialized() const {
  return true;
}

void RippleAddress::Swap(RippleAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleAddress::InternalSwap(RippleAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata RippleAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dripple_2eproto);
  return ::file_level_metadata_messages_2dripple_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RippleSignTx_RipplePayment::InitAsDefaultInstance() {
}
class RippleSignTx_RipplePayment::HasBitSetters {
 public:
  static void set_has_amount(RippleSignTx_RipplePayment* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_destination(RippleSignTx_RipplePayment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_destination_tag(RippleSignTx_RipplePayment* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleSignTx_RipplePayment::kAmountFieldNumber;
const int RippleSignTx_RipplePayment::kDestinationFieldNumber;
const int RippleSignTx_RipplePayment::kDestinationTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleSignTx_RipplePayment::RippleSignTx_RipplePayment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
}
RippleSignTx_RipplePayment::RippleSignTx_RipplePayment(const RippleSignTx_RipplePayment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination()) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&destination_tag_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
}

void RippleSignTx_RipplePayment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RippleSignTx_RipplePayment_messages_2dripple_2eproto.base);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_tag_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
}

RippleSignTx_RipplePayment::~RippleSignTx_RipplePayment() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  SharedDtor();
}

void RippleSignTx_RipplePayment::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RippleSignTx_RipplePayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RippleSignTx_RipplePayment& RippleSignTx_RipplePayment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RippleSignTx_RipplePayment_messages_2dripple_2eproto.base);
  return *internal_default_instance();
}


void RippleSignTx_RipplePayment::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    destination_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_tag_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RippleSignTx_RipplePayment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RippleSignTx_RipplePayment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string destination = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.ripple.RippleSignTx.RipplePayment.destination");
        object = msg->mutable_destination();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 destination_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_destination_tag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RippleSignTx_RipplePayment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string destination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.ripple.RippleSignTx.RipplePayment.destination");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 destination_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_destination_tag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RippleSignTx_RipplePayment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleSignTx.RipplePayment.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination(), output);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destination_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
}

::google::protobuf::uint8* RippleSignTx_RipplePayment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleSignTx.RipplePayment.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destination_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  return target;
}

size_t RippleSignTx_RipplePayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string destination = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }

    // optional uint64 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 destination_tag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_tag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleSignTx_RipplePayment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleSignTx_RipplePayment* source =
      ::google::protobuf::DynamicCastToGenerated<RippleSignTx_RipplePayment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
    MergeFrom(*source);
  }
}

void RippleSignTx_RipplePayment::MergeFrom(const RippleSignTx_RipplePayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      destination_tag_ = from.destination_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RippleSignTx_RipplePayment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleSignTx_RipplePayment::CopyFrom(const RippleSignTx_RipplePayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleSignTx_RipplePayment::IsInitialized() const {
  return true;
}

void RippleSignTx_RipplePayment::Swap(RippleSignTx_RipplePayment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleSignTx_RipplePayment::InternalSwap(RippleSignTx_RipplePayment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(destination_tag_, other->destination_tag_);
}

::google::protobuf::Metadata RippleSignTx_RipplePayment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dripple_2eproto);
  return ::file_level_metadata_messages_2dripple_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RippleSignTx::InitAsDefaultInstance() {
  ::hw::trezor::messages::ripple::_RippleSignTx_default_instance_._instance.get_mutable()->payment_ = const_cast< ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment*>(
      ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment::internal_default_instance());
}
class RippleSignTx::HasBitSetters {
 public:
  static void set_has_fee(RippleSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flags(RippleSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_sequence(RippleSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_last_ledger_sequence(RippleSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment& payment(const RippleSignTx* msg);
  static void set_has_payment(RippleSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment&
RippleSignTx::HasBitSetters::payment(const RippleSignTx* msg) {
  return *msg->payment_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleSignTx::kAddressNFieldNumber;
const int RippleSignTx::kFeeFieldNumber;
const int RippleSignTx::kFlagsFieldNumber;
const int RippleSignTx::kSequenceFieldNumber;
const int RippleSignTx::kLastLedgerSequenceFieldNumber;
const int RippleSignTx::kPaymentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleSignTx::RippleSignTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleSignTx)
}
RippleSignTx::RippleSignTx(const RippleSignTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payment()) {
    payment_ = new ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment(*from.payment_);
  } else {
    payment_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ledger_sequence_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(last_ledger_sequence_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleSignTx)
}

void RippleSignTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RippleSignTx_messages_2dripple_2eproto.base);
  ::memset(&payment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ledger_sequence_) -
      reinterpret_cast<char*>(&payment_)) + sizeof(last_ledger_sequence_));
}

RippleSignTx::~RippleSignTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleSignTx)
  SharedDtor();
}

void RippleSignTx::SharedDtor() {
  if (this != internal_default_instance()) delete payment_;
}

void RippleSignTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RippleSignTx& RippleSignTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RippleSignTx_messages_2dripple_2eproto.base);
  return *internal_default_instance();
}


void RippleSignTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(payment_ != nullptr);
    payment_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_ledger_sequence_) -
        reinterpret_cast<char*>(&fee_)) + sizeof(last_ledger_sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RippleSignTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RippleSignTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint64 fee = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fee(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sequence = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 last_ledger_sequence = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_last_ledger_sequence(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment::_InternalParse;
        object = msg->mutable_payment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RippleSignTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleSignTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fee(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_ledger_sequence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_last_ledger_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ledger_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleSignTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleSignTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RippleSignTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fee(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sequence(), output);
  }

  // optional uint32 last_ledger_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_ledger_sequence(), output);
  }

  // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::payment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleSignTx)
}

::google::protobuf::uint8* RippleSignTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fee(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sequence(), target);
  }

  // optional uint32 last_ledger_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_ledger_sequence(), target);
  }

  // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::payment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleSignTx)
  return target;
}

size_t RippleSignTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleSignTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payment_);
    }

    // optional uint64 fee = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 sequence = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional uint32 last_ledger_sequence = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ledger_sequence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleSignTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleSignTx* source =
      ::google::protobuf::DynamicCastToGenerated<RippleSignTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleSignTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleSignTx)
    MergeFrom(*source);
  }
}

void RippleSignTx::MergeFrom(const RippleSignTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_payment()->::hw::trezor::messages::ripple::RippleSignTx_RipplePayment::MergeFrom(from.payment());
    }
    if (cached_has_bits & 0x00000002u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_ledger_sequence_ = from.last_ledger_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RippleSignTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleSignTx::CopyFrom(const RippleSignTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleSignTx::IsInitialized() const {
  return true;
}

void RippleSignTx::Swap(RippleSignTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleSignTx::InternalSwap(RippleSignTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(payment_, other->payment_);
  swap(fee_, other->fee_);
  swap(flags_, other->flags_);
  swap(sequence_, other->sequence_);
  swap(last_ledger_sequence_, other->last_ledger_sequence_);
}

::google::protobuf::Metadata RippleSignTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dripple_2eproto);
  return ::file_level_metadata_messages_2dripple_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RippleSignedTx::InitAsDefaultInstance() {
}
class RippleSignedTx::HasBitSetters {
 public:
  static void set_has_signature(RippleSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_serialized_tx(RippleSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleSignedTx::kSignatureFieldNumber;
const int RippleSignedTx::kSerializedTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleSignedTx::RippleSignedTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleSignedTx)
}
RippleSignedTx::RippleSignedTx(const RippleSignedTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_tx()) {
    serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleSignedTx)
}

void RippleSignedTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RippleSignedTx_messages_2dripple_2eproto.base);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RippleSignedTx::~RippleSignedTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleSignedTx)
  SharedDtor();
}

void RippleSignedTx::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RippleSignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RippleSignedTx& RippleSignedTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RippleSignedTx_messages_2dripple_2eproto.base);
  return *internal_default_instance();
}


void RippleSignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_tx_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RippleSignedTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RippleSignedTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes serialized_tx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialized_tx();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RippleSignedTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleSignedTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_tx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleSignedTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleSignedTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RippleSignedTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialized_tx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleSignedTx)
}

::google::protobuf::uint8* RippleSignedTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_tx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleSignedTx)
  return target;
}

size_t RippleSignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleSignedTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes serialized_tx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_tx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleSignedTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleSignedTx* source =
      ::google::protobuf::DynamicCastToGenerated<RippleSignedTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleSignedTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleSignedTx)
    MergeFrom(*source);
  }
}

void RippleSignedTx::MergeFrom(const RippleSignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
    }
  }
}

void RippleSignedTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleSignedTx::CopyFrom(const RippleSignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleSignedTx::IsInitialized() const {
  return true;
}

void RippleSignedTx::Swap(RippleSignedTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleSignedTx::InternalSwap(RippleSignedTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_tx_.Swap(&other->serialized_tx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata RippleSignedTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dripple_2eproto);
  return ::file_level_metadata_messages_2dripple_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ripple
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::ripple::RippleGetAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleGetAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleGetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::ripple::RippleAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::ripple::RippleSignTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleSignTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleSignTx >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::ripple::RippleSignedTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleSignedTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleSignedTx >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
