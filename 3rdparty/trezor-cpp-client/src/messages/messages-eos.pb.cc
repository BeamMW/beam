// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-eos.proto

#include "messages-eos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosSignTx_EosTxHeader_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionBuyRamBytes_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionDeleteAuth_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionLinkAuth_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionRefund_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionSellRam_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionUnknown_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionUnlinkAuth_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionVoteProducer_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosAuthorizationWait_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosPermissionLevel_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionBuyRam_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionCommon_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionDelegate_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionNewAccount_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionTransfer_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionUndelegate_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2deos_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EosTxActionAck_EosAuthorization_messages_2deos_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace eos {
class EosGetPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosGetPublicKey> _instance;
} _EosGetPublicKey_default_instance_;
class EosPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosPublicKey> _instance;
} _EosPublicKey_default_instance_;
class EosSignTx_EosTxHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosSignTx_EosTxHeader> _instance;
} _EosSignTx_EosTxHeader_default_instance_;
class EosSignTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosSignTx> _instance;
} _EosSignTx_default_instance_;
class EosTxActionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionRequest> _instance;
} _EosTxActionRequest_default_instance_;
class EosTxActionAck_EosAssetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosAsset> _instance;
} _EosTxActionAck_EosAsset_default_instance_;
class EosTxActionAck_EosPermissionLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosPermissionLevel> _instance;
} _EosTxActionAck_EosPermissionLevel_default_instance_;
class EosTxActionAck_EosAuthorizationKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosAuthorizationKey> _instance;
} _EosTxActionAck_EosAuthorizationKey_default_instance_;
class EosTxActionAck_EosAuthorizationAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosAuthorizationAccount> _instance;
} _EosTxActionAck_EosAuthorizationAccount_default_instance_;
class EosTxActionAck_EosAuthorizationWaitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosAuthorizationWait> _instance;
} _EosTxActionAck_EosAuthorizationWait_default_instance_;
class EosTxActionAck_EosAuthorizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosAuthorization> _instance;
} _EosTxActionAck_EosAuthorization_default_instance_;
class EosTxActionAck_EosActionCommonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionCommon> _instance;
} _EosTxActionAck_EosActionCommon_default_instance_;
class EosTxActionAck_EosActionTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionTransfer> _instance;
} _EosTxActionAck_EosActionTransfer_default_instance_;
class EosTxActionAck_EosActionDelegateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionDelegate> _instance;
} _EosTxActionAck_EosActionDelegate_default_instance_;
class EosTxActionAck_EosActionUndelegateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionUndelegate> _instance;
} _EosTxActionAck_EosActionUndelegate_default_instance_;
class EosTxActionAck_EosActionRefundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionRefund> _instance;
} _EosTxActionAck_EosActionRefund_default_instance_;
class EosTxActionAck_EosActionBuyRamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionBuyRam> _instance;
} _EosTxActionAck_EosActionBuyRam_default_instance_;
class EosTxActionAck_EosActionBuyRamBytesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionBuyRamBytes> _instance;
} _EosTxActionAck_EosActionBuyRamBytes_default_instance_;
class EosTxActionAck_EosActionSellRamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionSellRam> _instance;
} _EosTxActionAck_EosActionSellRam_default_instance_;
class EosTxActionAck_EosActionVoteProducerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionVoteProducer> _instance;
} _EosTxActionAck_EosActionVoteProducer_default_instance_;
class EosTxActionAck_EosActionUpdateAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionUpdateAuth> _instance;
} _EosTxActionAck_EosActionUpdateAuth_default_instance_;
class EosTxActionAck_EosActionDeleteAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionDeleteAuth> _instance;
} _EosTxActionAck_EosActionDeleteAuth_default_instance_;
class EosTxActionAck_EosActionLinkAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionLinkAuth> _instance;
} _EosTxActionAck_EosActionLinkAuth_default_instance_;
class EosTxActionAck_EosActionUnlinkAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionUnlinkAuth> _instance;
} _EosTxActionAck_EosActionUnlinkAuth_default_instance_;
class EosTxActionAck_EosActionNewAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionNewAccount> _instance;
} _EosTxActionAck_EosActionNewAccount_default_instance_;
class EosTxActionAck_EosActionUnknownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck_EosActionUnknown> _instance;
} _EosTxActionAck_EosActionUnknown_default_instance_;
class EosTxActionAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosTxActionAck> _instance;
} _EosTxActionAck_default_instance_;
class EosSignedTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EosSignedTx> _instance;
} _EosSignedTx_default_instance_;
}  // namespace eos
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsEosGetPublicKey_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosGetPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosGetPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosGetPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosGetPublicKey_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosGetPublicKey_messages_2deos_2eproto}, {}};

static void InitDefaultsEosPublicKey_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosPublicKey_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosPublicKey_messages_2deos_2eproto}, {}};

static void InitDefaultsEosSignTx_EosTxHeader_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosSignTx_EosTxHeader_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosSignTx_EosTxHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosSignTx_EosTxHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosSignTx_EosTxHeader_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosSignTx_EosTxHeader_messages_2deos_2eproto}, {}};

static void InitDefaultsEosSignTx_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosSignTx_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosSignTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosSignTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosSignTx_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosSignTx_messages_2deos_2eproto}, {
      &scc_info_EosSignTx_EosTxHeader_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionRequest_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionRequest_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionRequest_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosAsset_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosAsset_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosAsset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosAsset_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosPermissionLevel_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosPermissionLevel_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosPermissionLevel_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosPermissionLevel_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorizationKey_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorizationAccount_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosPermissionLevel_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosAuthorizationWait_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorizationWait_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosAuthorizationWait_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosAuthorizationWait_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosAuthorization_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorization_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_EosTxActionAck_EosAuthorization_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEosTxActionAck_EosAuthorization_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosAuthorizationWait_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionCommon_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionCommon_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionCommon_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosActionCommon_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosPermissionLevel_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionTransfer_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionTransfer_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionTransfer_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosActionTransfer_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionDelegate_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionDelegate_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionDelegate_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosActionDelegate_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionUndelegate_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionUndelegate_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionUndelegate_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosActionUndelegate_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionRefund_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionRefund_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionRefund_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionRefund_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosActionBuyRam_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionBuyRam_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionBuyRam_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosActionBuyRam_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionBuyRamBytes_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionBuyRamBytes_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionBuyRamBytes_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionBuyRamBytes_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosActionSellRam_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionSellRam_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionSellRam_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionSellRam_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosActionVoteProducer_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionVoteProducer_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionVoteProducer_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionVoteProducer_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionUpdateAuth_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosAuthorization_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionDeleteAuth_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionDeleteAuth_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionDeleteAuth_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionDeleteAuth_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosActionLinkAuth_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionLinkAuth_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionLinkAuth_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionLinkAuth_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosActionUnlinkAuth_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionUnlinkAuth_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionUnlinkAuth_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionUnlinkAuth_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_EosActionNewAccount_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionNewAccount_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EosTxActionAck_EosActionNewAccount_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEosTxActionAck_EosActionNewAccount_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosAuthorization_messages_2deos_2eproto.base,}};

static void InitDefaultsEosTxActionAck_EosActionUnknown_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_EosActionUnknown_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosTxActionAck_EosActionUnknown_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosTxActionAck_EosActionUnknown_messages_2deos_2eproto}, {}};

static void InitDefaultsEosTxActionAck_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosTxActionAck_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosTxActionAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosTxActionAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<15> scc_info_EosTxActionAck_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 15, InitDefaultsEosTxActionAck_messages_2deos_2eproto}, {
      &scc_info_EosTxActionAck_EosActionCommon_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionTransfer_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionDelegate_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionUndelegate_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionRefund_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionBuyRam_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionBuyRamBytes_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionSellRam_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionVoteProducer_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionDeleteAuth_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionLinkAuth_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionUnlinkAuth_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionNewAccount_messages_2deos_2eproto.base,
      &scc_info_EosTxActionAck_EosActionUnknown_messages_2deos_2eproto.base,}};

static void InitDefaultsEosSignedTx_messages_2deos_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::eos::_EosSignedTx_default_instance_;
    new (ptr) ::hw::trezor::messages::eos::EosSignedTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::eos::EosSignedTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EosSignedTx_messages_2deos_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEosSignedTx_messages_2deos_2eproto}, {}};

void InitDefaults_messages_2deos_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EosGetPublicKey_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosPublicKey_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosSignTx_EosTxHeader_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosSignTx_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionRequest_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosPermissionLevel_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosAuthorizationWait_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosAuthorization_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionCommon_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionTransfer_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionDelegate_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionUndelegate_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionRefund_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionBuyRam_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionBuyRamBytes_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionSellRam_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionVoteProducer_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionDeleteAuth_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionLinkAuth_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionUnlinkAuth_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionNewAccount_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_EosActionUnknown_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosTxActionAck_messages_2deos_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EosSignedTx_messages_2deos_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2deos_2eproto[28];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2deos_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2deos_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2deos_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosGetPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosGetPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosGetPublicKey, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosGetPublicKey, show_display_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosPublicKey, wif_public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosPublicKey, raw_public_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, expiration_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, ref_block_num_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, ref_block_prefix_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, max_net_usage_words_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, max_cpu_usage_ms_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx_EosTxHeader, delay_sec_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx, chain_id_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx, header_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignTx, num_actions_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionRequest, data_size_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAsset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAsset, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAsset, symbol_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel, actor_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel, permission_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey, type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey, key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey, weight_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount, weight_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait, wait_sec_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait, weight_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization, threshold_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization, keys_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization, accounts_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization, waits_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon, name_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon, authorization_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer, sender_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer, receiver_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer, quantity_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer, memo_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate, sender_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate, receiver_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate, net_quantity_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate, cpu_quantity_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate, transfer_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate, sender_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate, receiver_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate, net_quantity_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate, cpu_quantity_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund, owner_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam, payer_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam, receiver_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam, quantity_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes, payer_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes, receiver_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes, bytes_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam, bytes_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer, voter_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer, proxy_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer, producers_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth, permission_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth, parent_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth, auth_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth, permission_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth, code_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth, type_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth, requirement_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth, account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth, code_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount, creator_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount, name_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount, owner_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount, active_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown, data_size_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown, data_chunk_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, common_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, transfer_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, delegate_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, undelegate_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, refund_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, buy_ram_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, buy_ram_bytes_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, sell_ram_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, vote_producer_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, update_auth_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, delete_auth_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, link_auth_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, unlink_auth_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, new_account_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosTxActionAck, unknown_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignedTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignedTx, signature_v_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignedTx, signature_r_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::eos::EosSignedTx, signature_s_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hw::trezor::messages::eos::EosGetPublicKey)},
  { 9, 16, sizeof(::hw::trezor::messages::eos::EosPublicKey)},
  { 18, 29, sizeof(::hw::trezor::messages::eos::EosSignTx_EosTxHeader)},
  { 35, 44, sizeof(::hw::trezor::messages::eos::EosSignTx)},
  { 48, 54, sizeof(::hw::trezor::messages::eos::EosTxActionRequest)},
  { 55, 62, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosAsset)},
  { 64, 71, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel)},
  { 73, 82, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey)},
  { 86, 93, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount)},
  { 95, 102, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait)},
  { 104, 113, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization)},
  { 117, 125, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon)},
  { 128, 137, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer)},
  { 141, 151, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate)},
  { 156, 165, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate)},
  { 169, 175, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund)},
  { 176, 184, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam)},
  { 187, 195, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes)},
  { 198, 205, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam)},
  { 207, 215, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer)},
  { 218, 227, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth)},
  { 231, 238, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth)},
  { 240, 249, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth)},
  { 253, 261, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth)},
  { 264, 273, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount)},
  { 277, 284, sizeof(::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown)},
  { 286, 306, sizeof(::hw::trezor::messages::eos::EosTxActionAck)},
  { 321, 329, sizeof(::hw::trezor::messages::eos::EosSignedTx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosGetPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosSignTx_EosTxHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosSignTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosAsset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosPermissionLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorizationKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorizationAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorizationWait_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionDelegate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionUndelegate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionRefund_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionBuyRam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionBuyRamBytes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionSellRam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionVoteProducer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionUpdateAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionDeleteAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionLinkAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionUnlinkAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionNewAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_EosActionUnknown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosTxActionAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::eos::_EosSignedTx_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2deos_2eproto = {
  {}, AddDescriptors_messages_2deos_2eproto, "messages-eos.proto", schemas,
  file_default_instances, TableStruct_messages_2deos_2eproto::offsets,
  file_level_metadata_messages_2deos_2eproto, 28, file_level_enum_descriptors_messages_2deos_2eproto, file_level_service_descriptors_messages_2deos_2eproto,
};

const char descriptor_table_protodef_messages_2deos_2eproto[] =
  "\n\022messages-eos.proto\022\026hw.trezor.messages"
  ".eos\":\n\017EosGetPublicKey\022\021\n\taddress_n\030\001 \003"
  "(\r\022\024\n\014show_display\030\002 \001(\010\">\n\014EosPublicKey"
  "\022\026\n\016wif_public_key\030\001 \001(\t\022\026\n\016raw_public_k"
  "ey\030\002 \001(\014\"\243\002\n\tEosSignTx\022\021\n\taddress_n\030\001 \003("
  "\r\022\020\n\010chain_id\030\002 \001(\014\022=\n\006header\030\003 \001(\0132-.hw"
  ".trezor.messages.eos.EosSignTx.EosTxHead"
  "er\022\023\n\013num_actions\030\004 \001(\r\032\234\001\n\013EosTxHeader\022"
  "\022\n\nexpiration\030\001 \002(\r\022\025\n\rref_block_num\030\002 \002"
  "(\r\022\030\n\020ref_block_prefix\030\003 \002(\r\022\033\n\023max_net_"
  "usage_words\030\004 \002(\r\022\030\n\020max_cpu_usage_ms\030\005 "
  "\002(\r\022\021\n\tdelay_sec\030\006 \002(\r\"\'\n\022EosTxActionReq"
  "uest\022\021\n\tdata_size\030\001 \001(\r\"\226\033\n\016EosTxActionA"
  "ck\022F\n\006common\030\001 \001(\01326.hw.trezor.messages."
  "eos.EosTxActionAck.EosActionCommon\022J\n\010tr"
  "ansfer\030\002 \001(\01328.hw.trezor.messages.eos.Eo"
  "sTxActionAck.EosActionTransfer\022J\n\010delega"
  "te\030\003 \001(\01328.hw.trezor.messages.eos.EosTxA"
  "ctionAck.EosActionDelegate\022N\n\nundelegate"
  "\030\004 \001(\0132:.hw.trezor.messages.eos.EosTxAct"
  "ionAck.EosActionUndelegate\022F\n\006refund\030\005 \001"
  "(\01326.hw.trezor.messages.eos.EosTxActionA"
  "ck.EosActionRefund\022G\n\007buy_ram\030\006 \001(\01326.hw"
  ".trezor.messages.eos.EosTxActionAck.EosA"
  "ctionBuyRam\022R\n\rbuy_ram_bytes\030\007 \001(\0132;.hw."
  "trezor.messages.eos.EosTxActionAck.EosAc"
  "tionBuyRamBytes\022I\n\010sell_ram\030\010 \001(\01327.hw.t"
  "rezor.messages.eos.EosTxActionAck.EosAct"
  "ionSellRam\022S\n\rvote_producer\030\t \001(\0132<.hw.t"
  "rezor.messages.eos.EosTxActionAck.EosAct"
  "ionVoteProducer\022O\n\013update_auth\030\n \001(\0132:.h"
  "w.trezor.messages.eos.EosTxActionAck.Eos"
  "ActionUpdateAuth\022O\n\013delete_auth\030\013 \001(\0132:."
  "hw.trezor.messages.eos.EosTxActionAck.Eo"
  "sActionDeleteAuth\022K\n\tlink_auth\030\014 \001(\01328.h"
  "w.trezor.messages.eos.EosTxActionAck.Eos"
  "ActionLinkAuth\022O\n\013unlink_auth\030\r \001(\0132:.hw"
  ".trezor.messages.eos.EosTxActionAck.EosA"
  "ctionUnlinkAuth\022O\n\013new_account\030\016 \001(\0132:.h"
  "w.trezor.messages.eos.EosTxActionAck.Eos"
  "ActionNewAccount\022H\n\007unknown\030\017 \001(\01327.hw.t"
  "rezor.messages.eos.EosTxActionAck.EosAct"
  "ionUnknown\032*\n\010EosAsset\022\016\n\006amount\030\001 \001(\022\022\016"
  "\n\006symbol\030\002 \001(\004\0327\n\022EosPermissionLevel\022\r\n\005"
  "actor\030\001 \001(\004\022\022\n\npermission\030\002 \001(\004\032S\n\023EosAu"
  "thorizationKey\022\014\n\004type\030\001 \001(\r\022\013\n\003key\030\002 \001("
  "\014\022\021\n\taddress_n\030\003 \003(\r\022\016\n\006weight\030\004 \001(\r\032u\n\027"
  "EosAuthorizationAccount\022J\n\007account\030\001 \001(\013"
  "29.hw.trezor.messages.eos.EosTxActionAck"
  ".EosPermissionLevel\022\016\n\006weight\030\002 \001(\r\0328\n\024E"
  "osAuthorizationWait\022\020\n\010wait_sec\030\001 \001(\r\022\016\n"
  "\006weight\030\002 \001(\r\032\215\002\n\020EosAuthorization\022\021\n\tth"
  "reshold\030\001 \001(\r\022H\n\004keys\030\002 \003(\0132:.hw.trezor."
  "messages.eos.EosTxActionAck.EosAuthoriza"
  "tionKey\022P\n\010accounts\030\003 \003(\0132>.hw.trezor.me"
  "ssages.eos.EosTxActionAck.EosAuthorizati"
  "onAccount\022J\n\005waits\030\004 \003(\0132;.hw.trezor.mes"
  "sages.eos.EosTxActionAck.EosAuthorizatio"
  "nWait\032\202\001\n\017EosActionCommon\022\017\n\007account\030\001 \001"
  "(\004\022\014\n\004name\030\002 \001(\004\022P\n\rauthorization\030\003 \003(\0132"
  "9.hw.trezor.messages.eos.EosTxActionAck."
  "EosPermissionLevel\032\206\001\n\021EosActionTransfer"
  "\022\016\n\006sender\030\001 \001(\004\022\020\n\010receiver\030\002 \001(\004\022A\n\010qu"
  "antity\030\003 \001(\0132/.hw.trezor.messages.eos.Eo"
  "sTxActionAck.EosAsset\022\014\n\004memo\030\004 \001(\t\032\325\001\n\021"
  "EosActionDelegate\022\016\n\006sender\030\001 \001(\004\022\020\n\010rec"
  "eiver\030\002 \001(\004\022E\n\014net_quantity\030\003 \001(\0132/.hw.t"
  "rezor.messages.eos.EosTxActionAck.EosAss"
  "et\022E\n\014cpu_quantity\030\004 \001(\0132/.hw.trezor.mes"
  "sages.eos.EosTxActionAck.EosAsset\022\020\n\010tra"
  "nsfer\030\005 \001(\010\032\305\001\n\023EosActionUndelegate\022\016\n\006s"
  "ender\030\001 \001(\004\022\020\n\010receiver\030\002 \001(\004\022E\n\014net_qua"
  "ntity\030\003 \001(\0132/.hw.trezor.messages.eos.Eos"
  "TxActionAck.EosAsset\022E\n\014cpu_quantity\030\004 \001"
  "(\0132/.hw.trezor.messages.eos.EosTxActionA"
  "ck.EosAsset\032 \n\017EosActionRefund\022\r\n\005owner\030"
  "\001 \001(\004\032u\n\017EosActionBuyRam\022\r\n\005payer\030\001 \001(\004\022"
  "\020\n\010receiver\030\002 \001(\004\022A\n\010quantity\030\003 \001(\0132/.hw"
  ".trezor.messages.eos.EosTxActionAck.EosA"
  "sset\032F\n\024EosActionBuyRamBytes\022\r\n\005payer\030\001 "
  "\001(\004\022\020\n\010receiver\030\002 \001(\004\022\r\n\005bytes\030\003 \001(\r\0322\n\020"
  "EosActionSellRam\022\017\n\007account\030\001 \001(\004\022\r\n\005byt"
  "es\030\002 \001(\004\032H\n\025EosActionVoteProducer\022\r\n\005vot"
  "er\030\001 \001(\004\022\r\n\005proxy\030\002 \001(\004\022\021\n\tproducers\030\003 \003"
  "(\004\032\221\001\n\023EosActionUpdateAuth\022\017\n\007account\030\001 "
  "\001(\004\022\022\n\npermission\030\002 \001(\004\022\016\n\006parent\030\003 \001(\004\022"
  "E\n\004auth\030\004 \001(\01327.hw.trezor.messages.eos.E"
  "osTxActionAck.EosAuthorization\032:\n\023EosAct"
  "ionDeleteAuth\022\017\n\007account\030\001 \001(\004\022\022\n\npermis"
  "sion\030\002 \001(\004\032U\n\021EosActionLinkAuth\022\017\n\007accou"
  "nt\030\001 \001(\004\022\014\n\004code\030\002 \001(\004\022\014\n\004type\030\003 \001(\004\022\023\n\013"
  "requirement\030\004 \001(\004\032B\n\023EosActionUnlinkAuth"
  "\022\017\n\007account\030\001 \001(\004\022\014\n\004code\030\002 \001(\004\022\014\n\004type\030"
  "\003 \001(\004\032\305\001\n\023EosActionNewAccount\022\017\n\007creator"
  "\030\001 \001(\004\022\014\n\004name\030\002 \001(\004\022F\n\005owner\030\003 \001(\01327.hw"
  ".trezor.messages.eos.EosTxActionAck.EosA"
  "uthorization\022G\n\006active\030\004 \001(\01327.hw.trezor"
  ".messages.eos.EosTxActionAck.EosAuthoriz"
  "ation\0329\n\020EosActionUnknown\022\021\n\tdata_size\030\001"
  " \001(\r\022\022\n\ndata_chunk\030\002 \001(\014\"L\n\013EosSignedTx\022"
  "\023\n\013signature_v\030\001 \001(\r\022\023\n\013signature_r\030\002 \001("
  "\014\022\023\n\013signature_s\030\003 \001(\014B7\n#com.satoshilab"
  "s.trezor.lib.protobufB\020TrezorMessageEos"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2deos_2eproto = {
  false, InitDefaults_messages_2deos_2eproto, 
  descriptor_table_protodef_messages_2deos_2eproto,
  "messages-eos.proto", &assign_descriptors_table_messages_2deos_2eproto, 4119,
};

void AddDescriptors_messages_2deos_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2deos_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2deos_2eproto = []() { AddDescriptors_messages_2deos_2eproto(); return true; }();
namespace hw {
namespace trezor {
namespace messages {
namespace eos {

// ===================================================================

void EosGetPublicKey::InitAsDefaultInstance() {
}
class EosGetPublicKey::HasBitSetters {
 public:
  static void set_has_show_display(EosGetPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosGetPublicKey::kAddressNFieldNumber;
const int EosGetPublicKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosGetPublicKey::EosGetPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosGetPublicKey)
}
EosGetPublicKey::EosGetPublicKey(const EosGetPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosGetPublicKey)
}

void EosGetPublicKey::SharedCtor() {
  show_display_ = false;
}

EosGetPublicKey::~EosGetPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosGetPublicKey)
  SharedDtor();
}

void EosGetPublicKey::SharedDtor() {
}

void EosGetPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosGetPublicKey& EosGetPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosGetPublicKey_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosGetPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosGetPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosGetPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosGetPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosGetPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosGetPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosGetPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosGetPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosGetPublicKey)
}

::google::protobuf::uint8* EosGetPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosGetPublicKey)
  return target;
}

size_t EosGetPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosGetPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosGetPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const EosGetPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<EosGetPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosGetPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosGetPublicKey)
    MergeFrom(*source);
  }
}

void EosGetPublicKey::MergeFrom(const EosGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void EosGetPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosGetPublicKey::CopyFrom(const EosGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosGetPublicKey::IsInitialized() const {
  return true;
}

void EosGetPublicKey::Swap(EosGetPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosGetPublicKey::InternalSwap(EosGetPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata EosGetPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosPublicKey::InitAsDefaultInstance() {
}
class EosPublicKey::HasBitSetters {
 public:
  static void set_has_wif_public_key(EosPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_raw_public_key(EosPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosPublicKey::kWifPublicKeyFieldNumber;
const int EosPublicKey::kRawPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosPublicKey::EosPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosPublicKey)
}
EosPublicKey::EosPublicKey(const EosPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wif_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wif_public_key()) {
    wif_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wif_public_key_);
  }
  raw_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_raw_public_key()) {
    raw_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosPublicKey)
}

void EosPublicKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosPublicKey_messages_2deos_2eproto.base);
  wif_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EosPublicKey::~EosPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosPublicKey)
  SharedDtor();
}

void EosPublicKey::SharedDtor() {
  wif_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosPublicKey& EosPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosPublicKey_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      wif_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      raw_public_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string wif_public_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.eos.EosPublicKey.wif_public_key");
        object = msg->mutable_wif_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes raw_public_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_raw_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wif_public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wif_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wif_public_key().data(), static_cast<int>(this->wif_public_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.eos.EosPublicKey.wif_public_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes raw_public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wif_public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wif_public_key().data(), static_cast<int>(this->wif_public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.eos.EosPublicKey.wif_public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wif_public_key(), output);
  }

  // optional bytes raw_public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->raw_public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosPublicKey)
}

::google::protobuf::uint8* EosPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string wif_public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wif_public_key().data(), static_cast<int>(this->wif_public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.eos.EosPublicKey.wif_public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wif_public_key(), target);
  }

  // optional bytes raw_public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->raw_public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosPublicKey)
  return target;
}

size_t EosPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string wif_public_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wif_public_key());
    }

    // optional bytes raw_public_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_public_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const EosPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<EosPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosPublicKey)
    MergeFrom(*source);
  }
}

void EosPublicKey::MergeFrom(const EosPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      wif_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wif_public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      raw_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_public_key_);
    }
  }
}

void EosPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosPublicKey::CopyFrom(const EosPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosPublicKey::IsInitialized() const {
  return true;
}

void EosPublicKey::Swap(EosPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosPublicKey::InternalSwap(EosPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wif_public_key_.Swap(&other->wif_public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_public_key_.Swap(&other->raw_public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata EosPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosSignTx_EosTxHeader::InitAsDefaultInstance() {
}
class EosSignTx_EosTxHeader::HasBitSetters {
 public:
  static void set_has_expiration(EosSignTx_EosTxHeader* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ref_block_num(EosSignTx_EosTxHeader* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ref_block_prefix(EosSignTx_EosTxHeader* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_net_usage_words(EosSignTx_EosTxHeader* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_max_cpu_usage_ms(EosSignTx_EosTxHeader* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_delay_sec(EosSignTx_EosTxHeader* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosSignTx_EosTxHeader::kExpirationFieldNumber;
const int EosSignTx_EosTxHeader::kRefBlockNumFieldNumber;
const int EosSignTx_EosTxHeader::kRefBlockPrefixFieldNumber;
const int EosSignTx_EosTxHeader::kMaxNetUsageWordsFieldNumber;
const int EosSignTx_EosTxHeader::kMaxCpuUsageMsFieldNumber;
const int EosSignTx_EosTxHeader::kDelaySecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosSignTx_EosTxHeader::EosSignTx_EosTxHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
}
EosSignTx_EosTxHeader::EosSignTx_EosTxHeader(const EosSignTx_EosTxHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&expiration_, &from.expiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_sec_) -
    reinterpret_cast<char*>(&expiration_)) + sizeof(delay_sec_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
}

void EosSignTx_EosTxHeader::SharedCtor() {
  ::memset(&expiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_sec_) -
      reinterpret_cast<char*>(&expiration_)) + sizeof(delay_sec_));
}

EosSignTx_EosTxHeader::~EosSignTx_EosTxHeader() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  SharedDtor();
}

void EosSignTx_EosTxHeader::SharedDtor() {
}

void EosSignTx_EosTxHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosSignTx_EosTxHeader& EosSignTx_EosTxHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosSignTx_EosTxHeader_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosSignTx_EosTxHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&expiration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_sec_) -
        reinterpret_cast<char*>(&expiration_)) + sizeof(delay_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosSignTx_EosTxHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosSignTx_EosTxHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 expiration = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_expiration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 ref_block_num = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ref_block_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 ref_block_prefix = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ref_block_prefix(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 max_net_usage_words = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_net_usage_words(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 max_cpu_usage_ms = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_max_cpu_usage_ms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 delay_sec = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_delay_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosSignTx_EosTxHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 expiration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_expiration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ref_block_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ref_block_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ref_block_prefix = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_ref_block_prefix(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_block_prefix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 max_net_usage_words = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_net_usage_words(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_net_usage_words_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 max_cpu_usage_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_max_cpu_usage_ms(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cpu_usage_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 delay_sec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_delay_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosSignTx_EosTxHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 expiration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expiration(), output);
  }

  // required uint32 ref_block_num = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ref_block_num(), output);
  }

  // required uint32 ref_block_prefix = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ref_block_prefix(), output);
  }

  // required uint32 max_net_usage_words = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_net_usage_words(), output);
  }

  // required uint32 max_cpu_usage_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_cpu_usage_ms(), output);
  }

  // required uint32 delay_sec = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
}

::google::protobuf::uint8* EosSignTx_EosTxHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 expiration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expiration(), target);
  }

  // required uint32 ref_block_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ref_block_num(), target);
  }

  // required uint32 ref_block_prefix = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ref_block_prefix(), target);
  }

  // required uint32 max_net_usage_words = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_net_usage_words(), target);
  }

  // required uint32 max_cpu_usage_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_cpu_usage_ms(), target);
  }

  // required uint32 delay_sec = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  return target;
}

size_t EosSignTx_EosTxHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  size_t total_size = 0;

  if (has_expiration()) {
    // required uint32 expiration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiration());
  }

  if (has_ref_block_num()) {
    // required uint32 ref_block_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ref_block_num());
  }

  if (has_ref_block_prefix()) {
    // required uint32 ref_block_prefix = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ref_block_prefix());
  }

  if (has_max_net_usage_words()) {
    // required uint32 max_net_usage_words = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_net_usage_words());
  }

  if (has_max_cpu_usage_ms()) {
    // required uint32 max_cpu_usage_ms = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_cpu_usage_ms());
  }

  if (has_delay_sec()) {
    // required uint32 delay_sec = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delay_sec());
  }

  return total_size;
}
size_t EosSignTx_EosTxHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 expiration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->expiration());

    // required uint32 ref_block_num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ref_block_num());

    // required uint32 ref_block_prefix = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ref_block_prefix());

    // required uint32 max_net_usage_words = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_net_usage_words());

    // required uint32 max_cpu_usage_ms = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_cpu_usage_ms());

    // required uint32 delay_sec = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delay_sec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosSignTx_EosTxHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const EosSignTx_EosTxHeader* source =
      ::google::protobuf::DynamicCastToGenerated<EosSignTx_EosTxHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
    MergeFrom(*source);
  }
}

void EosSignTx_EosTxHeader::MergeFrom(const EosSignTx_EosTxHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      expiration_ = from.expiration_;
    }
    if (cached_has_bits & 0x00000002u) {
      ref_block_num_ = from.ref_block_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      ref_block_prefix_ = from.ref_block_prefix_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_net_usage_words_ = from.max_net_usage_words_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_cpu_usage_ms_ = from.max_cpu_usage_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_sec_ = from.delay_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosSignTx_EosTxHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosSignTx_EosTxHeader::CopyFrom(const EosSignTx_EosTxHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosSignTx.EosTxHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosSignTx_EosTxHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void EosSignTx_EosTxHeader::Swap(EosSignTx_EosTxHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosSignTx_EosTxHeader::InternalSwap(EosSignTx_EosTxHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(expiration_, other->expiration_);
  swap(ref_block_num_, other->ref_block_num_);
  swap(ref_block_prefix_, other->ref_block_prefix_);
  swap(max_net_usage_words_, other->max_net_usage_words_);
  swap(max_cpu_usage_ms_, other->max_cpu_usage_ms_);
  swap(delay_sec_, other->delay_sec_);
}

::google::protobuf::Metadata EosSignTx_EosTxHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosSignTx::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosSignTx_default_instance_._instance.get_mutable()->header_ = const_cast< ::hw::trezor::messages::eos::EosSignTx_EosTxHeader*>(
      ::hw::trezor::messages::eos::EosSignTx_EosTxHeader::internal_default_instance());
}
class EosSignTx::HasBitSetters {
 public:
  static void set_has_chain_id(EosSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::eos::EosSignTx_EosTxHeader& header(const EosSignTx* msg);
  static void set_has_header(EosSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_num_actions(EosSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::hw::trezor::messages::eos::EosSignTx_EosTxHeader&
EosSignTx::HasBitSetters::header(const EosSignTx* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosSignTx::kAddressNFieldNumber;
const int EosSignTx::kChainIdFieldNumber;
const int EosSignTx::kHeaderFieldNumber;
const int EosSignTx::kNumActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosSignTx::EosSignTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosSignTx)
}
EosSignTx::EosSignTx(const EosSignTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chain_id()) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.has_header()) {
    header_ = new ::hw::trezor::messages::eos::EosSignTx_EosTxHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  num_actions_ = from.num_actions_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosSignTx)
}

void EosSignTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosSignTx_messages_2deos_2eproto.base);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_actions_) -
      reinterpret_cast<char*>(&header_)) + sizeof(num_actions_));
}

EosSignTx::~EosSignTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosSignTx)
  SharedDtor();
}

void EosSignTx::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void EosSignTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosSignTx& EosSignTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosSignTx_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosSignTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chain_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  num_actions_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosSignTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosSignTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bytes chain_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_chain_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .hw.trezor.messages.eos.EosSignTx.EosTxHeader header = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosSignTx_EosTxHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 num_actions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_num_actions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosSignTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosSignTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chain_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chain_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosSignTx.EosTxHeader header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_actions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_num_actions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_actions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosSignTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosSignTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosSignTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes chain_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chain_id(), output);
  }

  // optional .hw.trezor.messages.eos.EosSignTx.EosTxHeader header = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::header(this), output);
  }

  // optional uint32 num_actions = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_actions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosSignTx)
}

::google::protobuf::uint8* EosSignTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bytes chain_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chain_id(), target);
  }

  // optional .hw.trezor.messages.eos.EosSignTx.EosTxHeader header = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::header(this), target);
  }

  // optional uint32 num_actions = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_actions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosSignTx)
  return target;
}

size_t EosSignTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosSignTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes chain_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chain_id());
    }

    // optional .hw.trezor.messages.eos.EosSignTx.EosTxHeader header = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 num_actions = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_actions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosSignTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  const EosSignTx* source =
      ::google::protobuf::DynamicCastToGenerated<EosSignTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosSignTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosSignTx)
    MergeFrom(*source);
  }
}

void EosSignTx::MergeFrom(const EosSignTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::hw::trezor::messages::eos::EosSignTx_EosTxHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      num_actions_ = from.num_actions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosSignTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosSignTx::CopyFrom(const EosSignTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosSignTx::IsInitialized() const {
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void EosSignTx::Swap(EosSignTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosSignTx::InternalSwap(EosSignTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  chain_id_.Swap(&other->chain_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(num_actions_, other->num_actions_);
}

::google::protobuf::Metadata EosSignTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionRequest::InitAsDefaultInstance() {
}
class EosTxActionRequest::HasBitSetters {
 public:
  static void set_has_data_size(EosTxActionRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionRequest::kDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionRequest::EosTxActionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionRequest)
}
EosTxActionRequest::EosTxActionRequest(const EosTxActionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_size_ = from.data_size_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionRequest)
}

void EosTxActionRequest::SharedCtor() {
  data_size_ = 0u;
}

EosTxActionRequest::~EosTxActionRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionRequest)
  SharedDtor();
}

void EosTxActionRequest::SharedDtor() {
}

void EosTxActionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionRequest& EosTxActionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionRequest_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 data_size = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_data_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 data_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_data_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 data_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionRequest)
}

::google::protobuf::uint8* EosTxActionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 data_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionRequest)
  return target;
}

size_t EosTxActionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 data_size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionRequest)
    MergeFrom(*source);
  }
}

void EosTxActionRequest::MergeFrom(const EosTxActionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_size()) {
    set_data_size(from.data_size());
  }
}

void EosTxActionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionRequest::CopyFrom(const EosTxActionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionRequest::IsInitialized() const {
  return true;
}

void EosTxActionRequest::Swap(EosTxActionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionRequest::InternalSwap(EosTxActionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_size_, other->data_size_);
}

::google::protobuf::Metadata EosTxActionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosAsset::InitAsDefaultInstance() {
}
class EosTxActionAck_EosAsset::HasBitSetters {
 public:
  static void set_has_amount(EosTxActionAck_EosAsset* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_symbol(EosTxActionAck_EosAsset* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosAsset::kAmountFieldNumber;
const int EosTxActionAck_EosAsset::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosAsset::EosTxActionAck_EosAsset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
}
EosTxActionAck_EosAsset::EosTxActionAck_EosAsset(const EosTxActionAck_EosAsset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&symbol_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(symbol_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
}

void EosTxActionAck_EosAsset::SharedCtor() {
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&symbol_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(symbol_));
}

EosTxActionAck_EosAsset::~EosTxActionAck_EosAsset() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  SharedDtor();
}

void EosTxActionAck_EosAsset::SharedDtor() {
}

void EosTxActionAck_EosAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosAsset& EosTxActionAck_EosAsset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosAsset_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&symbol_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(symbol_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosAsset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosAsset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional sint64 amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 symbol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_symbol(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_symbol(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &symbol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 amount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->amount(), output);
  }

  // optional uint64 symbol = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->symbol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
}

::google::protobuf::uint8* EosTxActionAck_EosAsset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->amount(), target);
  }

  // optional uint64 symbol = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->symbol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  return target;
}

size_t EosTxActionAck_EosAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional sint64 amount = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->amount());
    }

    // optional uint64 symbol = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->symbol());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosAsset* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosAsset::MergeFrom(const EosTxActionAck_EosAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      symbol_ = from.symbol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosAsset::CopyFrom(const EosTxActionAck_EosAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosAsset::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosAsset::Swap(EosTxActionAck_EosAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosAsset::InternalSwap(EosTxActionAck_EosAsset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(amount_, other->amount_);
  swap(symbol_, other->symbol_);
}

::google::protobuf::Metadata EosTxActionAck_EosAsset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosPermissionLevel::InitAsDefaultInstance() {
}
class EosTxActionAck_EosPermissionLevel::HasBitSetters {
 public:
  static void set_has_actor(EosTxActionAck_EosPermissionLevel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_permission(EosTxActionAck_EosPermissionLevel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosPermissionLevel::kActorFieldNumber;
const int EosTxActionAck_EosPermissionLevel::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosPermissionLevel::EosTxActionAck_EosPermissionLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
}
EosTxActionAck_EosPermissionLevel::EosTxActionAck_EosPermissionLevel(const EosTxActionAck_EosPermissionLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&actor_, &from.actor_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&actor_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
}

void EosTxActionAck_EosPermissionLevel::SharedCtor() {
  ::memset(&actor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&actor_)) + sizeof(permission_));
}

EosTxActionAck_EosPermissionLevel::~EosTxActionAck_EosPermissionLevel() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  SharedDtor();
}

void EosTxActionAck_EosPermissionLevel::SharedDtor() {
}

void EosTxActionAck_EosPermissionLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosPermissionLevel& EosTxActionAck_EosPermissionLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosPermissionLevel_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosPermissionLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&actor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_) -
        reinterpret_cast<char*>(&actor_)) + sizeof(permission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosPermissionLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosPermissionLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 actor = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_actor(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 permission = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosPermissionLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_actor(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosPermissionLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 actor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actor(), output);
  }

  // optional uint64 permission = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->permission(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
}

::google::protobuf::uint8* EosTxActionAck_EosPermissionLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 actor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actor(), target);
  }

  // optional uint64 permission = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->permission(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  return target;
}

size_t EosTxActionAck_EosPermissionLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 actor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->actor());
    }

    // optional uint64 permission = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permission());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosPermissionLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosPermissionLevel* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosPermissionLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosPermissionLevel::MergeFrom(const EosTxActionAck_EosPermissionLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      actor_ = from.actor_;
    }
    if (cached_has_bits & 0x00000002u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosPermissionLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosPermissionLevel::CopyFrom(const EosTxActionAck_EosPermissionLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosPermissionLevel::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosPermissionLevel::Swap(EosTxActionAck_EosPermissionLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosPermissionLevel::InternalSwap(EosTxActionAck_EosPermissionLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(actor_, other->actor_);
  swap(permission_, other->permission_);
}

::google::protobuf::Metadata EosTxActionAck_EosPermissionLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosAuthorizationKey::InitAsDefaultInstance() {
}
class EosTxActionAck_EosAuthorizationKey::HasBitSetters {
 public:
  static void set_has_type(EosTxActionAck_EosAuthorizationKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_key(EosTxActionAck_EosAuthorizationKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_weight(EosTxActionAck_EosAuthorizationKey* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosAuthorizationKey::kTypeFieldNumber;
const int EosTxActionAck_EosAuthorizationKey::kKeyFieldNumber;
const int EosTxActionAck_EosAuthorizationKey::kAddressNFieldNumber;
const int EosTxActionAck_EosAuthorizationKey::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosAuthorizationKey::EosTxActionAck_EosAuthorizationKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
}
EosTxActionAck_EosAuthorizationKey::EosTxActionAck_EosAuthorizationKey(const EosTxActionAck_EosAuthorizationKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&type_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
}

void EosTxActionAck_EosAuthorizationKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&type_)) + sizeof(weight_));
}

EosTxActionAck_EosAuthorizationKey::~EosTxActionAck_EosAuthorizationKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  SharedDtor();
}

void EosTxActionAck_EosAuthorizationKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosTxActionAck_EosAuthorizationKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosAuthorizationKey& EosTxActionAck_EosAuthorizationKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosAuthorizationKey_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosAuthorizationKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&type_)) + sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosAuthorizationKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosAuthorizationKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 address_n = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 weight = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_weight(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosAuthorizationKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 address_n = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosAuthorizationKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // repeated uint32 address_n = 3;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->address_n(i), output);
  }

  // optional uint32 weight = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
}

::google::protobuf::uint8* EosTxActionAck_EosAuthorizationKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // repeated uint32 address_n = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->address_n_, target);

  // optional uint32 weight = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  return target;
}

size_t EosTxActionAck_EosAuthorizationKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 weight = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosAuthorizationKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosAuthorizationKey* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosAuthorizationKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosAuthorizationKey::MergeFrom(const EosTxActionAck_EosAuthorizationKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosAuthorizationKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosAuthorizationKey::CopyFrom(const EosTxActionAck_EosAuthorizationKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosAuthorizationKey::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosAuthorizationKey::Swap(EosTxActionAck_EosAuthorizationKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosAuthorizationKey::InternalSwap(EosTxActionAck_EosAuthorizationKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(weight_, other->weight_);
}

::google::protobuf::Metadata EosTxActionAck_EosAuthorizationKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosAuthorizationAccount::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_EosAuthorizationAccount_default_instance_._instance.get_mutable()->account_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel::internal_default_instance());
}
class EosTxActionAck_EosAuthorizationAccount::HasBitSetters {
 public:
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel& account(const EosTxActionAck_EosAuthorizationAccount* msg);
  static void set_has_account(EosTxActionAck_EosAuthorizationAccount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_weight(EosTxActionAck_EosAuthorizationAccount* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel&
EosTxActionAck_EosAuthorizationAccount::HasBitSetters::account(const EosTxActionAck_EosAuthorizationAccount* msg) {
  return *msg->account_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosAuthorizationAccount::kAccountFieldNumber;
const int EosTxActionAck_EosAuthorizationAccount::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosAuthorizationAccount::EosTxActionAck_EosAuthorizationAccount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
}
EosTxActionAck_EosAuthorizationAccount::EosTxActionAck_EosAuthorizationAccount(const EosTxActionAck_EosAuthorizationAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_account()) {
    account_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel(*from.account_);
  } else {
    account_ = nullptr;
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
}

void EosTxActionAck_EosAuthorizationAccount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&account_)) + sizeof(weight_));
}

EosTxActionAck_EosAuthorizationAccount::~EosTxActionAck_EosAuthorizationAccount() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  SharedDtor();
}

void EosTxActionAck_EosAuthorizationAccount::SharedDtor() {
  if (this != internal_default_instance()) delete account_;
}

void EosTxActionAck_EosAuthorizationAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosAuthorizationAccount& EosTxActionAck_EosAuthorizationAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosAuthorizationAccount_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosAuthorizationAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(account_ != nullptr);
    account_->Clear();
  }
  weight_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosAuthorizationAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosAuthorizationAccount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel::_InternalParse;
        object = msg->mutable_account();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 weight = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_weight(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosAuthorizationAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosAuthorizationAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // optional uint32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
}

::google::protobuf::uint8* EosTxActionAck_EosAuthorizationAccount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // optional uint32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  return target;
}

size_t EosTxActionAck_EosAuthorizationAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *account_);
    }

    // optional uint32 weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosAuthorizationAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosAuthorizationAccount* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosAuthorizationAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosAuthorizationAccount::MergeFrom(const EosTxActionAck_EosAuthorizationAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_account()->::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel::MergeFrom(from.account());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosAuthorizationAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosAuthorizationAccount::CopyFrom(const EosTxActionAck_EosAuthorizationAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosAuthorizationAccount::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosAuthorizationAccount::Swap(EosTxActionAck_EosAuthorizationAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosAuthorizationAccount::InternalSwap(EosTxActionAck_EosAuthorizationAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
  swap(weight_, other->weight_);
}

::google::protobuf::Metadata EosTxActionAck_EosAuthorizationAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosAuthorizationWait::InitAsDefaultInstance() {
}
class EosTxActionAck_EosAuthorizationWait::HasBitSetters {
 public:
  static void set_has_wait_sec(EosTxActionAck_EosAuthorizationWait* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_weight(EosTxActionAck_EosAuthorizationWait* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosAuthorizationWait::kWaitSecFieldNumber;
const int EosTxActionAck_EosAuthorizationWait::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosAuthorizationWait::EosTxActionAck_EosAuthorizationWait()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
}
EosTxActionAck_EosAuthorizationWait::EosTxActionAck_EosAuthorizationWait(const EosTxActionAck_EosAuthorizationWait& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wait_sec_, &from.wait_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&wait_sec_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
}

void EosTxActionAck_EosAuthorizationWait::SharedCtor() {
  ::memset(&wait_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&wait_sec_)) + sizeof(weight_));
}

EosTxActionAck_EosAuthorizationWait::~EosTxActionAck_EosAuthorizationWait() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  SharedDtor();
}

void EosTxActionAck_EosAuthorizationWait::SharedDtor() {
}

void EosTxActionAck_EosAuthorizationWait::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosAuthorizationWait& EosTxActionAck_EosAuthorizationWait::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosAuthorizationWait_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosAuthorizationWait::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&wait_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&wait_sec_)) + sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosAuthorizationWait::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosAuthorizationWait*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 wait_sec = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_wait_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weight = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_weight(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosAuthorizationWait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wait_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_wait_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_weight(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosAuthorizationWait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wait_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wait_sec(), output);
  }

  // optional uint32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
}

::google::protobuf::uint8* EosTxActionAck_EosAuthorizationWait::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wait_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wait_sec(), target);
  }

  // optional uint32 weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  return target;
}

size_t EosTxActionAck_EosAuthorizationWait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 wait_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wait_sec());
    }

    // optional uint32 weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosAuthorizationWait::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosAuthorizationWait* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosAuthorizationWait>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosAuthorizationWait::MergeFrom(const EosTxActionAck_EosAuthorizationWait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      wait_sec_ = from.wait_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosAuthorizationWait::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosAuthorizationWait::CopyFrom(const EosTxActionAck_EosAuthorizationWait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosAuthorizationWait::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosAuthorizationWait::Swap(EosTxActionAck_EosAuthorizationWait* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosAuthorizationWait::InternalSwap(EosTxActionAck_EosAuthorizationWait* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wait_sec_, other->wait_sec_);
  swap(weight_, other->weight_);
}

::google::protobuf::Metadata EosTxActionAck_EosAuthorizationWait::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosAuthorization::InitAsDefaultInstance() {
}
class EosTxActionAck_EosAuthorization::HasBitSetters {
 public:
  static void set_has_threshold(EosTxActionAck_EosAuthorization* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosAuthorization::kThresholdFieldNumber;
const int EosTxActionAck_EosAuthorization::kKeysFieldNumber;
const int EosTxActionAck_EosAuthorization::kAccountsFieldNumber;
const int EosTxActionAck_EosAuthorization::kWaitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosAuthorization::EosTxActionAck_EosAuthorization()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
}
EosTxActionAck_EosAuthorization::EosTxActionAck_EosAuthorization(const EosTxActionAck_EosAuthorization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keys_(from.keys_),
      accounts_(from.accounts_),
      waits_(from.waits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
}

void EosTxActionAck_EosAuthorization::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosAuthorization_messages_2deos_2eproto.base);
  threshold_ = 0u;
}

EosTxActionAck_EosAuthorization::~EosTxActionAck_EosAuthorization() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  SharedDtor();
}

void EosTxActionAck_EosAuthorization::SharedDtor() {
}

void EosTxActionAck_EosAuthorization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosAuthorization& EosTxActionAck_EosAuthorization::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosAuthorization_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosAuthorization::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  accounts_.Clear();
  waits_.Clear();
  threshold_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosAuthorization::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosAuthorization*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 threshold = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_threshold(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey keys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey::_InternalParse;
          object = msg->add_keys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount accounts = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount::_InternalParse;
          object = msg->add_accounts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait waits = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait::_InternalParse;
          object = msg->add_waits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosAuthorization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 threshold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_threshold(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount accounts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait waits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_waits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosAuthorization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->threshold(), output);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->keys(static_cast<int>(i)),
      output);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount accounts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->accounts(static_cast<int>(i)),
      output);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait waits = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->waits(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
}

::google::protobuf::uint8* EosTxActionAck_EosAuthorization::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->threshold(), target);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey keys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->keys(static_cast<int>(i)), target);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount accounts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->accounts(static_cast<int>(i)), target);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait waits = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->waits(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  return target;
}

size_t EosTxActionAck_EosAuthorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationKey keys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationAccount accounts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accounts(static_cast<int>(i)));
    }
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosAuthorizationWait waits = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->waits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->waits(static_cast<int>(i)));
    }
  }

  // optional uint32 threshold = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->threshold());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosAuthorization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosAuthorization* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosAuthorization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosAuthorization::MergeFrom(const EosTxActionAck_EosAuthorization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  accounts_.MergeFrom(from.accounts_);
  waits_.MergeFrom(from.waits_);
  if (from.has_threshold()) {
    set_threshold(from.threshold());
  }
}

void EosTxActionAck_EosAuthorization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosAuthorization::CopyFrom(const EosTxActionAck_EosAuthorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosAuthorization::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosAuthorization::Swap(EosTxActionAck_EosAuthorization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosAuthorization::InternalSwap(EosTxActionAck_EosAuthorization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  CastToBase(&accounts_)->InternalSwap(CastToBase(&other->accounts_));
  CastToBase(&waits_)->InternalSwap(CastToBase(&other->waits_));
  swap(threshold_, other->threshold_);
}

::google::protobuf::Metadata EosTxActionAck_EosAuthorization::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionCommon::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionCommon::HasBitSetters {
 public:
  static void set_has_account(EosTxActionAck_EosActionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_name(EosTxActionAck_EosActionCommon* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionCommon::kAccountFieldNumber;
const int EosTxActionAck_EosActionCommon::kNameFieldNumber;
const int EosTxActionAck_EosActionCommon::kAuthorizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionCommon::EosTxActionAck_EosActionCommon()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
}
EosTxActionAck_EosActionCommon::EosTxActionAck_EosActionCommon(const EosTxActionAck_EosActionCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      authorization_(from.authorization_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_) -
    reinterpret_cast<char*>(&account_)) + sizeof(name_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
}

void EosTxActionAck_EosActionCommon::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionCommon_messages_2deos_2eproto.base);
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&account_)) + sizeof(name_));
}

EosTxActionAck_EosActionCommon::~EosTxActionAck_EosActionCommon() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  SharedDtor();
}

void EosTxActionAck_EosActionCommon::SharedDtor() {
}

void EosTxActionAck_EosActionCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionCommon& EosTxActionAck_EosActionCommon::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionCommon_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authorization_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_) -
        reinterpret_cast<char*>(&account_)) + sizeof(name_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionCommon::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionCommon*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_name(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel authorization = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel::_InternalParse;
          object = msg->add_authorization();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_name(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel authorization = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_authorization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // optional uint64 name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->name(), output);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel authorization = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authorization_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->authorization(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
}

::google::protobuf::uint8* EosTxActionAck_EosActionCommon::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // optional uint64 name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->name(), target);
  }

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel authorization = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authorization_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->authorization(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  return target;
}

size_t EosTxActionAck_EosActionCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.eos.EosTxActionAck.EosPermissionLevel authorization = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->authorization_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->authorization(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

    // optional uint64 name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionCommon* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionCommon::MergeFrom(const EosTxActionAck_EosActionCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authorization_.MergeFrom(from.authorization_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionCommon::CopyFrom(const EosTxActionAck_EosActionCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionCommon::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionCommon::Swap(EosTxActionAck_EosActionCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionCommon::InternalSwap(EosTxActionAck_EosActionCommon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&authorization_)->InternalSwap(CastToBase(&other->authorization_));
  swap(account_, other->account_);
  swap(name_, other->name_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionCommon::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionTransfer::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionTransfer_default_instance_._instance.get_mutable()->quantity_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::internal_default_instance());
}
class EosTxActionAck_EosActionTransfer::HasBitSetters {
 public:
  static void set_has_sender(EosTxActionAck_EosActionTransfer* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_receiver(EosTxActionAck_EosActionTransfer* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset& quantity(const EosTxActionAck_EosActionTransfer* msg);
  static void set_has_quantity(EosTxActionAck_EosActionTransfer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_memo(EosTxActionAck_EosActionTransfer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset&
EosTxActionAck_EosActionTransfer::HasBitSetters::quantity(const EosTxActionAck_EosActionTransfer* msg) {
  return *msg->quantity_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionTransfer::kSenderFieldNumber;
const int EosTxActionAck_EosActionTransfer::kReceiverFieldNumber;
const int EosTxActionAck_EosActionTransfer::kQuantityFieldNumber;
const int EosTxActionAck_EosActionTransfer::kMemoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionTransfer::EosTxActionAck_EosActionTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
}
EosTxActionAck_EosActionTransfer::EosTxActionAck_EosActionTransfer(const EosTxActionAck_EosActionTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_memo()) {
    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  if (from.has_quantity()) {
    quantity_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAsset(*from.quantity_);
  } else {
    quantity_ = nullptr;
  }
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(receiver_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
}

void EosTxActionAck_EosActionTransfer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionTransfer_messages_2deos_2eproto.base);
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(receiver_));
}

EosTxActionAck_EosActionTransfer::~EosTxActionAck_EosActionTransfer() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  SharedDtor();
}

void EosTxActionAck_EosActionTransfer::SharedDtor() {
  memo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quantity_;
}

void EosTxActionAck_EosActionTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionTransfer& EosTxActionAck_EosActionTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionTransfer_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quantity_ != nullptr);
      quantity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiver_) -
        reinterpret_cast<char*>(&sender_)) + sizeof(receiver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionTransfer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionTransfer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 sender = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sender(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_receiver(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::_InternalParse;
        object = msg->mutable_quantity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string memo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.memo");
        object = msg->mutable_memo();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_sender(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_receiver(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quantity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string memo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memo().data(), static_cast<int>(this->memo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.memo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sender(), output);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receiver(), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::quantity(this), output);
  }

  // optional string memo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->memo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
}

::google::protobuf::uint8* EosTxActionAck_EosActionTransfer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sender(), target);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receiver(), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::quantity(this), target);
  }

  // optional string memo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer.memo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->memo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  return target;
}

size_t EosTxActionAck_EosActionTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string memo = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quantity_);
    }

    // optional uint64 sender = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender());
    }

    // optional uint64 receiver = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiver());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionTransfer* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionTransfer::MergeFrom(const EosTxActionAck_EosActionTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quantity()->::hw::trezor::messages::eos::EosTxActionAck_EosAsset::MergeFrom(from.quantity());
    }
    if (cached_has_bits & 0x00000004u) {
      sender_ = from.sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      receiver_ = from.receiver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionTransfer::CopyFrom(const EosTxActionAck_EosActionTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionTransfer::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionTransfer::Swap(EosTxActionAck_EosActionTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionTransfer::InternalSwap(EosTxActionAck_EosActionTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  memo_.Swap(&other->memo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quantity_, other->quantity_);
  swap(sender_, other->sender_);
  swap(receiver_, other->receiver_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionTransfer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionDelegate::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionDelegate_default_instance_._instance.get_mutable()->net_quantity_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionDelegate_default_instance_._instance.get_mutable()->cpu_quantity_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::internal_default_instance());
}
class EosTxActionAck_EosActionDelegate::HasBitSetters {
 public:
  static void set_has_sender(EosTxActionAck_EosActionDelegate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_receiver(EosTxActionAck_EosActionDelegate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset& net_quantity(const EosTxActionAck_EosActionDelegate* msg);
  static void set_has_net_quantity(EosTxActionAck_EosActionDelegate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset& cpu_quantity(const EosTxActionAck_EosActionDelegate* msg);
  static void set_has_cpu_quantity(EosTxActionAck_EosActionDelegate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_transfer(EosTxActionAck_EosActionDelegate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset&
EosTxActionAck_EosActionDelegate::HasBitSetters::net_quantity(const EosTxActionAck_EosActionDelegate* msg) {
  return *msg->net_quantity_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset&
EosTxActionAck_EosActionDelegate::HasBitSetters::cpu_quantity(const EosTxActionAck_EosActionDelegate* msg) {
  return *msg->cpu_quantity_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionDelegate::kSenderFieldNumber;
const int EosTxActionAck_EosActionDelegate::kReceiverFieldNumber;
const int EosTxActionAck_EosActionDelegate::kNetQuantityFieldNumber;
const int EosTxActionAck_EosActionDelegate::kCpuQuantityFieldNumber;
const int EosTxActionAck_EosActionDelegate::kTransferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionDelegate::EosTxActionAck_EosActionDelegate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
}
EosTxActionAck_EosActionDelegate::EosTxActionAck_EosActionDelegate(const EosTxActionAck_EosActionDelegate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_net_quantity()) {
    net_quantity_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAsset(*from.net_quantity_);
  } else {
    net_quantity_ = nullptr;
  }
  if (from.has_cpu_quantity()) {
    cpu_quantity_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAsset(*from.cpu_quantity_);
  } else {
    cpu_quantity_ = nullptr;
  }
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(transfer_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
}

void EosTxActionAck_EosActionDelegate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionDelegate_messages_2deos_2eproto.base);
  ::memset(&net_quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_) -
      reinterpret_cast<char*>(&net_quantity_)) + sizeof(transfer_));
}

EosTxActionAck_EosActionDelegate::~EosTxActionAck_EosActionDelegate() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  SharedDtor();
}

void EosTxActionAck_EosActionDelegate::SharedDtor() {
  if (this != internal_default_instance()) delete net_quantity_;
  if (this != internal_default_instance()) delete cpu_quantity_;
}

void EosTxActionAck_EosActionDelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionDelegate& EosTxActionAck_EosActionDelegate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionDelegate_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionDelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(net_quantity_ != nullptr);
      net_quantity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cpu_quantity_ != nullptr);
      cpu_quantity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transfer_) -
        reinterpret_cast<char*>(&sender_)) + sizeof(transfer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionDelegate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionDelegate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 sender = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sender(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_receiver(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::_InternalParse;
        object = msg->mutable_net_quantity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::_InternalParse;
        object = msg->mutable_cpu_quantity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool transfer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_transfer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionDelegate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_sender(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_receiver(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_net_quantity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu_quantity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transfer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_transfer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transfer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionDelegate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sender(), output);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receiver(), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::net_quantity(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::cpu_quantity(this), output);
  }

  // optional bool transfer = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->transfer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
}

::google::protobuf::uint8* EosTxActionAck_EosActionDelegate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sender(), target);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receiver(), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::net_quantity(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::cpu_quantity(this), target);
  }

  // optional bool transfer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->transfer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  return target;
}

size_t EosTxActionAck_EosActionDelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *net_quantity_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cpu_quantity_);
    }

    // optional uint64 sender = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender());
    }

    // optional uint64 receiver = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiver());
    }

    // optional bool transfer = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionDelegate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionDelegate* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionDelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionDelegate::MergeFrom(const EosTxActionAck_EosActionDelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_net_quantity()->::hw::trezor::messages::eos::EosTxActionAck_EosAsset::MergeFrom(from.net_quantity());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cpu_quantity()->::hw::trezor::messages::eos::EosTxActionAck_EosAsset::MergeFrom(from.cpu_quantity());
    }
    if (cached_has_bits & 0x00000004u) {
      sender_ = from.sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      receiver_ = from.receiver_;
    }
    if (cached_has_bits & 0x00000010u) {
      transfer_ = from.transfer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionDelegate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionDelegate::CopyFrom(const EosTxActionAck_EosActionDelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionDelegate::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionDelegate::Swap(EosTxActionAck_EosActionDelegate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionDelegate::InternalSwap(EosTxActionAck_EosActionDelegate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(net_quantity_, other->net_quantity_);
  swap(cpu_quantity_, other->cpu_quantity_);
  swap(sender_, other->sender_);
  swap(receiver_, other->receiver_);
  swap(transfer_, other->transfer_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionDelegate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionUndelegate::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionUndelegate_default_instance_._instance.get_mutable()->net_quantity_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionUndelegate_default_instance_._instance.get_mutable()->cpu_quantity_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::internal_default_instance());
}
class EosTxActionAck_EosActionUndelegate::HasBitSetters {
 public:
  static void set_has_sender(EosTxActionAck_EosActionUndelegate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_receiver(EosTxActionAck_EosActionUndelegate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset& net_quantity(const EosTxActionAck_EosActionUndelegate* msg);
  static void set_has_net_quantity(EosTxActionAck_EosActionUndelegate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset& cpu_quantity(const EosTxActionAck_EosActionUndelegate* msg);
  static void set_has_cpu_quantity(EosTxActionAck_EosActionUndelegate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset&
EosTxActionAck_EosActionUndelegate::HasBitSetters::net_quantity(const EosTxActionAck_EosActionUndelegate* msg) {
  return *msg->net_quantity_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset&
EosTxActionAck_EosActionUndelegate::HasBitSetters::cpu_quantity(const EosTxActionAck_EosActionUndelegate* msg) {
  return *msg->cpu_quantity_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionUndelegate::kSenderFieldNumber;
const int EosTxActionAck_EosActionUndelegate::kReceiverFieldNumber;
const int EosTxActionAck_EosActionUndelegate::kNetQuantityFieldNumber;
const int EosTxActionAck_EosActionUndelegate::kCpuQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionUndelegate::EosTxActionAck_EosActionUndelegate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
}
EosTxActionAck_EosActionUndelegate::EosTxActionAck_EosActionUndelegate(const EosTxActionAck_EosActionUndelegate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_net_quantity()) {
    net_quantity_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAsset(*from.net_quantity_);
  } else {
    net_quantity_ = nullptr;
  }
  if (from.has_cpu_quantity()) {
    cpu_quantity_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAsset(*from.cpu_quantity_);
  } else {
    cpu_quantity_ = nullptr;
  }
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(receiver_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
}

void EosTxActionAck_EosActionUndelegate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionUndelegate_messages_2deos_2eproto.base);
  ::memset(&net_quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_) -
      reinterpret_cast<char*>(&net_quantity_)) + sizeof(receiver_));
}

EosTxActionAck_EosActionUndelegate::~EosTxActionAck_EosActionUndelegate() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  SharedDtor();
}

void EosTxActionAck_EosActionUndelegate::SharedDtor() {
  if (this != internal_default_instance()) delete net_quantity_;
  if (this != internal_default_instance()) delete cpu_quantity_;
}

void EosTxActionAck_EosActionUndelegate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionUndelegate& EosTxActionAck_EosActionUndelegate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionUndelegate_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionUndelegate::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(net_quantity_ != nullptr);
      net_quantity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cpu_quantity_ != nullptr);
      cpu_quantity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&sender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiver_) -
        reinterpret_cast<char*>(&sender_)) + sizeof(receiver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionUndelegate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionUndelegate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 sender = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sender(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_receiver(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::_InternalParse;
        object = msg->mutable_net_quantity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::_InternalParse;
        object = msg->mutable_cpu_quantity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionUndelegate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_sender(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_receiver(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_net_quantity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu_quantity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionUndelegate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sender(), output);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receiver(), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::net_quantity(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::cpu_quantity(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
}

::google::protobuf::uint8* EosTxActionAck_EosActionUndelegate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sender = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sender(), target);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receiver(), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::net_quantity(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::cpu_quantity(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  return target;
}

size_t EosTxActionAck_EosActionUndelegate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset net_quantity = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *net_quantity_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset cpu_quantity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cpu_quantity_);
    }

    // optional uint64 sender = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender());
    }

    // optional uint64 receiver = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiver());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionUndelegate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionUndelegate* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionUndelegate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionUndelegate::MergeFrom(const EosTxActionAck_EosActionUndelegate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_net_quantity()->::hw::trezor::messages::eos::EosTxActionAck_EosAsset::MergeFrom(from.net_quantity());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cpu_quantity()->::hw::trezor::messages::eos::EosTxActionAck_EosAsset::MergeFrom(from.cpu_quantity());
    }
    if (cached_has_bits & 0x00000004u) {
      sender_ = from.sender_;
    }
    if (cached_has_bits & 0x00000008u) {
      receiver_ = from.receiver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionUndelegate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionUndelegate::CopyFrom(const EosTxActionAck_EosActionUndelegate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionUndelegate::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionUndelegate::Swap(EosTxActionAck_EosActionUndelegate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionUndelegate::InternalSwap(EosTxActionAck_EosActionUndelegate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(net_quantity_, other->net_quantity_);
  swap(cpu_quantity_, other->cpu_quantity_);
  swap(sender_, other->sender_);
  swap(receiver_, other->receiver_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionUndelegate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionRefund::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionRefund::HasBitSetters {
 public:
  static void set_has_owner(EosTxActionAck_EosActionRefund* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionRefund::kOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionRefund::EosTxActionAck_EosActionRefund()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
}
EosTxActionAck_EosActionRefund::EosTxActionAck_EosActionRefund(const EosTxActionAck_EosActionRefund& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_ = from.owner_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
}

void EosTxActionAck_EosActionRefund::SharedCtor() {
  owner_ = PROTOBUF_ULONGLONG(0);
}

EosTxActionAck_EosActionRefund::~EosTxActionAck_EosActionRefund() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  SharedDtor();
}

void EosTxActionAck_EosActionRefund::SharedDtor() {
}

void EosTxActionAck_EosActionRefund::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionRefund& EosTxActionAck_EosActionRefund::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionRefund_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionRefund::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionRefund::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionRefund*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 owner = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_owner(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionRefund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_owner(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionRefund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 owner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
}

::google::protobuf::uint8* EosTxActionAck_EosActionRefund::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 owner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  return target;
}

size_t EosTxActionAck_EosActionRefund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 owner = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->owner());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionRefund::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionRefund* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionRefund>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionRefund::MergeFrom(const EosTxActionAck_EosActionRefund& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner()) {
    set_owner(from.owner());
  }
}

void EosTxActionAck_EosActionRefund::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionRefund::CopyFrom(const EosTxActionAck_EosActionRefund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionRefund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionRefund::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionRefund::Swap(EosTxActionAck_EosActionRefund* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionRefund::InternalSwap(EosTxActionAck_EosActionRefund* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_, other->owner_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionRefund::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionBuyRam::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionBuyRam_default_instance_._instance.get_mutable()->quantity_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::internal_default_instance());
}
class EosTxActionAck_EosActionBuyRam::HasBitSetters {
 public:
  static void set_has_payer(EosTxActionAck_EosActionBuyRam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_receiver(EosTxActionAck_EosActionBuyRam* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset& quantity(const EosTxActionAck_EosActionBuyRam* msg);
  static void set_has_quantity(EosTxActionAck_EosActionBuyRam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosAsset&
EosTxActionAck_EosActionBuyRam::HasBitSetters::quantity(const EosTxActionAck_EosActionBuyRam* msg) {
  return *msg->quantity_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionBuyRam::kPayerFieldNumber;
const int EosTxActionAck_EosActionBuyRam::kReceiverFieldNumber;
const int EosTxActionAck_EosActionBuyRam::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionBuyRam::EosTxActionAck_EosActionBuyRam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
}
EosTxActionAck_EosActionBuyRam::EosTxActionAck_EosActionBuyRam(const EosTxActionAck_EosActionBuyRam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quantity()) {
    quantity_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAsset(*from.quantity_);
  } else {
    quantity_ = nullptr;
  }
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(receiver_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
}

void EosTxActionAck_EosActionBuyRam::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionBuyRam_messages_2deos_2eproto.base);
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(receiver_));
}

EosTxActionAck_EosActionBuyRam::~EosTxActionAck_EosActionBuyRam() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  SharedDtor();
}

void EosTxActionAck_EosActionBuyRam::SharedDtor() {
  if (this != internal_default_instance()) delete quantity_;
}

void EosTxActionAck_EosActionBuyRam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionBuyRam& EosTxActionAck_EosActionBuyRam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionBuyRam_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionBuyRam::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(quantity_ != nullptr);
    quantity_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiver_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(receiver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionBuyRam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionBuyRam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 payer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_payer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_receiver(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAsset::_InternalParse;
        object = msg->mutable_quantity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionBuyRam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 payer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_receiver(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quantity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionBuyRam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 payer = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->payer(), output);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receiver(), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::quantity(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
}

::google::protobuf::uint8* EosTxActionAck_EosActionBuyRam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 payer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->payer(), target);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receiver(), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::quantity(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  return target;
}

size_t EosTxActionAck_EosActionBuyRam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAsset quantity = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *quantity_);
    }

    // optional uint64 payer = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 receiver = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiver());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionBuyRam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionBuyRam* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionBuyRam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionBuyRam::MergeFrom(const EosTxActionAck_EosActionBuyRam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quantity()->::hw::trezor::messages::eos::EosTxActionAck_EosAsset::MergeFrom(from.quantity());
    }
    if (cached_has_bits & 0x00000002u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000004u) {
      receiver_ = from.receiver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionBuyRam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionBuyRam::CopyFrom(const EosTxActionAck_EosActionBuyRam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionBuyRam::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionBuyRam::Swap(EosTxActionAck_EosActionBuyRam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionBuyRam::InternalSwap(EosTxActionAck_EosActionBuyRam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quantity_, other->quantity_);
  swap(payer_, other->payer_);
  swap(receiver_, other->receiver_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionBuyRam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionBuyRamBytes::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionBuyRamBytes::HasBitSetters {
 public:
  static void set_has_payer(EosTxActionAck_EosActionBuyRamBytes* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_receiver(EosTxActionAck_EosActionBuyRamBytes* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bytes(EosTxActionAck_EosActionBuyRamBytes* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionBuyRamBytes::kPayerFieldNumber;
const int EosTxActionAck_EosActionBuyRamBytes::kReceiverFieldNumber;
const int EosTxActionAck_EosActionBuyRamBytes::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionBuyRamBytes::EosTxActionAck_EosActionBuyRamBytes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
}
EosTxActionAck_EosActionBuyRamBytes::EosTxActionAck_EosActionBuyRamBytes(const EosTxActionAck_EosActionBuyRamBytes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(bytes_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
}

void EosTxActionAck_EosActionBuyRamBytes::SharedCtor() {
  ::memset(&payer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&payer_)) + sizeof(bytes_));
}

EosTxActionAck_EosActionBuyRamBytes::~EosTxActionAck_EosActionBuyRamBytes() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  SharedDtor();
}

void EosTxActionAck_EosActionBuyRamBytes::SharedDtor() {
}

void EosTxActionAck_EosActionBuyRamBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionBuyRamBytes& EosTxActionAck_EosActionBuyRamBytes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionBuyRamBytes_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionBuyRamBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionBuyRamBytes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionBuyRamBytes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 payer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_payer(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_receiver(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bytes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionBuyRamBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 payer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 receiver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_receiver(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_bytes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionBuyRamBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 payer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->payer(), output);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receiver(), output);
  }

  // optional uint32 bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
}

::google::protobuf::uint8* EosTxActionAck_EosActionBuyRamBytes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 payer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->payer(), target);
  }

  // optional uint64 receiver = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receiver(), target);
  }

  // optional uint32 bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  return target;
}

size_t EosTxActionAck_EosActionBuyRamBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 payer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 receiver = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiver());
    }

    // optional uint32 bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionBuyRamBytes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionBuyRamBytes* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionBuyRamBytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionBuyRamBytes::MergeFrom(const EosTxActionAck_EosActionBuyRamBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_ = from.receiver_;
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_ = from.bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionBuyRamBytes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionBuyRamBytes::CopyFrom(const EosTxActionAck_EosActionBuyRamBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionBuyRamBytes::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionBuyRamBytes::Swap(EosTxActionAck_EosActionBuyRamBytes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionBuyRamBytes::InternalSwap(EosTxActionAck_EosActionBuyRamBytes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(payer_, other->payer_);
  swap(receiver_, other->receiver_);
  swap(bytes_, other->bytes_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionBuyRamBytes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionSellRam::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionSellRam::HasBitSetters {
 public:
  static void set_has_account(EosTxActionAck_EosActionSellRam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_bytes(EosTxActionAck_EosActionSellRam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionSellRam::kAccountFieldNumber;
const int EosTxActionAck_EosActionSellRam::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionSellRam::EosTxActionAck_EosActionSellRam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
}
EosTxActionAck_EosActionSellRam::EosTxActionAck_EosActionSellRam(const EosTxActionAck_EosActionSellRam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&account_)) + sizeof(bytes_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
}

void EosTxActionAck_EosActionSellRam::SharedCtor() {
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&account_)) + sizeof(bytes_));
}

EosTxActionAck_EosActionSellRam::~EosTxActionAck_EosActionSellRam() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  SharedDtor();
}

void EosTxActionAck_EosActionSellRam::SharedDtor() {
}

void EosTxActionAck_EosActionSellRam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionSellRam& EosTxActionAck_EosActionSellRam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionSellRam_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionSellRam::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_) -
        reinterpret_cast<char*>(&account_)) + sizeof(bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionSellRam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionSellRam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 bytes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionSellRam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_bytes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionSellRam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // optional uint64 bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
}

::google::protobuf::uint8* EosTxActionAck_EosActionSellRam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // optional uint64 bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  return target;
}

size_t EosTxActionAck_EosActionSellRam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

    // optional uint64 bytes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionSellRam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionSellRam* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionSellRam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionSellRam::MergeFrom(const EosTxActionAck_EosActionSellRam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_ = from.bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionSellRam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionSellRam::CopyFrom(const EosTxActionAck_EosActionSellRam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionSellRam::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionSellRam::Swap(EosTxActionAck_EosActionSellRam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionSellRam::InternalSwap(EosTxActionAck_EosActionSellRam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
  swap(bytes_, other->bytes_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionSellRam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionVoteProducer::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionVoteProducer::HasBitSetters {
 public:
  static void set_has_voter(EosTxActionAck_EosActionVoteProducer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_proxy(EosTxActionAck_EosActionVoteProducer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionVoteProducer::kVoterFieldNumber;
const int EosTxActionAck_EosActionVoteProducer::kProxyFieldNumber;
const int EosTxActionAck_EosActionVoteProducer::kProducersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionVoteProducer::EosTxActionAck_EosActionVoteProducer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
}
EosTxActionAck_EosActionVoteProducer::EosTxActionAck_EosActionVoteProducer(const EosTxActionAck_EosActionVoteProducer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      producers_(from.producers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&voter_, &from.voter_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxy_) -
    reinterpret_cast<char*>(&voter_)) + sizeof(proxy_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
}

void EosTxActionAck_EosActionVoteProducer::SharedCtor() {
  ::memset(&voter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxy_) -
      reinterpret_cast<char*>(&voter_)) + sizeof(proxy_));
}

EosTxActionAck_EosActionVoteProducer::~EosTxActionAck_EosActionVoteProducer() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  SharedDtor();
}

void EosTxActionAck_EosActionVoteProducer::SharedDtor() {
}

void EosTxActionAck_EosActionVoteProducer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionVoteProducer& EosTxActionAck_EosActionVoteProducer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionVoteProducer_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionVoteProducer::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&voter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proxy_) -
        reinterpret_cast<char*>(&voter_)) + sizeof(proxy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionVoteProducer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionVoteProducer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 voter = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_voter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 proxy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_proxy(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 producers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_producers(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_producers();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionVoteProducer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 voter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_voter(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &voter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 proxy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_proxy(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 producers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24u, input, this->mutable_producers())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_producers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionVoteProducer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 voter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->voter(), output);
  }

  // optional uint64 proxy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->proxy(), output);
  }

  // repeated uint64 producers = 3;
  for (int i = 0, n = this->producers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->producers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
}

::google::protobuf::uint8* EosTxActionAck_EosActionVoteProducer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 voter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->voter(), target);
  }

  // optional uint64 proxy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->proxy(), target);
  }

  // repeated uint64 producers = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(3, this->producers_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  return target;
}

size_t EosTxActionAck_EosActionVoteProducer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 producers = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->producers_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->producers_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 voter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->voter());
    }

    // optional uint64 proxy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionVoteProducer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionVoteProducer* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionVoteProducer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionVoteProducer::MergeFrom(const EosTxActionAck_EosActionVoteProducer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  producers_.MergeFrom(from.producers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      voter_ = from.voter_;
    }
    if (cached_has_bits & 0x00000002u) {
      proxy_ = from.proxy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionVoteProducer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionVoteProducer::CopyFrom(const EosTxActionAck_EosActionVoteProducer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionVoteProducer::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionVoteProducer::Swap(EosTxActionAck_EosActionVoteProducer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionVoteProducer::InternalSwap(EosTxActionAck_EosActionVoteProducer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  producers_.InternalSwap(&other->producers_);
  swap(voter_, other->voter_);
  swap(proxy_, other->proxy_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionVoteProducer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionUpdateAuth::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionUpdateAuth_default_instance_._instance.get_mutable()->auth_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::internal_default_instance());
}
class EosTxActionAck_EosActionUpdateAuth::HasBitSetters {
 public:
  static void set_has_account(EosTxActionAck_EosActionUpdateAuth* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_permission(EosTxActionAck_EosActionUpdateAuth* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_parent(EosTxActionAck_EosActionUpdateAuth* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization& auth(const EosTxActionAck_EosActionUpdateAuth* msg);
  static void set_has_auth(EosTxActionAck_EosActionUpdateAuth* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization&
EosTxActionAck_EosActionUpdateAuth::HasBitSetters::auth(const EosTxActionAck_EosActionUpdateAuth* msg) {
  return *msg->auth_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionUpdateAuth::kAccountFieldNumber;
const int EosTxActionAck_EosActionUpdateAuth::kPermissionFieldNumber;
const int EosTxActionAck_EosActionUpdateAuth::kParentFieldNumber;
const int EosTxActionAck_EosActionUpdateAuth::kAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionUpdateAuth::EosTxActionAck_EosActionUpdateAuth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
}
EosTxActionAck_EosActionUpdateAuth::EosTxActionAck_EosActionUpdateAuth(const EosTxActionAck_EosActionUpdateAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth()) {
    auth_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&account_)) + sizeof(parent_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
}

void EosTxActionAck_EosActionUpdateAuth::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto.base);
  ::memset(&auth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&auth_)) + sizeof(parent_));
}

EosTxActionAck_EosActionUpdateAuth::~EosTxActionAck_EosActionUpdateAuth() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  SharedDtor();
}

void EosTxActionAck_EosActionUpdateAuth::SharedDtor() {
  if (this != internal_default_instance()) delete auth_;
}

void EosTxActionAck_EosActionUpdateAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionUpdateAuth& EosTxActionAck_EosActionUpdateAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionUpdateAuth_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionUpdateAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(auth_ != nullptr);
    auth_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&account_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_) -
        reinterpret_cast<char*>(&account_)) + sizeof(parent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionUpdateAuth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionUpdateAuth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 permission = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 parent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_parent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization auth = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::_InternalParse;
        object = msg->mutable_auth();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionUpdateAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 parent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_parent(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization auth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionUpdateAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // optional uint64 permission = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->permission(), output);
  }

  // optional uint64 parent = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->parent(), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization auth = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::auth(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
}

::google::protobuf::uint8* EosTxActionAck_EosActionUpdateAuth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // optional uint64 permission = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->permission(), target);
  }

  // optional uint64 parent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->parent(), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization auth = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::auth(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  return target;
}

size_t EosTxActionAck_EosActionUpdateAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization auth = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *auth_);
    }

    // optional uint64 account = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

    // optional uint64 permission = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permission());
    }

    // optional uint64 parent = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parent());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionUpdateAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionUpdateAuth* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionUpdateAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionUpdateAuth::MergeFrom(const EosTxActionAck_EosActionUpdateAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_auth()->::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::MergeFrom(from.auth());
    }
    if (cached_has_bits & 0x00000002u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000004u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_ = from.parent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionUpdateAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionUpdateAuth::CopyFrom(const EosTxActionAck_EosActionUpdateAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionUpdateAuth::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionUpdateAuth::Swap(EosTxActionAck_EosActionUpdateAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionUpdateAuth::InternalSwap(EosTxActionAck_EosActionUpdateAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(auth_, other->auth_);
  swap(account_, other->account_);
  swap(permission_, other->permission_);
  swap(parent_, other->parent_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionUpdateAuth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionDeleteAuth::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionDeleteAuth::HasBitSetters {
 public:
  static void set_has_account(EosTxActionAck_EosActionDeleteAuth* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_permission(EosTxActionAck_EosActionDeleteAuth* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionDeleteAuth::kAccountFieldNumber;
const int EosTxActionAck_EosActionDeleteAuth::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionDeleteAuth::EosTxActionAck_EosActionDeleteAuth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
}
EosTxActionAck_EosActionDeleteAuth::EosTxActionAck_EosActionDeleteAuth(const EosTxActionAck_EosActionDeleteAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&account_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
}

void EosTxActionAck_EosActionDeleteAuth::SharedCtor() {
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&account_)) + sizeof(permission_));
}

EosTxActionAck_EosActionDeleteAuth::~EosTxActionAck_EosActionDeleteAuth() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  SharedDtor();
}

void EosTxActionAck_EosActionDeleteAuth::SharedDtor() {
}

void EosTxActionAck_EosActionDeleteAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionDeleteAuth& EosTxActionAck_EosActionDeleteAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionDeleteAuth_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionDeleteAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_) -
        reinterpret_cast<char*>(&account_)) + sizeof(permission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionDeleteAuth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionDeleteAuth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 permission = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_permission(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionDeleteAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_permission(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionDeleteAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // optional uint64 permission = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->permission(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
}

::google::protobuf::uint8* EosTxActionAck_EosActionDeleteAuth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // optional uint64 permission = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->permission(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  return target;
}

size_t EosTxActionAck_EosActionDeleteAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

    // optional uint64 permission = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permission());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionDeleteAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionDeleteAuth* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionDeleteAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionDeleteAuth::MergeFrom(const EosTxActionAck_EosActionDeleteAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000002u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionDeleteAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionDeleteAuth::CopyFrom(const EosTxActionAck_EosActionDeleteAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionDeleteAuth::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionDeleteAuth::Swap(EosTxActionAck_EosActionDeleteAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionDeleteAuth::InternalSwap(EosTxActionAck_EosActionDeleteAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
  swap(permission_, other->permission_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionDeleteAuth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionLinkAuth::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionLinkAuth::HasBitSetters {
 public:
  static void set_has_account(EosTxActionAck_EosActionLinkAuth* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_code(EosTxActionAck_EosActionLinkAuth* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_type(EosTxActionAck_EosActionLinkAuth* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_requirement(EosTxActionAck_EosActionLinkAuth* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionLinkAuth::kAccountFieldNumber;
const int EosTxActionAck_EosActionLinkAuth::kCodeFieldNumber;
const int EosTxActionAck_EosActionLinkAuth::kTypeFieldNumber;
const int EosTxActionAck_EosActionLinkAuth::kRequirementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionLinkAuth::EosTxActionAck_EosActionLinkAuth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
}
EosTxActionAck_EosActionLinkAuth::EosTxActionAck_EosActionLinkAuth(const EosTxActionAck_EosActionLinkAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&requirement_) -
    reinterpret_cast<char*>(&account_)) + sizeof(requirement_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
}

void EosTxActionAck_EosActionLinkAuth::SharedCtor() {
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requirement_) -
      reinterpret_cast<char*>(&account_)) + sizeof(requirement_));
}

EosTxActionAck_EosActionLinkAuth::~EosTxActionAck_EosActionLinkAuth() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  SharedDtor();
}

void EosTxActionAck_EosActionLinkAuth::SharedDtor() {
}

void EosTxActionAck_EosActionLinkAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionLinkAuth& EosTxActionAck_EosActionLinkAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionLinkAuth_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionLinkAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requirement_) -
        reinterpret_cast<char*>(&account_)) + sizeof(requirement_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionLinkAuth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionLinkAuth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 requirement = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_requirement(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionLinkAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 requirement = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_requirement(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionLinkAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // optional uint64 code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->code(), output);
  }

  // optional uint64 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->type(), output);
  }

  // optional uint64 requirement = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->requirement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
}

::google::protobuf::uint8* EosTxActionAck_EosActionLinkAuth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // optional uint64 code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->code(), target);
  }

  // optional uint64 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->type(), target);
  }

  // optional uint64 requirement = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->requirement(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  return target;
}

size_t EosTxActionAck_EosActionLinkAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

    // optional uint64 code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }

    // optional uint64 requirement = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requirement());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionLinkAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionLinkAuth* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionLinkAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionLinkAuth::MergeFrom(const EosTxActionAck_EosActionLinkAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      requirement_ = from.requirement_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionLinkAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionLinkAuth::CopyFrom(const EosTxActionAck_EosActionLinkAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionLinkAuth::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionLinkAuth::Swap(EosTxActionAck_EosActionLinkAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionLinkAuth::InternalSwap(EosTxActionAck_EosActionLinkAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
  swap(code_, other->code_);
  swap(type_, other->type_);
  swap(requirement_, other->requirement_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionLinkAuth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionUnlinkAuth::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionUnlinkAuth::HasBitSetters {
 public:
  static void set_has_account(EosTxActionAck_EosActionUnlinkAuth* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_code(EosTxActionAck_EosActionUnlinkAuth* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_type(EosTxActionAck_EosActionUnlinkAuth* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionUnlinkAuth::kAccountFieldNumber;
const int EosTxActionAck_EosActionUnlinkAuth::kCodeFieldNumber;
const int EosTxActionAck_EosActionUnlinkAuth::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionUnlinkAuth::EosTxActionAck_EosActionUnlinkAuth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
}
EosTxActionAck_EosActionUnlinkAuth::EosTxActionAck_EosActionUnlinkAuth(const EosTxActionAck_EosActionUnlinkAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&account_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
}

void EosTxActionAck_EosActionUnlinkAuth::SharedCtor() {
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&account_)) + sizeof(type_));
}

EosTxActionAck_EosActionUnlinkAuth::~EosTxActionAck_EosActionUnlinkAuth() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  SharedDtor();
}

void EosTxActionAck_EosActionUnlinkAuth::SharedDtor() {
}

void EosTxActionAck_EosActionUnlinkAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionUnlinkAuth& EosTxActionAck_EosActionUnlinkAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionUnlinkAuth_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionUnlinkAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&account_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionUnlinkAuth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionUnlinkAuth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionUnlinkAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionUnlinkAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->account(), output);
  }

  // optional uint64 code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->code(), output);
  }

  // optional uint64 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
}

::google::protobuf::uint8* EosTxActionAck_EosActionUnlinkAuth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 account = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->account(), target);
  }

  // optional uint64 code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->code(), target);
  }

  // optional uint64 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  return target;
}

size_t EosTxActionAck_EosActionUnlinkAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->account());
    }

    // optional uint64 code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionUnlinkAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionUnlinkAuth* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionUnlinkAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionUnlinkAuth::MergeFrom(const EosTxActionAck_EosActionUnlinkAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionUnlinkAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionUnlinkAuth::CopyFrom(const EosTxActionAck_EosActionUnlinkAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionUnlinkAuth::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionUnlinkAuth::Swap(EosTxActionAck_EosActionUnlinkAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionUnlinkAuth::InternalSwap(EosTxActionAck_EosActionUnlinkAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_, other->account_);
  swap(code_, other->code_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionUnlinkAuth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionNewAccount::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionNewAccount_default_instance_._instance.get_mutable()->owner_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_EosActionNewAccount_default_instance_._instance.get_mutable()->active_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::internal_default_instance());
}
class EosTxActionAck_EosActionNewAccount::HasBitSetters {
 public:
  static void set_has_creator(EosTxActionAck_EosActionNewAccount* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(EosTxActionAck_EosActionNewAccount* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization& owner(const EosTxActionAck_EosActionNewAccount* msg);
  static void set_has_owner(EosTxActionAck_EosActionNewAccount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization& active(const EosTxActionAck_EosActionNewAccount* msg);
  static void set_has_active(EosTxActionAck_EosActionNewAccount* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization&
EosTxActionAck_EosActionNewAccount::HasBitSetters::owner(const EosTxActionAck_EosActionNewAccount* msg) {
  return *msg->owner_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization&
EosTxActionAck_EosActionNewAccount::HasBitSetters::active(const EosTxActionAck_EosActionNewAccount* msg) {
  return *msg->active_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionNewAccount::kCreatorFieldNumber;
const int EosTxActionAck_EosActionNewAccount::kNameFieldNumber;
const int EosTxActionAck_EosActionNewAccount::kOwnerFieldNumber;
const int EosTxActionAck_EosActionNewAccount::kActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionNewAccount::EosTxActionAck_EosActionNewAccount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
}
EosTxActionAck_EosActionNewAccount::EosTxActionAck_EosActionNewAccount(const EosTxActionAck_EosActionNewAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner()) {
    owner_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_active()) {
    active_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization(*from.active_);
  } else {
    active_ = nullptr;
  }
  ::memcpy(&creator_, &from.creator_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_) -
    reinterpret_cast<char*>(&creator_)) + sizeof(name_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
}

void EosTxActionAck_EosActionNewAccount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionNewAccount_messages_2deos_2eproto.base);
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(name_));
}

EosTxActionAck_EosActionNewAccount::~EosTxActionAck_EosActionNewAccount() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  SharedDtor();
}

void EosTxActionAck_EosActionNewAccount::SharedDtor() {
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete active_;
}

void EosTxActionAck_EosActionNewAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionNewAccount& EosTxActionAck_EosActionNewAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionNewAccount_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionNewAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_ != nullptr);
      owner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(active_ != nullptr);
      active_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_) -
        reinterpret_cast<char*>(&creator_)) + sizeof(name_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionNewAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionNewAccount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 creator = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_creator(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_name(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization owner = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::_InternalParse;
        object = msg->mutable_owner();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization active = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::_InternalParse;
        object = msg->mutable_active();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionNewAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 creator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_creator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_name(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization owner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization active = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_active()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionNewAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 creator = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->creator(), output);
  }

  // optional uint64 name = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->name(), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization owner = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::owner(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization active = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::active(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
}

::google::protobuf::uint8* EosTxActionAck_EosActionNewAccount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 creator = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->creator(), target);
  }

  // optional uint64 name = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->name(), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization owner = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::owner(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization active = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::active(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  return target;
}

size_t EosTxActionAck_EosActionNewAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization owner = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *owner_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosAuthorization active = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *active_);
    }

    // optional uint64 creator = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creator());
    }

    // optional uint64 name = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionNewAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionNewAccount* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionNewAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionNewAccount::MergeFrom(const EosTxActionAck_EosActionNewAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner()->::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::MergeFrom(from.owner());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_active()->::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization::MergeFrom(from.active());
    }
    if (cached_has_bits & 0x00000004u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00000008u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionNewAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionNewAccount::CopyFrom(const EosTxActionAck_EosActionNewAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionNewAccount::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionNewAccount::Swap(EosTxActionAck_EosActionNewAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionNewAccount::InternalSwap(EosTxActionAck_EosActionNewAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_, other->owner_);
  swap(active_, other->active_);
  swap(creator_, other->creator_);
  swap(name_, other->name_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionNewAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck_EosActionUnknown::InitAsDefaultInstance() {
}
class EosTxActionAck_EosActionUnknown::HasBitSetters {
 public:
  static void set_has_data_size(EosTxActionAck_EosActionUnknown* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data_chunk(EosTxActionAck_EosActionUnknown* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck_EosActionUnknown::kDataSizeFieldNumber;
const int EosTxActionAck_EosActionUnknown::kDataChunkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck_EosActionUnknown::EosTxActionAck_EosActionUnknown()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
}
EosTxActionAck_EosActionUnknown::EosTxActionAck_EosActionUnknown(const EosTxActionAck_EosActionUnknown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_chunk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_chunk()) {
    data_chunk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
  }
  data_size_ = from.data_size_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
}

void EosTxActionAck_EosActionUnknown::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_EosActionUnknown_messages_2deos_2eproto.base);
  data_chunk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_size_ = 0u;
}

EosTxActionAck_EosActionUnknown::~EosTxActionAck_EosActionUnknown() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  SharedDtor();
}

void EosTxActionAck_EosActionUnknown::SharedDtor() {
  data_chunk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosTxActionAck_EosActionUnknown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck_EosActionUnknown& EosTxActionAck_EosActionUnknown::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_EosActionUnknown_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck_EosActionUnknown::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_chunk_.ClearNonDefaultToEmptyNoArena();
  }
  data_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck_EosActionUnknown::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck_EosActionUnknown*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 data_size = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_data_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes data_chunk = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data_chunk();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck_EosActionUnknown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 data_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_data_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data_chunk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_chunk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck_EosActionUnknown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 data_size = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_size(), output);
  }

  // optional bytes data_chunk = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data_chunk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
}

::google::protobuf::uint8* EosTxActionAck_EosActionUnknown::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 data_size = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_size(), target);
  }

  // optional bytes data_chunk = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data_chunk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  return target;
}

size_t EosTxActionAck_EosActionUnknown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data_chunk = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_chunk());
    }

    // optional uint32 data_size = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck_EosActionUnknown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck_EosActionUnknown* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck_EosActionUnknown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
    MergeFrom(*source);
  }
}

void EosTxActionAck_EosActionUnknown::MergeFrom(const EosTxActionAck_EosActionUnknown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_chunk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_chunk_);
    }
    if (cached_has_bits & 0x00000002u) {
      data_size_ = from.data_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosTxActionAck_EosActionUnknown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck_EosActionUnknown::CopyFrom(const EosTxActionAck_EosActionUnknown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck_EosActionUnknown::IsInitialized() const {
  return true;
}

void EosTxActionAck_EosActionUnknown::Swap(EosTxActionAck_EosActionUnknown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck_EosActionUnknown::InternalSwap(EosTxActionAck_EosActionUnknown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_chunk_.Swap(&other->data_chunk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_size_, other->data_size_);
}

::google::protobuf::Metadata EosTxActionAck_EosActionUnknown::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosTxActionAck::InitAsDefaultInstance() {
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->common_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->transfer_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->delegate_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->undelegate_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->refund_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->buy_ram_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->buy_ram_bytes_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->sell_ram_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->vote_producer_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->update_auth_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->delete_auth_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->link_auth_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->unlink_auth_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->new_account_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount::internal_default_instance());
  ::hw::trezor::messages::eos::_EosTxActionAck_default_instance_._instance.get_mutable()->unknown_ = const_cast< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown*>(
      ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown::internal_default_instance());
}
class EosTxActionAck::HasBitSetters {
 public:
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon& common(const EosTxActionAck* msg);
  static void set_has_common(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer& transfer(const EosTxActionAck* msg);
  static void set_has_transfer(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate& delegate(const EosTxActionAck* msg);
  static void set_has_delegate(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate& undelegate(const EosTxActionAck* msg);
  static void set_has_undelegate(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund& refund(const EosTxActionAck* msg);
  static void set_has_refund(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam& buy_ram(const EosTxActionAck* msg);
  static void set_has_buy_ram(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes& buy_ram_bytes(const EosTxActionAck* msg);
  static void set_has_buy_ram_bytes(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam& sell_ram(const EosTxActionAck* msg);
  static void set_has_sell_ram(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer& vote_producer(const EosTxActionAck* msg);
  static void set_has_vote_producer(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth& update_auth(const EosTxActionAck* msg);
  static void set_has_update_auth(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth& delete_auth(const EosTxActionAck* msg);
  static void set_has_delete_auth(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth& link_auth(const EosTxActionAck* msg);
  static void set_has_link_auth(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth& unlink_auth(const EosTxActionAck* msg);
  static void set_has_unlink_auth(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount& new_account(const EosTxActionAck* msg);
  static void set_has_new_account(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown& unknown(const EosTxActionAck* msg);
  static void set_has_unknown(EosTxActionAck* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
};

const ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon&
EosTxActionAck::HasBitSetters::common(const EosTxActionAck* msg) {
  return *msg->common_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer&
EosTxActionAck::HasBitSetters::transfer(const EosTxActionAck* msg) {
  return *msg->transfer_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate&
EosTxActionAck::HasBitSetters::delegate(const EosTxActionAck* msg) {
  return *msg->delegate_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate&
EosTxActionAck::HasBitSetters::undelegate(const EosTxActionAck* msg) {
  return *msg->undelegate_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund&
EosTxActionAck::HasBitSetters::refund(const EosTxActionAck* msg) {
  return *msg->refund_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam&
EosTxActionAck::HasBitSetters::buy_ram(const EosTxActionAck* msg) {
  return *msg->buy_ram_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes&
EosTxActionAck::HasBitSetters::buy_ram_bytes(const EosTxActionAck* msg) {
  return *msg->buy_ram_bytes_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam&
EosTxActionAck::HasBitSetters::sell_ram(const EosTxActionAck* msg) {
  return *msg->sell_ram_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer&
EosTxActionAck::HasBitSetters::vote_producer(const EosTxActionAck* msg) {
  return *msg->vote_producer_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth&
EosTxActionAck::HasBitSetters::update_auth(const EosTxActionAck* msg) {
  return *msg->update_auth_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth&
EosTxActionAck::HasBitSetters::delete_auth(const EosTxActionAck* msg) {
  return *msg->delete_auth_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth&
EosTxActionAck::HasBitSetters::link_auth(const EosTxActionAck* msg) {
  return *msg->link_auth_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth&
EosTxActionAck::HasBitSetters::unlink_auth(const EosTxActionAck* msg) {
  return *msg->unlink_auth_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount&
EosTxActionAck::HasBitSetters::new_account(const EosTxActionAck* msg) {
  return *msg->new_account_;
}
const ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown&
EosTxActionAck::HasBitSetters::unknown(const EosTxActionAck* msg) {
  return *msg->unknown_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosTxActionAck::kCommonFieldNumber;
const int EosTxActionAck::kTransferFieldNumber;
const int EosTxActionAck::kDelegateFieldNumber;
const int EosTxActionAck::kUndelegateFieldNumber;
const int EosTxActionAck::kRefundFieldNumber;
const int EosTxActionAck::kBuyRamFieldNumber;
const int EosTxActionAck::kBuyRamBytesFieldNumber;
const int EosTxActionAck::kSellRamFieldNumber;
const int EosTxActionAck::kVoteProducerFieldNumber;
const int EosTxActionAck::kUpdateAuthFieldNumber;
const int EosTxActionAck::kDeleteAuthFieldNumber;
const int EosTxActionAck::kLinkAuthFieldNumber;
const int EosTxActionAck::kUnlinkAuthFieldNumber;
const int EosTxActionAck::kNewAccountFieldNumber;
const int EosTxActionAck::kUnknownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosTxActionAck::EosTxActionAck()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosTxActionAck)
}
EosTxActionAck::EosTxActionAck(const EosTxActionAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from.has_transfer()) {
    transfer_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer(*from.transfer_);
  } else {
    transfer_ = nullptr;
  }
  if (from.has_delegate()) {
    delegate_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate(*from.delegate_);
  } else {
    delegate_ = nullptr;
  }
  if (from.has_undelegate()) {
    undelegate_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate(*from.undelegate_);
  } else {
    undelegate_ = nullptr;
  }
  if (from.has_refund()) {
    refund_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund(*from.refund_);
  } else {
    refund_ = nullptr;
  }
  if (from.has_buy_ram()) {
    buy_ram_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam(*from.buy_ram_);
  } else {
    buy_ram_ = nullptr;
  }
  if (from.has_buy_ram_bytes()) {
    buy_ram_bytes_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes(*from.buy_ram_bytes_);
  } else {
    buy_ram_bytes_ = nullptr;
  }
  if (from.has_sell_ram()) {
    sell_ram_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam(*from.sell_ram_);
  } else {
    sell_ram_ = nullptr;
  }
  if (from.has_vote_producer()) {
    vote_producer_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer(*from.vote_producer_);
  } else {
    vote_producer_ = nullptr;
  }
  if (from.has_update_auth()) {
    update_auth_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth(*from.update_auth_);
  } else {
    update_auth_ = nullptr;
  }
  if (from.has_delete_auth()) {
    delete_auth_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth(*from.delete_auth_);
  } else {
    delete_auth_ = nullptr;
  }
  if (from.has_link_auth()) {
    link_auth_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth(*from.link_auth_);
  } else {
    link_auth_ = nullptr;
  }
  if (from.has_unlink_auth()) {
    unlink_auth_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth(*from.unlink_auth_);
  } else {
    unlink_auth_ = nullptr;
  }
  if (from.has_new_account()) {
    new_account_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount(*from.new_account_);
  } else {
    new_account_ = nullptr;
  }
  if (from.has_unknown()) {
    unknown_ = new ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown(*from.unknown_);
  } else {
    unknown_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosTxActionAck)
}

void EosTxActionAck::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosTxActionAck_messages_2deos_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&common_)) + sizeof(unknown_));
}

EosTxActionAck::~EosTxActionAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosTxActionAck)
  SharedDtor();
}

void EosTxActionAck::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete transfer_;
  if (this != internal_default_instance()) delete delegate_;
  if (this != internal_default_instance()) delete undelegate_;
  if (this != internal_default_instance()) delete refund_;
  if (this != internal_default_instance()) delete buy_ram_;
  if (this != internal_default_instance()) delete buy_ram_bytes_;
  if (this != internal_default_instance()) delete sell_ram_;
  if (this != internal_default_instance()) delete vote_producer_;
  if (this != internal_default_instance()) delete update_auth_;
  if (this != internal_default_instance()) delete delete_auth_;
  if (this != internal_default_instance()) delete link_auth_;
  if (this != internal_default_instance()) delete unlink_auth_;
  if (this != internal_default_instance()) delete new_account_;
  if (this != internal_default_instance()) delete unknown_;
}

void EosTxActionAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosTxActionAck& EosTxActionAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosTxActionAck_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosTxActionAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosTxActionAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(common_ != nullptr);
      common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transfer_ != nullptr);
      transfer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(delegate_ != nullptr);
      delegate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(undelegate_ != nullptr);
      undelegate_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(refund_ != nullptr);
      refund_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(buy_ram_ != nullptr);
      buy_ram_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(buy_ram_bytes_ != nullptr);
      buy_ram_bytes_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sell_ram_ != nullptr);
      sell_ram_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(vote_producer_ != nullptr);
      vote_producer_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(update_auth_ != nullptr);
      update_auth_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(delete_auth_ != nullptr);
      delete_auth_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(link_auth_ != nullptr);
      link_auth_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(unlink_auth_ != nullptr);
      unlink_auth_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(new_account_ != nullptr);
      new_account_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(unknown_ != nullptr);
      unknown_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosTxActionAck::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosTxActionAck*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionCommon common = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon::_InternalParse;
        object = msg->mutable_common();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer transfer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer::_InternalParse;
        object = msg->mutable_transfer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate delegate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate::_InternalParse;
        object = msg->mutable_delegate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate undelegate = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate::_InternalParse;
        object = msg->mutable_undelegate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionRefund refund = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund::_InternalParse;
        object = msg->mutable_refund();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam buy_ram = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam::_InternalParse;
        object = msg->mutable_buy_ram();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes buy_ram_bytes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes::_InternalParse;
        object = msg->mutable_buy_ram_bytes();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam sell_ram = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam::_InternalParse;
        object = msg->mutable_sell_ram();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer vote_producer = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer::_InternalParse;
        object = msg->mutable_vote_producer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth update_auth = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth::_InternalParse;
        object = msg->mutable_update_auth();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth delete_auth = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth::_InternalParse;
        object = msg->mutable_delete_auth();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth link_auth = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth::_InternalParse;
        object = msg->mutable_link_auth();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth unlink_auth = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth::_InternalParse;
        object = msg->mutable_unlink_auth();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount new_account = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount::_InternalParse;
        object = msg->mutable_new_account();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown unknown = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown::_InternalParse;
        object = msg->mutable_unknown();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosTxActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosTxActionAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionCommon common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer transfer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate delegate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delegate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate undelegate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_undelegate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionRefund refund = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refund()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam buy_ram = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_buy_ram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes buy_ram_bytes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_buy_ram_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam sell_ram = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sell_ram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer vote_producer = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vote_producer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth update_auth = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth delete_auth = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth link_auth = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth unlink_auth = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unlink_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount new_account = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown unknown = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unknown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosTxActionAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosTxActionAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosTxActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosTxActionAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionCommon common = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::common(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer transfer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::transfer(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate delegate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::delegate(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate undelegate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::undelegate(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionRefund refund = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::refund(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam buy_ram = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::buy_ram(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes buy_ram_bytes = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::buy_ram_bytes(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam sell_ram = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::sell_ram(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer vote_producer = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::vote_producer(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth update_auth = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::update_auth(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth delete_auth = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::delete_auth(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth link_auth = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::link_auth(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth unlink_auth = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::unlink_auth(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount new_account = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::new_account(this), output);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown unknown = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::unknown(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosTxActionAck)
}

::google::protobuf::uint8* EosTxActionAck::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosTxActionAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionCommon common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::common(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer transfer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::transfer(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate delegate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::delegate(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate undelegate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::undelegate(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionRefund refund = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::refund(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam buy_ram = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::buy_ram(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes buy_ram_bytes = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::buy_ram_bytes(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam sell_ram = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::sell_ram(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer vote_producer = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::vote_producer(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth update_auth = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::update_auth(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth delete_auth = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::delete_auth(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth link_auth = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::link_auth(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth unlink_auth = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::unlink_auth(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount new_account = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::new_account(this), target);
  }

  // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown unknown = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::unknown(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosTxActionAck)
  return target;
}

size_t EosTxActionAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosTxActionAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionCommon common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *common_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionTransfer transfer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transfer_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDelegate delegate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delegate_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUndelegate undelegate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *undelegate_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionRefund refund = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *refund_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRam buy_ram = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *buy_ram_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionBuyRamBytes buy_ram_bytes = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *buy_ram_bytes_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionSellRam sell_ram = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sell_ram_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionVoteProducer vote_producer = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vote_producer_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUpdateAuth update_auth = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_auth_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionDeleteAuth delete_auth = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delete_auth_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionLinkAuth link_auth = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *link_auth_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnlinkAuth unlink_auth = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unlink_auth_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionNewAccount new_account = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *new_account_);
    }

    // optional .hw.trezor.messages.eos.EosTxActionAck.EosActionUnknown unknown = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unknown_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosTxActionAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosTxActionAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EosTxActionAck* source =
      ::google::protobuf::DynamicCastToGenerated<EosTxActionAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosTxActionAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosTxActionAck)
    MergeFrom(*source);
  }
}

void EosTxActionAck::MergeFrom(const EosTxActionAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosTxActionAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_common()->::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon::MergeFrom(from.common());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_transfer()->::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer::MergeFrom(from.transfer());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_delegate()->::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate::MergeFrom(from.delegate());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_undelegate()->::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate::MergeFrom(from.undelegate());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_refund()->::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund::MergeFrom(from.refund());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_buy_ram()->::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam::MergeFrom(from.buy_ram());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_buy_ram_bytes()->::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes::MergeFrom(from.buy_ram_bytes());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_sell_ram()->::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam::MergeFrom(from.sell_ram());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_vote_producer()->::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer::MergeFrom(from.vote_producer());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_update_auth()->::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth::MergeFrom(from.update_auth());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_delete_auth()->::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth::MergeFrom(from.delete_auth());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_link_auth()->::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth::MergeFrom(from.link_auth());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_unlink_auth()->::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth::MergeFrom(from.unlink_auth());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_new_account()->::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount::MergeFrom(from.new_account());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_unknown()->::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown::MergeFrom(from.unknown());
    }
  }
}

void EosTxActionAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosTxActionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosTxActionAck::CopyFrom(const EosTxActionAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosTxActionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosTxActionAck::IsInitialized() const {
  return true;
}

void EosTxActionAck::Swap(EosTxActionAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosTxActionAck::InternalSwap(EosTxActionAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(common_, other->common_);
  swap(transfer_, other->transfer_);
  swap(delegate_, other->delegate_);
  swap(undelegate_, other->undelegate_);
  swap(refund_, other->refund_);
  swap(buy_ram_, other->buy_ram_);
  swap(buy_ram_bytes_, other->buy_ram_bytes_);
  swap(sell_ram_, other->sell_ram_);
  swap(vote_producer_, other->vote_producer_);
  swap(update_auth_, other->update_auth_);
  swap(delete_auth_, other->delete_auth_);
  swap(link_auth_, other->link_auth_);
  swap(unlink_auth_, other->unlink_auth_);
  swap(new_account_, other->new_account_);
  swap(unknown_, other->unknown_);
}

::google::protobuf::Metadata EosTxActionAck::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EosSignedTx::InitAsDefaultInstance() {
}
class EosSignedTx::HasBitSetters {
 public:
  static void set_has_signature_v(EosSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_signature_r(EosSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_signature_s(EosSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EosSignedTx::kSignatureVFieldNumber;
const int EosSignedTx::kSignatureRFieldNumber;
const int EosSignedTx::kSignatureSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EosSignedTx::EosSignedTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.eos.EosSignedTx)
}
EosSignedTx::EosSignedTx(const EosSignedTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature_r()) {
    signature_r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_r_);
  }
  signature_s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature_s()) {
    signature_s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_s_);
  }
  signature_v_ = from.signature_v_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.eos.EosSignedTx)
}

void EosSignedTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EosSignedTx_messages_2deos_2eproto.base);
  signature_r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_v_ = 0u;
}

EosSignedTx::~EosSignedTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.eos.EosSignedTx)
  SharedDtor();
}

void EosSignedTx::SharedDtor() {
  signature_r_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EosSignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EosSignedTx& EosSignedTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EosSignedTx_messages_2deos_2eproto.base);
  return *internal_default_instance();
}


void EosSignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.eos.EosSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signature_r_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_s_.ClearNonDefaultToEmptyNoArena();
    }
  }
  signature_v_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EosSignedTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EosSignedTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 signature_v = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_signature_v(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes signature_r = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature_r();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes signature_s = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature_s();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EosSignedTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.eos.EosSignedTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 signature_v = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_signature_v(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signature_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature_r = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.eos.EosSignedTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.eos.EosSignedTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EosSignedTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.eos.EosSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 signature_v = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signature_v(), output);
  }

  // optional bytes signature_r = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature_r(), output);
  }

  // optional bytes signature_s = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->signature_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.eos.EosSignedTx)
}

::google::protobuf::uint8* EosSignedTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.eos.EosSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 signature_v = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signature_v(), target);
  }

  // optional bytes signature_r = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature_r(), target);
  }

  // optional bytes signature_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.eos.EosSignedTx)
  return target;
}

size_t EosSignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.eos.EosSignedTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes signature_r = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature_r());
    }

    // optional bytes signature_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature_s());
    }

    // optional uint32 signature_v = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signature_v());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EosSignedTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.eos.EosSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  const EosSignedTx* source =
      ::google::protobuf::DynamicCastToGenerated<EosSignedTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.eos.EosSignedTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.eos.EosSignedTx)
    MergeFrom(*source);
  }
}

void EosSignedTx::MergeFrom(const EosSignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.eos.EosSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      signature_r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_r_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      signature_s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_s_);
    }
    if (cached_has_bits & 0x00000004u) {
      signature_v_ = from.signature_v_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EosSignedTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.eos.EosSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EosSignedTx::CopyFrom(const EosSignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.eos.EosSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EosSignedTx::IsInitialized() const {
  return true;
}

void EosSignedTx::Swap(EosSignedTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EosSignedTx::InternalSwap(EosSignedTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_r_.Swap(&other->signature_r_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_s_.Swap(&other->signature_s_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signature_v_, other->signature_v_);
}

::google::protobuf::Metadata EosSignedTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2deos_2eproto);
  return ::file_level_metadata_messages_2deos_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace eos
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosGetPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosGetPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosGetPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosSignTx_EosTxHeader* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosSignTx_EosTxHeader >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosSignTx_EosTxHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosSignTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosSignTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosSignTx >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosAsset* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosPermissionLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorizationWait >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosAuthorization >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionDelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUndelegate >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionRefund >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRam >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionBuyRamBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionSellRam >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionVoteProducer >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUpdateAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionDeleteAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionLinkAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnlinkAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionNewAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck_EosActionUnknown >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosTxActionAck* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosTxActionAck >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosTxActionAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::eos::EosSignedTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::eos::EosSignedTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::eos::EosSignedTx >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
